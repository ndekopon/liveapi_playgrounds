// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: events.proto

#include "events.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace rtech {
namespace liveapi {
PROTOBUF_CONSTEXPR Vector3::Vector3(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector3DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector3DefaultTypeInternal() {}
  union {
    Vector3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector3DefaultTypeInternal _Vector3_default_instance_;
PROTOBUF_CONSTEXPR Player::Player(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nucleushash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hardwarename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.teamname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.character_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.skin_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pos_)*/nullptr
  , /*decltype(_impl_.angles_)*/nullptr
  , /*decltype(_impl_.teamid_)*/0u
  , /*decltype(_impl_.currenthealth_)*/0u
  , /*decltype(_impl_.maxhealth_)*/0u
  , /*decltype(_impl_.shieldhealth_)*/0u
  , /*decltype(_impl_.shieldmaxhealth_)*/0u
  , /*decltype(_impl_.squadindex_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerDefaultTypeInternal() {}
  union {
    Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerDefaultTypeInternal _Player_default_instance_;
PROTOBUF_CONSTEXPR CustomMatch_LobbyPlayer::CustomMatch_LobbyPlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nucleushash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hardwarename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.teamid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CustomMatch_LobbyPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CustomMatch_LobbyPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CustomMatch_LobbyPlayerDefaultTypeInternal() {}
  union {
    CustomMatch_LobbyPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CustomMatch_LobbyPlayerDefaultTypeInternal _CustomMatch_LobbyPlayer_default_instance_;
PROTOBUF_CONSTEXPR Datacenter::Datacenter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DatacenterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DatacenterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DatacenterDefaultTypeInternal() {}
  union {
    Datacenter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DatacenterDefaultTypeInternal _Datacenter_default_instance_;
PROTOBUF_CONSTEXPR Version::Version(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.revision_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.major_num_)*/0u
  , /*decltype(_impl_.minor_num_)*/0u
  , /*decltype(_impl_.build_stamp_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VersionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VersionDefaultTypeInternal() {}
  union {
    Version _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VersionDefaultTypeInternal _Version_default_instance_;
PROTOBUF_CONSTEXPR Init::Init(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gameversion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.platform_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.apiversion_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InitDefaultTypeInternal() {}
  union {
    Init _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InitDefaultTypeInternal _Init_default_instance_;
PROTOBUF_CONSTEXPR CustomMatch_LobbyPlayers::CustomMatch_LobbyPlayers(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.playertoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CustomMatch_LobbyPlayersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CustomMatch_LobbyPlayersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CustomMatch_LobbyPlayersDefaultTypeInternal() {}
  union {
    CustomMatch_LobbyPlayers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CustomMatch_LobbyPlayersDefaultTypeInternal _CustomMatch_LobbyPlayers_default_instance_;
PROTOBUF_CONSTEXPR ObserverSwitched::ObserverSwitched(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.targetteam_)*/{}
  , /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.observer_)*/nullptr
  , /*decltype(_impl_.target_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObserverSwitchedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObserverSwitchedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObserverSwitchedDefaultTypeInternal() {}
  union {
    ObserverSwitched _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObserverSwitchedDefaultTypeInternal _ObserverSwitched_default_instance_;
PROTOBUF_CONSTEXPR ObserverAnnotation::ObserverAnnotation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.annotationserial_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObserverAnnotationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObserverAnnotationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObserverAnnotationDefaultTypeInternal() {}
  union {
    ObserverAnnotation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObserverAnnotationDefaultTypeInternal _ObserverAnnotation_default_instance_;
PROTOBUF_CONSTEXPR MatchSetup::MatchSetup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.map_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.playlistname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.playlistdesc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serverid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.datacenter_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.aimassiston_)*/false
  , /*decltype(_impl_.anonymousmode_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MatchSetupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MatchSetupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MatchSetupDefaultTypeInternal() {}
  union {
    MatchSetup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MatchSetupDefaultTypeInternal _MatchSetup_default_instance_;
PROTOBUF_CONSTEXPR GameStateChanged::GameStateChanged(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.state_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GameStateChangedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameStateChangedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameStateChangedDefaultTypeInternal() {}
  union {
    GameStateChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameStateChangedDefaultTypeInternal _GameStateChanged_default_instance_;
PROTOBUF_CONSTEXPR CharacterSelected::CharacterSelected(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CharacterSelectedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CharacterSelectedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CharacterSelectedDefaultTypeInternal() {}
  union {
    CharacterSelected _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CharacterSelectedDefaultTypeInternal _CharacterSelected_default_instance_;
PROTOBUF_CONSTEXPR MatchStateEnd::MatchStateEnd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.winners_)*/{}
  , /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.state_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MatchStateEndDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MatchStateEndDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MatchStateEndDefaultTypeInternal() {}
  union {
    MatchStateEnd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MatchStateEndDefaultTypeInternal _MatchStateEnd_default_instance_;
PROTOBUF_CONSTEXPR RingStartClosing::RingStartClosing(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.center_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.stage_)*/0u
  , /*decltype(_impl_.currentradius_)*/0
  , /*decltype(_impl_.endradius_)*/0
  , /*decltype(_impl_.shrinkduration_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RingStartClosingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RingStartClosingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RingStartClosingDefaultTypeInternal() {}
  union {
    RingStartClosing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RingStartClosingDefaultTypeInternal _RingStartClosing_default_instance_;
PROTOBUF_CONSTEXPR RingFinishedClosing::RingFinishedClosing(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.center_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.stage_)*/0u
  , /*decltype(_impl_.currentradius_)*/0
  , /*decltype(_impl_.shrinkduration_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RingFinishedClosingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RingFinishedClosingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RingFinishedClosingDefaultTypeInternal() {}
  union {
    RingFinishedClosing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RingFinishedClosingDefaultTypeInternal _RingFinishedClosing_default_instance_;
PROTOBUF_CONSTEXPR PlayerConnected::PlayerConnected(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerConnectedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerConnectedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerConnectedDefaultTypeInternal() {}
  union {
    PlayerConnected _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerConnectedDefaultTypeInternal _PlayerConnected_default_instance_;
PROTOBUF_CONSTEXPR PlayerDisconnected::PlayerDisconnected(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.canreconnect_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerDisconnectedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerDisconnectedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerDisconnectedDefaultTypeInternal() {}
  union {
    PlayerDisconnected _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerDisconnectedDefaultTypeInternal _PlayerDisconnected_default_instance_;
PROTOBUF_CONSTEXPR PlayerStatChanged::PlayerStatChanged(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.statname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.newvalue_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerStatChangedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerStatChangedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerStatChangedDefaultTypeInternal() {}
  union {
    PlayerStatChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerStatChangedDefaultTypeInternal _PlayerStatChanged_default_instance_;
PROTOBUF_CONSTEXPR PlayerDamaged::PlayerDamaged(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.weapon_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attacker_)*/nullptr
  , /*decltype(_impl_.victim_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.damageinflicted_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerDamagedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerDamagedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerDamagedDefaultTypeInternal() {}
  union {
    PlayerDamaged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerDamagedDefaultTypeInternal _PlayerDamaged_default_instance_;
PROTOBUF_CONSTEXPR PlayerKilled::PlayerKilled(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.weapon_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attacker_)*/nullptr
  , /*decltype(_impl_.victim_)*/nullptr
  , /*decltype(_impl_.awardedto_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerKilledDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerKilledDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerKilledDefaultTypeInternal() {}
  union {
    PlayerKilled _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerKilledDefaultTypeInternal _PlayerKilled_default_instance_;
PROTOBUF_CONSTEXPR PlayerDowned::PlayerDowned(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.weapon_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attacker_)*/nullptr
  , /*decltype(_impl_.victim_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerDownedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerDownedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerDownedDefaultTypeInternal() {}
  union {
    PlayerDowned _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerDownedDefaultTypeInternal _PlayerDowned_default_instance_;
PROTOBUF_CONSTEXPR PlayerAssist::PlayerAssist(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.weapon_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.assistant_)*/nullptr
  , /*decltype(_impl_.victim_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerAssistDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerAssistDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerAssistDefaultTypeInternal() {}
  union {
    PlayerAssist _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerAssistDefaultTypeInternal _PlayerAssist_default_instance_;
PROTOBUF_CONSTEXPR SquadEliminated::SquadEliminated(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SquadEliminatedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SquadEliminatedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SquadEliminatedDefaultTypeInternal() {}
  union {
    SquadEliminated _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SquadEliminatedDefaultTypeInternal _SquadEliminated_default_instance_;
PROTOBUF_CONSTEXPR GibraltarShieldAbsorbed::GibraltarShieldAbsorbed(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attacker_)*/nullptr
  , /*decltype(_impl_.victim_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.damageinflicted_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GibraltarShieldAbsorbedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GibraltarShieldAbsorbedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GibraltarShieldAbsorbedDefaultTypeInternal() {}
  union {
    GibraltarShieldAbsorbed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GibraltarShieldAbsorbedDefaultTypeInternal _GibraltarShieldAbsorbed_default_instance_;
PROTOBUF_CONSTEXPR PlayerRespawnTeam::PlayerRespawnTeam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.respawned_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerRespawnTeamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerRespawnTeamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerRespawnTeamDefaultTypeInternal() {}
  union {
    PlayerRespawnTeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerRespawnTeamDefaultTypeInternal _PlayerRespawnTeam_default_instance_;
PROTOBUF_CONSTEXPR PlayerRevive::PlayerRevive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.revived_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerReviveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerReviveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerReviveDefaultTypeInternal() {}
  union {
    PlayerRevive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerReviveDefaultTypeInternal _PlayerRevive_default_instance_;
PROTOBUF_CONSTEXPR ArenasItemSelected::ArenasItemSelected(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.item_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.quantity_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ArenasItemSelectedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ArenasItemSelectedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ArenasItemSelectedDefaultTypeInternal() {}
  union {
    ArenasItemSelected _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ArenasItemSelectedDefaultTypeInternal _ArenasItemSelected_default_instance_;
PROTOBUF_CONSTEXPR ArenasItemDeselected::ArenasItemDeselected(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.item_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.quantity_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ArenasItemDeselectedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ArenasItemDeselectedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ArenasItemDeselectedDefaultTypeInternal() {}
  union {
    ArenasItemDeselected _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ArenasItemDeselectedDefaultTypeInternal _ArenasItemDeselected_default_instance_;
PROTOBUF_CONSTEXPR InventoryPickUp::InventoryPickUp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.item_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.quantity_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InventoryPickUpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InventoryPickUpDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InventoryPickUpDefaultTypeInternal() {}
  union {
    InventoryPickUp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InventoryPickUpDefaultTypeInternal _InventoryPickUp_default_instance_;
PROTOBUF_CONSTEXPR InventoryDrop::InventoryDrop(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.extradata_)*/{}
  , /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.item_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.quantity_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InventoryDropDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InventoryDropDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InventoryDropDefaultTypeInternal() {}
  union {
    InventoryDrop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InventoryDropDefaultTypeInternal _InventoryDrop_default_instance_;
PROTOBUF_CONSTEXPR InventoryUse::InventoryUse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.item_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.quantity_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InventoryUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InventoryUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InventoryUseDefaultTypeInternal() {}
  union {
    InventoryUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InventoryUseDefaultTypeInternal _InventoryUse_default_instance_;
PROTOBUF_CONSTEXPR BannerCollected::BannerCollected(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.collected_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BannerCollectedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BannerCollectedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BannerCollectedDefaultTypeInternal() {}
  union {
    BannerCollected _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BannerCollectedDefaultTypeInternal _BannerCollected_default_instance_;
PROTOBUF_CONSTEXPR PlayerAbilityUsed::PlayerAbilityUsed(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.linkedentity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerAbilityUsedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerAbilityUsedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerAbilityUsedDefaultTypeInternal() {}
  union {
    PlayerAbilityUsed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerAbilityUsedDefaultTypeInternal _PlayerAbilityUsed_default_instance_;
PROTOBUF_CONSTEXPR ZiplineUsed::ZiplineUsed(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.linkedentity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ZiplineUsedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ZiplineUsedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ZiplineUsedDefaultTypeInternal() {}
  union {
    ZiplineUsed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ZiplineUsedDefaultTypeInternal _ZiplineUsed_default_instance_;
PROTOBUF_CONSTEXPR GrenadeThrown::GrenadeThrown(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.linkedentity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GrenadeThrownDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GrenadeThrownDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GrenadeThrownDefaultTypeInternal() {}
  union {
    GrenadeThrown _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GrenadeThrownDefaultTypeInternal _GrenadeThrown_default_instance_;
PROTOBUF_CONSTEXPR BlackMarketAction::BlackMarketAction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.item_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlackMarketActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlackMarketActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlackMarketActionDefaultTypeInternal() {}
  union {
    BlackMarketAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlackMarketActionDefaultTypeInternal _BlackMarketAction_default_instance_;
PROTOBUF_CONSTEXPR WraithPortal::WraithPortal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WraithPortalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WraithPortalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WraithPortalDefaultTypeInternal() {}
  union {
    WraithPortal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WraithPortalDefaultTypeInternal _WraithPortal_default_instance_;
PROTOBUF_CONSTEXPR WarpGateUsed::WarpGateUsed(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WarpGateUsedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WarpGateUsedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WarpGateUsedDefaultTypeInternal() {}
  union {
    WarpGateUsed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WarpGateUsedDefaultTypeInternal _WarpGateUsed_default_instance_;
PROTOBUF_CONSTEXPR AmmoUsed::AmmoUsed(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ammotype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.amountused_)*/0u
  , /*decltype(_impl_.oldammocount_)*/0u
  , /*decltype(_impl_.newammocount_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AmmoUsedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AmmoUsedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AmmoUsedDefaultTypeInternal() {}
  union {
    AmmoUsed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AmmoUsedDefaultTypeInternal _AmmoUsed_default_instance_;
PROTOBUF_CONSTEXPR WeaponSwitched::WeaponSwitched(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.oldweapon_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.newweapon_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WeaponSwitchedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WeaponSwitchedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WeaponSwitchedDefaultTypeInternal() {}
  union {
    WeaponSwitched _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WeaponSwitchedDefaultTypeInternal _WeaponSwitched_default_instance_;
PROTOBUF_CONSTEXPR ChangeCamera::ChangeCamera(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.target_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ChangeCameraDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChangeCameraDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChangeCameraDefaultTypeInternal() {}
  union {
    ChangeCamera _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChangeCameraDefaultTypeInternal _ChangeCamera_default_instance_;
PROTOBUF_CONSTEXPR PauseToggle::PauseToggle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pretimer_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PauseToggleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PauseToggleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PauseToggleDefaultTypeInternal() {}
  union {
    PauseToggle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PauseToggleDefaultTypeInternal _PauseToggle_default_instance_;
PROTOBUF_CONSTEXPR CustomMatch_CreateLobby::CustomMatch_CreateLobby(
    ::_pbi::ConstantInitialized) {}
struct CustomMatch_CreateLobbyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CustomMatch_CreateLobbyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CustomMatch_CreateLobbyDefaultTypeInternal() {}
  union {
    CustomMatch_CreateLobby _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CustomMatch_CreateLobbyDefaultTypeInternal _CustomMatch_CreateLobby_default_instance_;
PROTOBUF_CONSTEXPR CustomMatch_JoinLobby::CustomMatch_JoinLobby(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roletoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CustomMatch_JoinLobbyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CustomMatch_JoinLobbyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CustomMatch_JoinLobbyDefaultTypeInternal() {}
  union {
    CustomMatch_JoinLobby _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CustomMatch_JoinLobbyDefaultTypeInternal _CustomMatch_JoinLobby_default_instance_;
PROTOBUF_CONSTEXPR CustomMatch_LeaveLobby::CustomMatch_LeaveLobby(
    ::_pbi::ConstantInitialized) {}
struct CustomMatch_LeaveLobbyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CustomMatch_LeaveLobbyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CustomMatch_LeaveLobbyDefaultTypeInternal() {}
  union {
    CustomMatch_LeaveLobby _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CustomMatch_LeaveLobbyDefaultTypeInternal _CustomMatch_LeaveLobby_default_instance_;
PROTOBUF_CONSTEXPR CustomMatch_SetReady::CustomMatch_SetReady(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.isready_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CustomMatch_SetReadyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CustomMatch_SetReadyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CustomMatch_SetReadyDefaultTypeInternal() {}
  union {
    CustomMatch_SetReady _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CustomMatch_SetReadyDefaultTypeInternal _CustomMatch_SetReady_default_instance_;
PROTOBUF_CONSTEXPR CustomMatch_GetLobbyPlayers::CustomMatch_GetLobbyPlayers(
    ::_pbi::ConstantInitialized) {}
struct CustomMatch_GetLobbyPlayersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CustomMatch_GetLobbyPlayersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CustomMatch_GetLobbyPlayersDefaultTypeInternal() {}
  union {
    CustomMatch_GetLobbyPlayers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CustomMatch_GetLobbyPlayersDefaultTypeInternal _CustomMatch_GetLobbyPlayers_default_instance_;
PROTOBUF_CONSTEXPR CustomMatch_SetMatchmaking::CustomMatch_SetMatchmaking(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.enabled_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CustomMatch_SetMatchmakingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CustomMatch_SetMatchmakingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CustomMatch_SetMatchmakingDefaultTypeInternal() {}
  union {
    CustomMatch_SetMatchmaking _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CustomMatch_SetMatchmakingDefaultTypeInternal _CustomMatch_SetMatchmaking_default_instance_;
PROTOBUF_CONSTEXPR CustomMatch_SetTeam::CustomMatch_SetTeam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.targethardwarename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.targetnucleushash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.teamid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CustomMatch_SetTeamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CustomMatch_SetTeamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CustomMatch_SetTeamDefaultTypeInternal() {}
  union {
    CustomMatch_SetTeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CustomMatch_SetTeamDefaultTypeInternal _CustomMatch_SetTeam_default_instance_;
PROTOBUF_CONSTEXPR CustomMatch_KickPlayer::CustomMatch_KickPlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.targethardwarename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.targetnucleushash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CustomMatch_KickPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CustomMatch_KickPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CustomMatch_KickPlayerDefaultTypeInternal() {}
  union {
    CustomMatch_KickPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CustomMatch_KickPlayerDefaultTypeInternal _CustomMatch_KickPlayer_default_instance_;
PROTOBUF_CONSTEXPR CustomMatch_SetSettings::CustomMatch_SetSettings(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playlistname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.adminchat_)*/false
  , /*decltype(_impl_.teamrename_)*/false
  , /*decltype(_impl_.selfassign_)*/false
  , /*decltype(_impl_.aimassist_)*/false
  , /*decltype(_impl_.anonmode_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CustomMatch_SetSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CustomMatch_SetSettingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CustomMatch_SetSettingsDefaultTypeInternal() {}
  union {
    CustomMatch_SetSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CustomMatch_SetSettingsDefaultTypeInternal _CustomMatch_SetSettings_default_instance_;
PROTOBUF_CONSTEXPR CustomMatch_SendChat::CustomMatch_SendChat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CustomMatch_SendChatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CustomMatch_SendChatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CustomMatch_SendChatDefaultTypeInternal() {}
  union {
    CustomMatch_SendChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CustomMatch_SendChatDefaultTypeInternal _CustomMatch_SendChat_default_instance_;
PROTOBUF_CONSTEXPR Request::Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.presharedkey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.withack_)*/false
  , /*decltype(_impl_.actions_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestDefaultTypeInternal() {}
  union {
    Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestDefaultTypeInternal _Request_default_instance_;
PROTOBUF_CONSTEXPR RequestStatus::RequestStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestStatusDefaultTypeInternal() {}
  union {
    RequestStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestStatusDefaultTypeInternal _RequestStatus_default_instance_;
PROTOBUF_CONSTEXPR Response::Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseDefaultTypeInternal() {}
  union {
    Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseDefaultTypeInternal _Response_default_instance_;
PROTOBUF_CONSTEXPR LiveAPIEvent::LiveAPIEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gamemessage_)*/nullptr
  , /*decltype(_impl_.event_size_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LiveAPIEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LiveAPIEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LiveAPIEventDefaultTypeInternal() {}
  union {
    LiveAPIEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LiveAPIEventDefaultTypeInternal _LiveAPIEvent_default_instance_;
}  // namespace liveapi
}  // namespace rtech
static ::_pb::Metadata file_level_metadata_events_2eproto[56];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_events_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_events_2eproto = nullptr;

const uint32_t TableStruct_events_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Vector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Vector3, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Vector3, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Vector3, _impl_.z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Player, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Player, _impl_.teamid_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Player, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Player, _impl_.angles_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Player, _impl_.currenthealth_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Player, _impl_.maxhealth_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Player, _impl_.shieldhealth_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Player, _impl_.shieldmaxhealth_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Player, _impl_.nucleushash_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Player, _impl_.hardwarename_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Player, _impl_.teamname_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Player, _impl_.squadindex_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Player, _impl_.character_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Player, _impl_.skin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::CustomMatch_LobbyPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::CustomMatch_LobbyPlayer, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::CustomMatch_LobbyPlayer, _impl_.teamid_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::CustomMatch_LobbyPlayer, _impl_.nucleushash_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::CustomMatch_LobbyPlayer, _impl_.hardwarename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Datacenter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Datacenter, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Datacenter, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Datacenter, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Version, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Version, _impl_.major_num_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Version, _impl_.minor_num_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Version, _impl_.build_stamp_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Version, _impl_.revision_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Init, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Init, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Init, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Init, _impl_.gameversion_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Init, _impl_.apiversion_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Init, _impl_.platform_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Init, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::CustomMatch_LobbyPlayers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::CustomMatch_LobbyPlayers, _impl_.playertoken_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::CustomMatch_LobbyPlayers, _impl_.players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::ObserverSwitched, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::ObserverSwitched, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::ObserverSwitched, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::ObserverSwitched, _impl_.observer_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::ObserverSwitched, _impl_.target_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::ObserverSwitched, _impl_.targetteam_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::ObserverAnnotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::ObserverAnnotation, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::ObserverAnnotation, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::ObserverAnnotation, _impl_.annotationserial_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::MatchSetup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::MatchSetup, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::MatchSetup, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::MatchSetup, _impl_.map_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::MatchSetup, _impl_.playlistname_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::MatchSetup, _impl_.playlistdesc_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::MatchSetup, _impl_.datacenter_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::MatchSetup, _impl_.aimassiston_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::MatchSetup, _impl_.anonymousmode_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::MatchSetup, _impl_.serverid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::GameStateChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::GameStateChanged, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::GameStateChanged, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::GameStateChanged, _impl_.state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::CharacterSelected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::CharacterSelected, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::CharacterSelected, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::CharacterSelected, _impl_.player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::MatchStateEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::MatchStateEnd, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::MatchStateEnd, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::MatchStateEnd, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::MatchStateEnd, _impl_.winners_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::RingStartClosing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::RingStartClosing, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::RingStartClosing, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::RingStartClosing, _impl_.stage_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::RingStartClosing, _impl_.center_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::RingStartClosing, _impl_.currentradius_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::RingStartClosing, _impl_.endradius_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::RingStartClosing, _impl_.shrinkduration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::RingFinishedClosing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::RingFinishedClosing, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::RingFinishedClosing, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::RingFinishedClosing, _impl_.stage_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::RingFinishedClosing, _impl_.center_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::RingFinishedClosing, _impl_.currentradius_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::RingFinishedClosing, _impl_.shrinkduration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerConnected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerConnected, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerConnected, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerConnected, _impl_.player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerDisconnected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerDisconnected, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerDisconnected, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerDisconnected, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerDisconnected, _impl_.canreconnect_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerStatChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerStatChanged, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerStatChanged, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerStatChanged, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerStatChanged, _impl_.statname_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerStatChanged, _impl_.newvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerDamaged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerDamaged, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerDamaged, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerDamaged, _impl_.attacker_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerDamaged, _impl_.victim_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerDamaged, _impl_.weapon_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerDamaged, _impl_.damageinflicted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerKilled, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerKilled, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerKilled, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerKilled, _impl_.attacker_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerKilled, _impl_.victim_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerKilled, _impl_.awardedto_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerKilled, _impl_.weapon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerDowned, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerDowned, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerDowned, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerDowned, _impl_.attacker_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerDowned, _impl_.victim_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerDowned, _impl_.weapon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerAssist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerAssist, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerAssist, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerAssist, _impl_.assistant_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerAssist, _impl_.victim_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerAssist, _impl_.weapon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::SquadEliminated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::SquadEliminated, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::SquadEliminated, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::SquadEliminated, _impl_.players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::GibraltarShieldAbsorbed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::GibraltarShieldAbsorbed, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::GibraltarShieldAbsorbed, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::GibraltarShieldAbsorbed, _impl_.attacker_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::GibraltarShieldAbsorbed, _impl_.victim_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::GibraltarShieldAbsorbed, _impl_.damageinflicted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerRespawnTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerRespawnTeam, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerRespawnTeam, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerRespawnTeam, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerRespawnTeam, _impl_.respawned_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerRevive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerRevive, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerRevive, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerRevive, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerRevive, _impl_.revived_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::ArenasItemSelected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::ArenasItemSelected, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::ArenasItemSelected, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::ArenasItemSelected, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::ArenasItemSelected, _impl_.item_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::ArenasItemSelected, _impl_.quantity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::ArenasItemDeselected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::ArenasItemDeselected, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::ArenasItemDeselected, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::ArenasItemDeselected, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::ArenasItemDeselected, _impl_.item_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::ArenasItemDeselected, _impl_.quantity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::InventoryPickUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::InventoryPickUp, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::InventoryPickUp, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::InventoryPickUp, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::InventoryPickUp, _impl_.item_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::InventoryPickUp, _impl_.quantity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::InventoryDrop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::InventoryDrop, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::InventoryDrop, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::InventoryDrop, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::InventoryDrop, _impl_.item_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::InventoryDrop, _impl_.quantity_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::InventoryDrop, _impl_.extradata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::InventoryUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::InventoryUse, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::InventoryUse, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::InventoryUse, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::InventoryUse, _impl_.item_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::InventoryUse, _impl_.quantity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::BannerCollected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::BannerCollected, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::BannerCollected, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::BannerCollected, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::BannerCollected, _impl_.collected_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerAbilityUsed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerAbilityUsed, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerAbilityUsed, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerAbilityUsed, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PlayerAbilityUsed, _impl_.linkedentity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::ZiplineUsed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::ZiplineUsed, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::ZiplineUsed, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::ZiplineUsed, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::ZiplineUsed, _impl_.linkedentity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::GrenadeThrown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::GrenadeThrown, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::GrenadeThrown, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::GrenadeThrown, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::GrenadeThrown, _impl_.linkedentity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::BlackMarketAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::BlackMarketAction, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::BlackMarketAction, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::BlackMarketAction, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::BlackMarketAction, _impl_.item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::WraithPortal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::WraithPortal, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::WraithPortal, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::WraithPortal, _impl_.player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::WarpGateUsed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::WarpGateUsed, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::WarpGateUsed, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::WarpGateUsed, _impl_.player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::AmmoUsed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::AmmoUsed, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::AmmoUsed, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::AmmoUsed, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::AmmoUsed, _impl_.ammotype_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::AmmoUsed, _impl_.amountused_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::AmmoUsed, _impl_.oldammocount_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::AmmoUsed, _impl_.newammocount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::WeaponSwitched, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::WeaponSwitched, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::WeaponSwitched, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::WeaponSwitched, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::WeaponSwitched, _impl_.oldweapon_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::WeaponSwitched, _impl_.newweapon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::ChangeCamera, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::ChangeCamera, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::ChangeCamera, _impl_.target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PauseToggle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::PauseToggle, _impl_.pretimer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::CustomMatch_CreateLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::CustomMatch_JoinLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::CustomMatch_JoinLobby, _impl_.roletoken_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::CustomMatch_LeaveLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::CustomMatch_SetReady, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::CustomMatch_SetReady, _impl_.isready_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::CustomMatch_GetLobbyPlayers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::CustomMatch_SetMatchmaking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::CustomMatch_SetMatchmaking, _impl_.enabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::CustomMatch_SetTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::CustomMatch_SetTeam, _impl_.teamid_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::CustomMatch_SetTeam, _impl_.targethardwarename_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::CustomMatch_SetTeam, _impl_.targetnucleushash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::CustomMatch_KickPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::CustomMatch_KickPlayer, _impl_.targethardwarename_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::CustomMatch_KickPlayer, _impl_.targetnucleushash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::CustomMatch_SetSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::CustomMatch_SetSettings, _impl_.playlistname_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::CustomMatch_SetSettings, _impl_.adminchat_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::CustomMatch_SetSettings, _impl_.teamrename_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::CustomMatch_SetSettings, _impl_.selfassign_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::CustomMatch_SetSettings, _impl_.aimassist_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::CustomMatch_SetSettings, _impl_.anonmode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::CustomMatch_SendChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::CustomMatch_SendChat, _impl_.text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Request, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Request, _impl_.withack_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Request, _impl_.presharedkey_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Request, _impl_.actions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::RequestStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::RequestStatus, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Response, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::Response, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::LiveAPIEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::LiveAPIEvent, _impl_.event_size_),
  PROTOBUF_FIELD_OFFSET(::rtech::liveapi::LiveAPIEvent, _impl_.gamemessage_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::rtech::liveapi::Vector3)},
  { 9, -1, -1, sizeof(::rtech::liveapi::Player)},
  { 29, -1, -1, sizeof(::rtech::liveapi::CustomMatch_LobbyPlayer)},
  { 39, -1, -1, sizeof(::rtech::liveapi::Datacenter)},
  { 48, -1, -1, sizeof(::rtech::liveapi::Version)},
  { 58, -1, -1, sizeof(::rtech::liveapi::Init)},
  { 70, -1, -1, sizeof(::rtech::liveapi::CustomMatch_LobbyPlayers)},
  { 78, -1, -1, sizeof(::rtech::liveapi::ObserverSwitched)},
  { 89, -1, -1, sizeof(::rtech::liveapi::ObserverAnnotation)},
  { 98, -1, -1, sizeof(::rtech::liveapi::MatchSetup)},
  { 113, -1, -1, sizeof(::rtech::liveapi::GameStateChanged)},
  { 122, -1, -1, sizeof(::rtech::liveapi::CharacterSelected)},
  { 131, -1, -1, sizeof(::rtech::liveapi::MatchStateEnd)},
  { 141, -1, -1, sizeof(::rtech::liveapi::RingStartClosing)},
  { 154, -1, -1, sizeof(::rtech::liveapi::RingFinishedClosing)},
  { 166, -1, -1, sizeof(::rtech::liveapi::PlayerConnected)},
  { 175, -1, -1, sizeof(::rtech::liveapi::PlayerDisconnected)},
  { 185, -1, -1, sizeof(::rtech::liveapi::PlayerStatChanged)},
  { 196, -1, -1, sizeof(::rtech::liveapi::PlayerDamaged)},
  { 208, -1, -1, sizeof(::rtech::liveapi::PlayerKilled)},
  { 220, -1, -1, sizeof(::rtech::liveapi::PlayerDowned)},
  { 231, -1, -1, sizeof(::rtech::liveapi::PlayerAssist)},
  { 242, -1, -1, sizeof(::rtech::liveapi::SquadEliminated)},
  { 251, -1, -1, sizeof(::rtech::liveapi::GibraltarShieldAbsorbed)},
  { 262, -1, -1, sizeof(::rtech::liveapi::PlayerRespawnTeam)},
  { 272, -1, -1, sizeof(::rtech::liveapi::PlayerRevive)},
  { 282, -1, -1, sizeof(::rtech::liveapi::ArenasItemSelected)},
  { 293, -1, -1, sizeof(::rtech::liveapi::ArenasItemDeselected)},
  { 304, -1, -1, sizeof(::rtech::liveapi::InventoryPickUp)},
  { 315, -1, -1, sizeof(::rtech::liveapi::InventoryDrop)},
  { 327, -1, -1, sizeof(::rtech::liveapi::InventoryUse)},
  { 338, -1, -1, sizeof(::rtech::liveapi::BannerCollected)},
  { 348, -1, -1, sizeof(::rtech::liveapi::PlayerAbilityUsed)},
  { 358, -1, -1, sizeof(::rtech::liveapi::ZiplineUsed)},
  { 368, -1, -1, sizeof(::rtech::liveapi::GrenadeThrown)},
  { 378, -1, -1, sizeof(::rtech::liveapi::BlackMarketAction)},
  { 388, -1, -1, sizeof(::rtech::liveapi::WraithPortal)},
  { 397, -1, -1, sizeof(::rtech::liveapi::WarpGateUsed)},
  { 406, -1, -1, sizeof(::rtech::liveapi::AmmoUsed)},
  { 419, -1, -1, sizeof(::rtech::liveapi::WeaponSwitched)},
  { 430, -1, -1, sizeof(::rtech::liveapi::ChangeCamera)},
  { 439, -1, -1, sizeof(::rtech::liveapi::PauseToggle)},
  { 446, -1, -1, sizeof(::rtech::liveapi::CustomMatch_CreateLobby)},
  { 452, -1, -1, sizeof(::rtech::liveapi::CustomMatch_JoinLobby)},
  { 459, -1, -1, sizeof(::rtech::liveapi::CustomMatch_LeaveLobby)},
  { 465, -1, -1, sizeof(::rtech::liveapi::CustomMatch_SetReady)},
  { 472, -1, -1, sizeof(::rtech::liveapi::CustomMatch_GetLobbyPlayers)},
  { 478, -1, -1, sizeof(::rtech::liveapi::CustomMatch_SetMatchmaking)},
  { 485, -1, -1, sizeof(::rtech::liveapi::CustomMatch_SetTeam)},
  { 494, -1, -1, sizeof(::rtech::liveapi::CustomMatch_KickPlayer)},
  { 502, -1, -1, sizeof(::rtech::liveapi::CustomMatch_SetSettings)},
  { 514, -1, -1, sizeof(::rtech::liveapi::CustomMatch_SendChat)},
  { 521, -1, -1, sizeof(::rtech::liveapi::Request)},
  { 542, -1, -1, sizeof(::rtech::liveapi::RequestStatus)},
  { 549, -1, -1, sizeof(::rtech::liveapi::Response)},
  { 557, -1, -1, sizeof(::rtech::liveapi::LiveAPIEvent)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::rtech::liveapi::_Vector3_default_instance_._instance,
  &::rtech::liveapi::_Player_default_instance_._instance,
  &::rtech::liveapi::_CustomMatch_LobbyPlayer_default_instance_._instance,
  &::rtech::liveapi::_Datacenter_default_instance_._instance,
  &::rtech::liveapi::_Version_default_instance_._instance,
  &::rtech::liveapi::_Init_default_instance_._instance,
  &::rtech::liveapi::_CustomMatch_LobbyPlayers_default_instance_._instance,
  &::rtech::liveapi::_ObserverSwitched_default_instance_._instance,
  &::rtech::liveapi::_ObserverAnnotation_default_instance_._instance,
  &::rtech::liveapi::_MatchSetup_default_instance_._instance,
  &::rtech::liveapi::_GameStateChanged_default_instance_._instance,
  &::rtech::liveapi::_CharacterSelected_default_instance_._instance,
  &::rtech::liveapi::_MatchStateEnd_default_instance_._instance,
  &::rtech::liveapi::_RingStartClosing_default_instance_._instance,
  &::rtech::liveapi::_RingFinishedClosing_default_instance_._instance,
  &::rtech::liveapi::_PlayerConnected_default_instance_._instance,
  &::rtech::liveapi::_PlayerDisconnected_default_instance_._instance,
  &::rtech::liveapi::_PlayerStatChanged_default_instance_._instance,
  &::rtech::liveapi::_PlayerDamaged_default_instance_._instance,
  &::rtech::liveapi::_PlayerKilled_default_instance_._instance,
  &::rtech::liveapi::_PlayerDowned_default_instance_._instance,
  &::rtech::liveapi::_PlayerAssist_default_instance_._instance,
  &::rtech::liveapi::_SquadEliminated_default_instance_._instance,
  &::rtech::liveapi::_GibraltarShieldAbsorbed_default_instance_._instance,
  &::rtech::liveapi::_PlayerRespawnTeam_default_instance_._instance,
  &::rtech::liveapi::_PlayerRevive_default_instance_._instance,
  &::rtech::liveapi::_ArenasItemSelected_default_instance_._instance,
  &::rtech::liveapi::_ArenasItemDeselected_default_instance_._instance,
  &::rtech::liveapi::_InventoryPickUp_default_instance_._instance,
  &::rtech::liveapi::_InventoryDrop_default_instance_._instance,
  &::rtech::liveapi::_InventoryUse_default_instance_._instance,
  &::rtech::liveapi::_BannerCollected_default_instance_._instance,
  &::rtech::liveapi::_PlayerAbilityUsed_default_instance_._instance,
  &::rtech::liveapi::_ZiplineUsed_default_instance_._instance,
  &::rtech::liveapi::_GrenadeThrown_default_instance_._instance,
  &::rtech::liveapi::_BlackMarketAction_default_instance_._instance,
  &::rtech::liveapi::_WraithPortal_default_instance_._instance,
  &::rtech::liveapi::_WarpGateUsed_default_instance_._instance,
  &::rtech::liveapi::_AmmoUsed_default_instance_._instance,
  &::rtech::liveapi::_WeaponSwitched_default_instance_._instance,
  &::rtech::liveapi::_ChangeCamera_default_instance_._instance,
  &::rtech::liveapi::_PauseToggle_default_instance_._instance,
  &::rtech::liveapi::_CustomMatch_CreateLobby_default_instance_._instance,
  &::rtech::liveapi::_CustomMatch_JoinLobby_default_instance_._instance,
  &::rtech::liveapi::_CustomMatch_LeaveLobby_default_instance_._instance,
  &::rtech::liveapi::_CustomMatch_SetReady_default_instance_._instance,
  &::rtech::liveapi::_CustomMatch_GetLobbyPlayers_default_instance_._instance,
  &::rtech::liveapi::_CustomMatch_SetMatchmaking_default_instance_._instance,
  &::rtech::liveapi::_CustomMatch_SetTeam_default_instance_._instance,
  &::rtech::liveapi::_CustomMatch_KickPlayer_default_instance_._instance,
  &::rtech::liveapi::_CustomMatch_SetSettings_default_instance_._instance,
  &::rtech::liveapi::_CustomMatch_SendChat_default_instance_._instance,
  &::rtech::liveapi::_Request_default_instance_._instance,
  &::rtech::liveapi::_RequestStatus_default_instance_._instance,
  &::rtech::liveapi::_Response_default_instance_._instance,
  &::rtech::liveapi::_LiveAPIEvent_default_instance_._instance,
};

const char descriptor_table_protodef_events_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014events.proto\022\rrtech.liveapi\032\031google/pr"
  "otobuf/any.proto\"*\n\007Vector3\022\t\n\001x\030\001 \001(\002\022\t"
  "\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"\276\002\n\006Player\022\014\n\004name\030"
  "\001 \001(\t\022\016\n\006teamId\030\002 \001(\r\022#\n\003pos\030\003 \001(\0132\026.rte"
  "ch.liveapi.Vector3\022&\n\006angles\030\004 \001(\0132\026.rte"
  "ch.liveapi.Vector3\022\025\n\rcurrentHealth\030\005 \001("
  "\r\022\021\n\tmaxHealth\030\006 \001(\r\022\024\n\014shieldHealth\030\007 \001"
  "(\r\022\027\n\017shieldMaxHealth\030\010 \001(\r\022\023\n\013nucleusHa"
  "sh\030\t \001(\t\022\024\n\014hardwareName\030\n \001(\t\022\020\n\010teamNa"
  "me\030\013 \001(\t\022\022\n\nsquadIndex\030\014 \001(\r\022\021\n\tcharacte"
  "r\030\r \001(\t\022\014\n\004skin\030\016 \001(\t\"b\n\027CustomMatch_Lob"
  "byPlayer\022\014\n\004name\030\001 \001(\t\022\016\n\006teamId\030\002 \001(\r\022\023"
  "\n\013nucleusHash\030\003 \001(\t\022\024\n\014hardwareName\030\004 \001("
  "\t\"\?\n\nDatacenter\022\021\n\ttimestamp\030\001 \001(\004\022\020\n\010ca"
  "tegory\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\"V\n\007Version\022\021\n"
  "\tmajor_num\030\001 \001(\r\022\021\n\tminor_num\030\002 \001(\r\022\023\n\013b"
  "uild_stamp\030\003 \001(\r\022\020\n\010revision\030\004 \001(\t\"\214\001\n\004I"
  "nit\022\021\n\ttimestamp\030\001 \001(\004\022\020\n\010category\030\002 \001(\t"
  "\022\023\n\013gameVersion\030\003 \001(\t\022*\n\napiVersion\030\004 \001("
  "\0132\026.rtech.liveapi.Version\022\020\n\010platform\030\005 "
  "\001(\t\022\014\n\004name\030\006 \001(\t\"h\n\030CustomMatch_LobbyPl"
  "ayers\022\023\n\013playerToken\030\001 \001(\t\0227\n\007players\030\002 "
  "\003(\0132&.rtech.liveapi.CustomMatch_LobbyPla"
  "yer\"\262\001\n\020ObserverSwitched\022\021\n\ttimestamp\030\001 "
  "\001(\004\022\020\n\010category\030\002 \001(\t\022\'\n\010observer\030\003 \001(\0132"
  "\025.rtech.liveapi.Player\022%\n\006target\030\004 \001(\0132\025"
  ".rtech.liveapi.Player\022)\n\ntargetTeam\030\005 \003("
  "\0132\025.rtech.liveapi.Player\"S\n\022ObserverAnno"
  "tation\022\021\n\ttimestamp\030\001 \001(\004\022\020\n\010category\030\002 "
  "\001(\t\022\030\n\020annotationSerial\030\003 \001(\005\"\327\001\n\nMatchS"
  "etup\022\021\n\ttimestamp\030\001 \001(\004\022\020\n\010category\030\002 \001("
  "\t\022\013\n\003map\030\003 \001(\t\022\024\n\014playlistName\030\004 \001(\t\022\024\n\014"
  "playlistDesc\030\005 \001(\t\022-\n\ndatacenter\030\006 \001(\0132\031"
  ".rtech.liveapi.Datacenter\022\023\n\013aimAssistOn"
  "\030\007 \001(\010\022\025\n\ranonymousMode\030\010 \001(\010\022\020\n\010serverI"
  "d\030\t \001(\t\"F\n\020GameStateChanged\022\021\n\ttimestamp"
  "\030\001 \001(\004\022\020\n\010category\030\002 \001(\t\022\r\n\005state\030\003 \001(\t\""
  "_\n\021CharacterSelected\022\021\n\ttimestamp\030\001 \001(\004\022"
  "\020\n\010category\030\002 \001(\t\022%\n\006player\030\003 \001(\0132\025.rtec"
  "h.liveapi.Player\"k\n\rMatchStateEnd\022\021\n\ttim"
  "estamp\030\001 \001(\004\022\020\n\010category\030\002 \001(\t\022\r\n\005state\030"
  "\003 \001(\t\022&\n\007winners\030\004 \003(\0132\025.rtech.liveapi.P"
  "layer\"\260\001\n\020RingStartClosing\022\021\n\ttimestamp\030"
  "\001 \001(\004\022\020\n\010category\030\002 \001(\t\022\r\n\005stage\030\003 \001(\r\022&"
  "\n\006center\030\004 \001(\0132\026.rtech.liveapi.Vector3\022\025"
  "\n\rcurrentRadius\030\005 \001(\002\022\021\n\tendRadius\030\006 \001(\002"
  "\022\026\n\016shrinkDuration\030\007 \001(\002\"\240\001\n\023RingFinishe"
  "dClosing\022\021\n\ttimestamp\030\001 \001(\004\022\020\n\010category\030"
  "\002 \001(\t\022\r\n\005stage\030\003 \001(\r\022&\n\006center\030\004 \001(\0132\026.r"
  "tech.liveapi.Vector3\022\025\n\rcurrentRadius\030\005 "
  "\001(\002\022\026\n\016shrinkDuration\030\007 \001(\002\"]\n\017PlayerCon"
  "nected\022\021\n\ttimestamp\030\001 \001(\004\022\020\n\010category\030\002 "
  "\001(\t\022%\n\006player\030\003 \001(\0132\025.rtech.liveapi.Play"
  "er\"v\n\022PlayerDisconnected\022\021\n\ttimestamp\030\001 "
  "\001(\004\022\020\n\010category\030\002 \001(\t\022%\n\006player\030\003 \001(\0132\025."
  "rtech.liveapi.Player\022\024\n\014canReconnect\030\004 \001"
  "(\010\"\203\001\n\021PlayerStatChanged\022\021\n\ttimestamp\030\001 "
  "\001(\004\022\020\n\010category\030\002 \001(\t\022%\n\006player\030\003 \001(\0132\025."
  "rtech.liveapi.Player\022\020\n\010statName\030\004 \001(\t\022\020"
  "\n\010newValue\030\005 \001(\r\"\255\001\n\rPlayerDamaged\022\021\n\tti"
  "mestamp\030\001 \001(\004\022\020\n\010category\030\002 \001(\t\022\'\n\010attac"
  "ker\030\003 \001(\0132\025.rtech.liveapi.Player\022%\n\006vict"
  "im\030\004 \001(\0132\025.rtech.liveapi.Player\022\016\n\006weapo"
  "n\030\005 \001(\t\022\027\n\017damageInflicted\030\006 \001(\r\"\275\001\n\014Pla"
  "yerKilled\022\021\n\ttimestamp\030\001 \001(\004\022\020\n\010category"
  "\030\002 \001(\t\022\'\n\010attacker\030\003 \001(\0132\025.rtech.liveapi"
  ".Player\022%\n\006victim\030\004 \001(\0132\025.rtech.liveapi."
  "Player\022(\n\tawardedTo\030\005 \001(\0132\025.rtech.liveap"
  "i.Player\022\016\n\006weapon\030\006 \001(\t\"\223\001\n\014PlayerDowne"
  "d\022\021\n\ttimestamp\030\001 \001(\004\022\020\n\010category\030\002 \001(\t\022\'"
  "\n\010attacker\030\003 \001(\0132\025.rtech.liveapi.Player\022"
  "%\n\006victim\030\004 \001(\0132\025.rtech.liveapi.Player\022\016"
  "\n\006weapon\030\005 \001(\t\"\224\001\n\014PlayerAssist\022\021\n\ttimes"
  "tamp\030\001 \001(\004\022\020\n\010category\030\002 \001(\t\022(\n\tassistan"
  "t\030\003 \001(\0132\025.rtech.liveapi.Player\022%\n\006victim"
  "\030\004 \001(\0132\025.rtech.liveapi.Player\022\016\n\006weapon\030"
  "\005 \001(\t\"^\n\017SquadEliminated\022\021\n\ttimestamp\030\001 "
  "\001(\004\022\020\n\010category\030\002 \001(\t\022&\n\007players\030\003 \003(\0132\025"
  ".rtech.liveapi.Player\"\247\001\n\027GibraltarShiel"
  "dAbsorbed\022\021\n\ttimestamp\030\001 \001(\004\022\020\n\010category"
  "\030\002 \001(\t\022\'\n\010attacker\030\003 \001(\0132\025.rtech.liveapi"
  ".Player\022%\n\006victim\030\004 \001(\0132\025.rtech.liveapi."
  "Player\022\027\n\017damageInflicted\030\006 \001(\r\"r\n\021Playe"
  "rRespawnTeam\022\021\n\ttimestamp\030\001 \001(\004\022\020\n\010categ"
  "ory\030\002 \001(\t\022%\n\006player\030\003 \001(\0132\025.rtech.liveap"
  "i.Player\022\021\n\trespawned\030\004 \001(\t\"\202\001\n\014PlayerRe"
  "vive\022\021\n\ttimestamp\030\001 \001(\004\022\020\n\010category\030\002 \001("
  "\t\022%\n\006player\030\003 \001(\0132\025.rtech.liveapi.Player"
  "\022&\n\007revived\030\004 \001(\0132\025.rtech.liveapi.Player"
  "\"\200\001\n\022ArenasItemSelected\022\021\n\ttimestamp\030\001 \001"
  "(\004\022\020\n\010category\030\002 \001(\t\022%\n\006player\030\003 \001(\0132\025.r"
  "tech.liveapi.Player\022\014\n\004item\030\004 \001(\t\022\020\n\010qua"
  "ntity\030\005 \001(\005\"\202\001\n\024ArenasItemDeselected\022\021\n\t"
  "timestamp\030\001 \001(\004\022\020\n\010category\030\002 \001(\t\022%\n\006pla"
  "yer\030\003 \001(\0132\025.rtech.liveapi.Player\022\014\n\004item"
  "\030\004 \001(\t\022\020\n\010quantity\030\005 \001(\005\"}\n\017InventoryPic"
  "kUp\022\021\n\ttimestamp\030\001 \001(\004\022\020\n\010category\030\002 \001(\t"
  "\022%\n\006player\030\003 \001(\0132\025.rtech.liveapi.Player\022"
  "\014\n\004item\030\004 \001(\t\022\020\n\010quantity\030\005 \001(\005\"\216\001\n\rInve"
  "ntoryDrop\022\021\n\ttimestamp\030\001 \001(\004\022\020\n\010category"
  "\030\002 \001(\t\022%\n\006player\030\003 \001(\0132\025.rtech.liveapi.P"
  "layer\022\014\n\004item\030\004 \001(\t\022\020\n\010quantity\030\005 \001(\005\022\021\n"
  "\textraData\030\006 \003(\t\"z\n\014InventoryUse\022\021\n\ttime"
  "stamp\030\001 \001(\004\022\020\n\010category\030\002 \001(\t\022%\n\006player\030"
  "\003 \001(\0132\025.rtech.liveapi.Player\022\014\n\004item\030\004 \001"
  "(\t\022\020\n\010quantity\030\005 \001(\005\"\207\001\n\017BannerCollected"
  "\022\021\n\ttimestamp\030\001 \001(\004\022\020\n\010category\030\002 \001(\t\022%\n"
  "\006player\030\003 \001(\0132\025.rtech.liveapi.Player\022(\n\t"
  "collected\030\004 \001(\0132\025.rtech.liveapi.Player\"u"
  "\n\021PlayerAbilityUsed\022\021\n\ttimestamp\030\001 \001(\004\022\020"
  "\n\010category\030\002 \001(\t\022%\n\006player\030\003 \001(\0132\025.rtech"
  ".liveapi.Player\022\024\n\014linkedEntity\030\004 \001(\t\"o\n"
  "\013ZiplineUsed\022\021\n\ttimestamp\030\001 \001(\004\022\020\n\010categ"
  "ory\030\002 \001(\t\022%\n\006player\030\003 \001(\0132\025.rtech.liveap"
  "i.Player\022\024\n\014linkedEntity\030\004 \001(\t\"q\n\rGrenad"
  "eThrown\022\021\n\ttimestamp\030\001 \001(\004\022\020\n\010category\030\002"
  " \001(\t\022%\n\006player\030\003 \001(\0132\025.rtech.liveapi.Pla"
  "yer\022\024\n\014linkedEntity\030\004 \001(\t\"m\n\021BlackMarket"
  "Action\022\021\n\ttimestamp\030\001 \001(\004\022\020\n\010category\030\002 "
  "\001(\t\022%\n\006player\030\003 \001(\0132\025.rtech.liveapi.Play"
  "er\022\014\n\004item\030\004 \001(\t\"Z\n\014WraithPortal\022\021\n\ttime"
  "stamp\030\001 \001(\004\022\020\n\010category\030\002 \001(\t\022%\n\006player\030"
  "\003 \001(\0132\025.rtech.liveapi.Player\"Z\n\014WarpGate"
  "Used\022\021\n\ttimestamp\030\001 \001(\004\022\020\n\010category\030\002 \001("
  "\t\022%\n\006player\030\003 \001(\0132\025.rtech.liveapi.Player"
  "\"\250\001\n\010AmmoUsed\022\021\n\ttimestamp\030\001 \001(\004\022\020\n\010cate"
  "gory\030\002 \001(\t\022%\n\006player\030\003 \001(\0132\025.rtech.livea"
  "pi.Player\022\020\n\010ammoType\030\004 \001(\t\022\022\n\namountUse"
  "d\030\005 \001(\r\022\024\n\014oldAmmoCount\030\006 \001(\r\022\024\n\014newAmmo"
  "Count\030\007 \001(\r\"\202\001\n\016WeaponSwitched\022\021\n\ttimest"
  "amp\030\001 \001(\004\022\020\n\010category\030\002 \001(\t\022%\n\006player\030\003 "
  "\001(\0132\025.rtech.liveapi.Player\022\021\n\toldWeapon\030"
  "\004 \001(\t\022\021\n\tnewWeapon\030\005 \001(\t\"X\n\014ChangeCamera"
  "\022.\n\003poi\030\001 \001(\0162\037.rtech.liveapi.PlayerOfIn"
  "terestH\000\022\016\n\004name\030\002 \001(\tH\000B\010\n\006target\"\037\n\013Pa"
  "useToggle\022\020\n\010preTimer\030\001 \001(\002\"\031\n\027CustomMat"
  "ch_CreateLobby\"*\n\025CustomMatch_JoinLobby\022"
  "\021\n\troleToken\030\001 \001(\t\"\030\n\026CustomMatch_LeaveL"
  "obby\"\'\n\024CustomMatch_SetReady\022\017\n\007isReady\030"
  "\001 \001(\010\"\035\n\033CustomMatch_GetLobbyPlayers\"-\n\032"
  "CustomMatch_SetMatchmaking\022\017\n\007enabled\030\001 "
  "\001(\010\"\\\n\023CustomMatch_SetTeam\022\016\n\006teamId\030\001 \001"
  "(\005\022\032\n\022targetHardwareName\030\002 \001(\t\022\031\n\021target"
  "NucleusHash\030\003 \001(\t\"O\n\026CustomMatch_KickPla"
  "yer\022\032\n\022targetHardwareName\030\001 \001(\t\022\031\n\021targe"
  "tNucleusHash\030\002 \001(\t\"\217\001\n\027CustomMatch_SetSe"
  "ttings\022\024\n\014playlistName\030\001 \001(\t\022\021\n\tadminCha"
  "t\030\002 \001(\010\022\022\n\nteamRename\030\003 \001(\010\022\022\n\nselfAssig"
  "n\030\004 \001(\010\022\021\n\taimAssist\030\005 \001(\010\022\020\n\010anonMode\030\006"
  " \001(\010\"$\n\024CustomMatch_SendChat\022\014\n\004text\030\001 \001"
  "(\t\"\200\007\n\007Request\022\017\n\007withAck\030\001 \001(\010\022\024\n\014preSh"
  "aredKey\030\002 \001(\t\0220\n\tchangeCam\030\004 \001(\0132\033.rtech"
  ".liveapi.ChangeCameraH\000\0221\n\013pauseToggle\030\005"
  " \001(\0132\032.rtech.liveapi.PauseToggleH\000\022I\n\027cu"
  "stomMatch_CreateLobby\030\n \001(\0132&.rtech.live"
  "api.CustomMatch_CreateLobbyH\000\022E\n\025customM"
  "atch_JoinLobby\030\013 \001(\0132$.rtech.liveapi.Cus"
  "tomMatch_JoinLobbyH\000\022G\n\026customMatch_Leav"
  "eLobby\030\014 \001(\0132%.rtech.liveapi.CustomMatch"
  "_LeaveLobbyH\000\022C\n\024customMatch_SetReady\030\r "
  "\001(\0132#.rtech.liveapi.CustomMatch_SetReady"
  "H\000\022O\n\032customMatch_SetMatchmaking\030\016 \001(\0132)"
  ".rtech.liveapi.CustomMatch_SetMatchmakin"
  "gH\000\022A\n\023customMatch_SetTeam\030\017 \001(\0132\".rtech"
  ".liveapi.CustomMatch_SetTeamH\000\022G\n\026custom"
  "Match_KickPlayer\030\020 \001(\0132%.rtech.liveapi.C"
  "ustomMatch_KickPlayerH\000\022I\n\027customMatch_S"
  "etSettings\030\021 \001(\0132&.rtech.liveapi.CustomM"
  "atch_SetSettingsH\000\022C\n\024customMatch_SendCh"
  "at\030\022 \001(\0132#.rtech.liveapi.CustomMatch_Sen"
  "dChatH\000\022Q\n\033customMatch_GetLobbyPlayers\030\023"
  " \001(\0132*.rtech.liveapi.CustomMatch_GetLobb"
  "yPlayersH\000B\t\n\007actions\"\037\n\rRequestStatus\022\016"
  "\n\006status\030\001 \001(\t\"A\n\010Response\022\017\n\007success\030\001 "
  "\001(\010\022$\n\006result\030\002 \001(\0132\024.google.protobuf.An"
  "y\"M\n\014LiveAPIEvent\022\022\n\nevent_size\030\001 \001(\007\022)\n"
  "\013gameMessage\030\003 \001(\0132\024.google.protobuf.Any"
  "*\210\001\n\020PlayerOfInterest\022\017\n\013UNSPECIFIED\020\000\022\010"
  "\n\004NEXT\020\001\022\014\n\010PREVIOUS\020\002\022\017\n\013KILL_LEADER\020\003\022"
  "\021\n\rCLOSEST_ENEMY\020\004\022\022\n\016CLOSEST_PLAYER\020\005\022\023"
  "\n\017LATEST_ATTACKER\020\006b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_events_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::_pbi::once_flag descriptor_table_events_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_events_2eproto = {
    false, false, 7227, descriptor_table_protodef_events_2eproto,
    "events.proto",
    &descriptor_table_events_2eproto_once, descriptor_table_events_2eproto_deps, 1, 56,
    schemas, file_default_instances, TableStruct_events_2eproto::offsets,
    file_level_metadata_events_2eproto, file_level_enum_descriptors_events_2eproto,
    file_level_service_descriptors_events_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_events_2eproto_getter() {
  return &descriptor_table_events_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_events_2eproto(&descriptor_table_events_2eproto);
namespace rtech {
namespace liveapi {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerOfInterest_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_events_2eproto);
  return file_level_enum_descriptors_events_2eproto[0];
}
bool PlayerOfInterest_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Vector3::_Internal {
 public:
};

Vector3::Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.Vector3)
}
Vector3::Vector3(const Vector3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector3* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.Vector3)
}

inline void Vector3::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.Vector3)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector3::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.Vector3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.Vector3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.Vector3)
  return target;
}

size_t Vector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.Vector3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector3::GetClassData() const { return &_class_data_; }


void Vector3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector3*>(&to_msg);
  auto& from = static_cast<const Vector3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.Vector3)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {
  return true;
}

void Vector3::InternalSwap(Vector3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3, _impl_.z_)
      + sizeof(Vector3::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Vector3, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[0]);
}

// ===================================================================

class Player::_Internal {
 public:
  static const ::rtech::liveapi::Vector3& pos(const Player* msg);
  static const ::rtech::liveapi::Vector3& angles(const Player* msg);
};

const ::rtech::liveapi::Vector3&
Player::_Internal::pos(const Player* msg) {
  return *msg->_impl_.pos_;
}
const ::rtech::liveapi::Vector3&
Player::_Internal::angles(const Player* msg) {
  return *msg->_impl_.angles_;
}
Player::Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.Player)
}
Player::Player(const Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Player* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.nucleushash_){}
    , decltype(_impl_.hardwarename_){}
    , decltype(_impl_.teamname_){}
    , decltype(_impl_.character_){}
    , decltype(_impl_.skin_){}
    , decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.angles_){nullptr}
    , decltype(_impl_.teamid_){}
    , decltype(_impl_.currenthealth_){}
    , decltype(_impl_.maxhealth_){}
    , decltype(_impl_.shieldhealth_){}
    , decltype(_impl_.shieldmaxhealth_){}
    , decltype(_impl_.squadindex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nucleushash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nucleushash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nucleushash().empty()) {
    _this->_impl_.nucleushash_.Set(from._internal_nucleushash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hardwarename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hardwarename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hardwarename().empty()) {
    _this->_impl_.hardwarename_.Set(from._internal_hardwarename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.teamname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.teamname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_teamname().empty()) {
    _this->_impl_.teamname_.Set(from._internal_teamname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.character_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.character_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_character().empty()) {
    _this->_impl_.character_.Set(from._internal_character(), 
      _this->GetArenaForAllocation());
  }
  _impl_.skin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.skin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_skin().empty()) {
    _this->_impl_.skin_.Set(from._internal_skin(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pos()) {
    _this->_impl_.pos_ = new ::rtech::liveapi::Vector3(*from._impl_.pos_);
  }
  if (from._internal_has_angles()) {
    _this->_impl_.angles_ = new ::rtech::liveapi::Vector3(*from._impl_.angles_);
  }
  ::memcpy(&_impl_.teamid_, &from._impl_.teamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.squadindex_) -
    reinterpret_cast<char*>(&_impl_.teamid_)) + sizeof(_impl_.squadindex_));
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.Player)
}

inline void Player::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.nucleushash_){}
    , decltype(_impl_.hardwarename_){}
    , decltype(_impl_.teamname_){}
    , decltype(_impl_.character_){}
    , decltype(_impl_.skin_){}
    , decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.angles_){nullptr}
    , decltype(_impl_.teamid_){0u}
    , decltype(_impl_.currenthealth_){0u}
    , decltype(_impl_.maxhealth_){0u}
    , decltype(_impl_.shieldhealth_){0u}
    , decltype(_impl_.shieldmaxhealth_){0u}
    , decltype(_impl_.squadindex_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nucleushash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nucleushash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hardwarename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hardwarename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.teamname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.teamname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.character_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.character_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.skin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.skin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Player::~Player() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.Player)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.nucleushash_.Destroy();
  _impl_.hardwarename_.Destroy();
  _impl_.teamname_.Destroy();
  _impl_.character_.Destroy();
  _impl_.skin_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pos_;
  if (this != internal_default_instance()) delete _impl_.angles_;
}

void Player::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Player::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.Player)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.nucleushash_.ClearToEmpty();
  _impl_.hardwarename_.ClearToEmpty();
  _impl_.teamname_.ClearToEmpty();
  _impl_.character_.ClearToEmpty();
  _impl_.skin_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.angles_ != nullptr) {
    delete _impl_.angles_;
  }
  _impl_.angles_ = nullptr;
  ::memset(&_impl_.teamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.squadindex_) -
      reinterpret_cast<char*>(&_impl_.teamid_)) + sizeof(_impl_.squadindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Player::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.Player.name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 teamId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Vector3 pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Vector3 angles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_angles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 currentHealth = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.currenthealth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 maxHealth = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.maxhealth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 shieldHealth = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.shieldhealth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 shieldMaxHealth = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.shieldmaxhealth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nucleusHash = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_nucleushash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.Player.nucleusHash"));
        } else
          goto handle_unusual;
        continue;
      // string hardwareName = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_hardwarename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.Player.hardwareName"));
        } else
          goto handle_unusual;
        continue;
      // string teamName = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_teamname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.Player.teamName"));
        } else
          goto handle_unusual;
        continue;
      // uint32 squadIndex = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.squadindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string character = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_character();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.Player.character"));
        } else
          goto handle_unusual;
        continue;
      // string skin = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_skin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.Player.skin"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Player::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.Player)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.Player.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 teamId = 2;
  if (this->_internal_teamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_teamid(), target);
  }

  // .rtech.liveapi.Vector3 pos = 3;
  if (this->_internal_has_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  // .rtech.liveapi.Vector3 angles = 4;
  if (this->_internal_has_angles()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::angles(this),
        _Internal::angles(this).GetCachedSize(), target, stream);
  }

  // uint32 currentHealth = 5;
  if (this->_internal_currenthealth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_currenthealth(), target);
  }

  // uint32 maxHealth = 6;
  if (this->_internal_maxhealth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_maxhealth(), target);
  }

  // uint32 shieldHealth = 7;
  if (this->_internal_shieldhealth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_shieldhealth(), target);
  }

  // uint32 shieldMaxHealth = 8;
  if (this->_internal_shieldmaxhealth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_shieldmaxhealth(), target);
  }

  // string nucleusHash = 9;
  if (!this->_internal_nucleushash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nucleushash().data(), static_cast<int>(this->_internal_nucleushash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.Player.nucleusHash");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_nucleushash(), target);
  }

  // string hardwareName = 10;
  if (!this->_internal_hardwarename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hardwarename().data(), static_cast<int>(this->_internal_hardwarename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.Player.hardwareName");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_hardwarename(), target);
  }

  // string teamName = 11;
  if (!this->_internal_teamname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_teamname().data(), static_cast<int>(this->_internal_teamname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.Player.teamName");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_teamname(), target);
  }

  // uint32 squadIndex = 12;
  if (this->_internal_squadindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_squadindex(), target);
  }

  // string character = 13;
  if (!this->_internal_character().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_character().data(), static_cast<int>(this->_internal_character().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.Player.character");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_character(), target);
  }

  // string skin = 14;
  if (!this->_internal_skin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_skin().data(), static_cast<int>(this->_internal_skin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.Player.skin");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_skin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.Player)
  return target;
}

size_t Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.Player)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string nucleusHash = 9;
  if (!this->_internal_nucleushash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nucleushash());
  }

  // string hardwareName = 10;
  if (!this->_internal_hardwarename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hardwarename());
  }

  // string teamName = 11;
  if (!this->_internal_teamname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_teamname());
  }

  // string character = 13;
  if (!this->_internal_character().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_character());
  }

  // string skin = 14;
  if (!this->_internal_skin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_skin());
  }

  // .rtech.liveapi.Vector3 pos = 3;
  if (this->_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_);
  }

  // .rtech.liveapi.Vector3 angles = 4;
  if (this->_internal_has_angles()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.angles_);
  }

  // uint32 teamId = 2;
  if (this->_internal_teamid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_teamid());
  }

  // uint32 currentHealth = 5;
  if (this->_internal_currenthealth() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_currenthealth());
  }

  // uint32 maxHealth = 6;
  if (this->_internal_maxhealth() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_maxhealth());
  }

  // uint32 shieldHealth = 7;
  if (this->_internal_shieldhealth() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_shieldhealth());
  }

  // uint32 shieldMaxHealth = 8;
  if (this->_internal_shieldmaxhealth() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_shieldmaxhealth());
  }

  // uint32 squadIndex = 12;
  if (this->_internal_squadindex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_squadindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Player::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Player::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Player::GetClassData() const { return &_class_data_; }


void Player::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Player*>(&to_msg);
  auto& from = static_cast<const Player&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.Player)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_nucleushash().empty()) {
    _this->_internal_set_nucleushash(from._internal_nucleushash());
  }
  if (!from._internal_hardwarename().empty()) {
    _this->_internal_set_hardwarename(from._internal_hardwarename());
  }
  if (!from._internal_teamname().empty()) {
    _this->_internal_set_teamname(from._internal_teamname());
  }
  if (!from._internal_character().empty()) {
    _this->_internal_set_character(from._internal_character());
  }
  if (!from._internal_skin().empty()) {
    _this->_internal_set_skin(from._internal_skin());
  }
  if (from._internal_has_pos()) {
    _this->_internal_mutable_pos()->::rtech::liveapi::Vector3::MergeFrom(
        from._internal_pos());
  }
  if (from._internal_has_angles()) {
    _this->_internal_mutable_angles()->::rtech::liveapi::Vector3::MergeFrom(
        from._internal_angles());
  }
  if (from._internal_teamid() != 0) {
    _this->_internal_set_teamid(from._internal_teamid());
  }
  if (from._internal_currenthealth() != 0) {
    _this->_internal_set_currenthealth(from._internal_currenthealth());
  }
  if (from._internal_maxhealth() != 0) {
    _this->_internal_set_maxhealth(from._internal_maxhealth());
  }
  if (from._internal_shieldhealth() != 0) {
    _this->_internal_set_shieldhealth(from._internal_shieldhealth());
  }
  if (from._internal_shieldmaxhealth() != 0) {
    _this->_internal_set_shieldmaxhealth(from._internal_shieldmaxhealth());
  }
  if (from._internal_squadindex() != 0) {
    _this->_internal_set_squadindex(from._internal_squadindex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Player::CopyFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player::IsInitialized() const {
  return true;
}

void Player::InternalSwap(Player* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nucleushash_, lhs_arena,
      &other->_impl_.nucleushash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hardwarename_, lhs_arena,
      &other->_impl_.hardwarename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.teamname_, lhs_arena,
      &other->_impl_.teamname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.character_, lhs_arena,
      &other->_impl_.character_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.skin_, lhs_arena,
      &other->_impl_.skin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Player, _impl_.squadindex_)
      + sizeof(Player::_impl_.squadindex_)
      - PROTOBUF_FIELD_OFFSET(Player, _impl_.pos_)>(
          reinterpret_cast<char*>(&_impl_.pos_),
          reinterpret_cast<char*>(&other->_impl_.pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Player::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[1]);
}

// ===================================================================

class CustomMatch_LobbyPlayer::_Internal {
 public:
};

CustomMatch_LobbyPlayer::CustomMatch_LobbyPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.CustomMatch_LobbyPlayer)
}
CustomMatch_LobbyPlayer::CustomMatch_LobbyPlayer(const CustomMatch_LobbyPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CustomMatch_LobbyPlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.nucleushash_){}
    , decltype(_impl_.hardwarename_){}
    , decltype(_impl_.teamid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nucleushash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nucleushash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nucleushash().empty()) {
    _this->_impl_.nucleushash_.Set(from._internal_nucleushash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hardwarename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hardwarename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hardwarename().empty()) {
    _this->_impl_.hardwarename_.Set(from._internal_hardwarename(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.teamid_ = from._impl_.teamid_;
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.CustomMatch_LobbyPlayer)
}

inline void CustomMatch_LobbyPlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.nucleushash_){}
    , decltype(_impl_.hardwarename_){}
    , decltype(_impl_.teamid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nucleushash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nucleushash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hardwarename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hardwarename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CustomMatch_LobbyPlayer::~CustomMatch_LobbyPlayer() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.CustomMatch_LobbyPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CustomMatch_LobbyPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.nucleushash_.Destroy();
  _impl_.hardwarename_.Destroy();
}

void CustomMatch_LobbyPlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CustomMatch_LobbyPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.CustomMatch_LobbyPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.nucleushash_.ClearToEmpty();
  _impl_.hardwarename_.ClearToEmpty();
  _impl_.teamid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomMatch_LobbyPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.CustomMatch_LobbyPlayer.name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 teamId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nucleusHash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_nucleushash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.CustomMatch_LobbyPlayer.nucleusHash"));
        } else
          goto handle_unusual;
        continue;
      // string hardwareName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_hardwarename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.CustomMatch_LobbyPlayer.hardwareName"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CustomMatch_LobbyPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.CustomMatch_LobbyPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.CustomMatch_LobbyPlayer.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 teamId = 2;
  if (this->_internal_teamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_teamid(), target);
  }

  // string nucleusHash = 3;
  if (!this->_internal_nucleushash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nucleushash().data(), static_cast<int>(this->_internal_nucleushash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.CustomMatch_LobbyPlayer.nucleusHash");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_nucleushash(), target);
  }

  // string hardwareName = 4;
  if (!this->_internal_hardwarename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hardwarename().data(), static_cast<int>(this->_internal_hardwarename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.CustomMatch_LobbyPlayer.hardwareName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_hardwarename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.CustomMatch_LobbyPlayer)
  return target;
}

size_t CustomMatch_LobbyPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.CustomMatch_LobbyPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string nucleusHash = 3;
  if (!this->_internal_nucleushash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nucleushash());
  }

  // string hardwareName = 4;
  if (!this->_internal_hardwarename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hardwarename());
  }

  // uint32 teamId = 2;
  if (this->_internal_teamid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_teamid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CustomMatch_LobbyPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CustomMatch_LobbyPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CustomMatch_LobbyPlayer::GetClassData() const { return &_class_data_; }


void CustomMatch_LobbyPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CustomMatch_LobbyPlayer*>(&to_msg);
  auto& from = static_cast<const CustomMatch_LobbyPlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.CustomMatch_LobbyPlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_nucleushash().empty()) {
    _this->_internal_set_nucleushash(from._internal_nucleushash());
  }
  if (!from._internal_hardwarename().empty()) {
    _this->_internal_set_hardwarename(from._internal_hardwarename());
  }
  if (from._internal_teamid() != 0) {
    _this->_internal_set_teamid(from._internal_teamid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CustomMatch_LobbyPlayer::CopyFrom(const CustomMatch_LobbyPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.CustomMatch_LobbyPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomMatch_LobbyPlayer::IsInitialized() const {
  return true;
}

void CustomMatch_LobbyPlayer::InternalSwap(CustomMatch_LobbyPlayer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nucleushash_, lhs_arena,
      &other->_impl_.nucleushash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hardwarename_, lhs_arena,
      &other->_impl_.hardwarename_, rhs_arena
  );
  swap(_impl_.teamid_, other->_impl_.teamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomMatch_LobbyPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[2]);
}

// ===================================================================

class Datacenter::_Internal {
 public:
};

Datacenter::Datacenter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.Datacenter)
}
Datacenter::Datacenter(const Datacenter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Datacenter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.Datacenter)
}

inline void Datacenter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Datacenter::~Datacenter() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.Datacenter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Datacenter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.category_.Destroy();
  _impl_.name_.Destroy();
}

void Datacenter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Datacenter::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.Datacenter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.category_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.timestamp_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Datacenter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.Datacenter.category"));
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.Datacenter.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Datacenter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.Datacenter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string category = 2;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.Datacenter.category");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_category(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.Datacenter.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.Datacenter)
  return target;
}

size_t Datacenter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.Datacenter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string category = 2;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Datacenter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Datacenter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Datacenter::GetClassData() const { return &_class_data_; }


void Datacenter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Datacenter*>(&to_msg);
  auto& from = static_cast<const Datacenter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.Datacenter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_category().empty()) {
    _this->_internal_set_category(from._internal_category());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Datacenter::CopyFrom(const Datacenter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.Datacenter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Datacenter::IsInitialized() const {
  return true;
}

void Datacenter::InternalSwap(Datacenter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Datacenter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[3]);
}

// ===================================================================

class Version::_Internal {
 public:
};

Version::Version(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.Version)
}
Version::Version(const Version& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Version* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.revision_){}
    , decltype(_impl_.major_num_){}
    , decltype(_impl_.minor_num_){}
    , decltype(_impl_.build_stamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.revision_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.revision_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_revision().empty()) {
    _this->_impl_.revision_.Set(from._internal_revision(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.major_num_, &from._impl_.major_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.build_stamp_) -
    reinterpret_cast<char*>(&_impl_.major_num_)) + sizeof(_impl_.build_stamp_));
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.Version)
}

inline void Version::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.revision_){}
    , decltype(_impl_.major_num_){0u}
    , decltype(_impl_.minor_num_){0u}
    , decltype(_impl_.build_stamp_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.revision_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.revision_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Version::~Version() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.Version)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Version::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.revision_.Destroy();
}

void Version::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Version::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.Version)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.revision_.ClearToEmpty();
  ::memset(&_impl_.major_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.build_stamp_) -
      reinterpret_cast<char*>(&_impl_.major_num_)) + sizeof(_impl_.build_stamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Version::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 major_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.major_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 minor_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.minor_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 build_stamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.build_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string revision = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_revision();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.Version.revision"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Version::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.Version)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 major_num = 1;
  if (this->_internal_major_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_major_num(), target);
  }

  // uint32 minor_num = 2;
  if (this->_internal_minor_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_minor_num(), target);
  }

  // uint32 build_stamp = 3;
  if (this->_internal_build_stamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_build_stamp(), target);
  }

  // string revision = 4;
  if (!this->_internal_revision().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_revision().data(), static_cast<int>(this->_internal_revision().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.Version.revision");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_revision(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.Version)
  return target;
}

size_t Version::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.Version)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string revision = 4;
  if (!this->_internal_revision().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_revision());
  }

  // uint32 major_num = 1;
  if (this->_internal_major_num() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_major_num());
  }

  // uint32 minor_num = 2;
  if (this->_internal_minor_num() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_minor_num());
  }

  // uint32 build_stamp = 3;
  if (this->_internal_build_stamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_build_stamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Version::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Version::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Version::GetClassData() const { return &_class_data_; }


void Version::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Version*>(&to_msg);
  auto& from = static_cast<const Version&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.Version)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_revision().empty()) {
    _this->_internal_set_revision(from._internal_revision());
  }
  if (from._internal_major_num() != 0) {
    _this->_internal_set_major_num(from._internal_major_num());
  }
  if (from._internal_minor_num() != 0) {
    _this->_internal_set_minor_num(from._internal_minor_num());
  }
  if (from._internal_build_stamp() != 0) {
    _this->_internal_set_build_stamp(from._internal_build_stamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Version::CopyFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Version::IsInitialized() const {
  return true;
}

void Version::InternalSwap(Version* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.revision_, lhs_arena,
      &other->_impl_.revision_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Version, _impl_.build_stamp_)
      + sizeof(Version::_impl_.build_stamp_)
      - PROTOBUF_FIELD_OFFSET(Version, _impl_.major_num_)>(
          reinterpret_cast<char*>(&_impl_.major_num_),
          reinterpret_cast<char*>(&other->_impl_.major_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Version::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[4]);
}

// ===================================================================

class Init::_Internal {
 public:
  static const ::rtech::liveapi::Version& apiversion(const Init* msg);
};

const ::rtech::liveapi::Version&
Init::_Internal::apiversion(const Init* msg) {
  return *msg->_impl_.apiversion_;
}
Init::Init(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.Init)
}
Init::Init(const Init& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Init* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.gameversion_){}
    , decltype(_impl_.platform_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.apiversion_){nullptr}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  _impl_.gameversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gameversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gameversion().empty()) {
    _this->_impl_.gameversion_.Set(from._internal_gameversion(), 
      _this->GetArenaForAllocation());
  }
  _impl_.platform_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.platform_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_platform().empty()) {
    _this->_impl_.platform_.Set(from._internal_platform(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_apiversion()) {
    _this->_impl_.apiversion_ = new ::rtech::liveapi::Version(*from._impl_.apiversion_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.Init)
}

inline void Init::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.gameversion_){}
    , decltype(_impl_.platform_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.apiversion_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gameversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gameversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.platform_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.platform_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Init::~Init() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.Init)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Init::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.category_.Destroy();
  _impl_.gameversion_.Destroy();
  _impl_.platform_.Destroy();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.apiversion_;
}

void Init::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Init::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.Init)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.category_.ClearToEmpty();
  _impl_.gameversion_.ClearToEmpty();
  _impl_.platform_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.apiversion_ != nullptr) {
    delete _impl_.apiversion_;
  }
  _impl_.apiversion_ = nullptr;
  _impl_.timestamp_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Init::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.Init.category"));
        } else
          goto handle_unusual;
        continue;
      // string gameVersion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_gameversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.Init.gameVersion"));
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Version apiVersion = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_apiversion(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string platform = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_platform();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.Init.platform"));
        } else
          goto handle_unusual;
        continue;
      // string name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.Init.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Init::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.Init)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string category = 2;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.Init.category");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_category(), target);
  }

  // string gameVersion = 3;
  if (!this->_internal_gameversion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gameversion().data(), static_cast<int>(this->_internal_gameversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.Init.gameVersion");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_gameversion(), target);
  }

  // .rtech.liveapi.Version apiVersion = 4;
  if (this->_internal_has_apiversion()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::apiversion(this),
        _Internal::apiversion(this).GetCachedSize(), target, stream);
  }

  // string platform = 5;
  if (!this->_internal_platform().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_platform().data(), static_cast<int>(this->_internal_platform().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.Init.platform");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_platform(), target);
  }

  // string name = 6;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.Init.name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.Init)
  return target;
}

size_t Init::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.Init)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string category = 2;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // string gameVersion = 3;
  if (!this->_internal_gameversion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gameversion());
  }

  // string platform = 5;
  if (!this->_internal_platform().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_platform());
  }

  // string name = 6;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .rtech.liveapi.Version apiVersion = 4;
  if (this->_internal_has_apiversion()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.apiversion_);
  }

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Init::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Init::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Init::GetClassData() const { return &_class_data_; }


void Init::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Init*>(&to_msg);
  auto& from = static_cast<const Init&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.Init)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_category().empty()) {
    _this->_internal_set_category(from._internal_category());
  }
  if (!from._internal_gameversion().empty()) {
    _this->_internal_set_gameversion(from._internal_gameversion());
  }
  if (!from._internal_platform().empty()) {
    _this->_internal_set_platform(from._internal_platform());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_apiversion()) {
    _this->_internal_mutable_apiversion()->::rtech::liveapi::Version::MergeFrom(
        from._internal_apiversion());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Init::CopyFrom(const Init& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.Init)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Init::IsInitialized() const {
  return true;
}

void Init::InternalSwap(Init* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gameversion_, lhs_arena,
      &other->_impl_.gameversion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.platform_, lhs_arena,
      &other->_impl_.platform_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Init, _impl_.timestamp_)
      + sizeof(Init::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(Init, _impl_.apiversion_)>(
          reinterpret_cast<char*>(&_impl_.apiversion_),
          reinterpret_cast<char*>(&other->_impl_.apiversion_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Init::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[5]);
}

// ===================================================================

class CustomMatch_LobbyPlayers::_Internal {
 public:
};

CustomMatch_LobbyPlayers::CustomMatch_LobbyPlayers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.CustomMatch_LobbyPlayers)
}
CustomMatch_LobbyPlayers::CustomMatch_LobbyPlayers(const CustomMatch_LobbyPlayers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CustomMatch_LobbyPlayers* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.playertoken_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.playertoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playertoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_playertoken().empty()) {
    _this->_impl_.playertoken_.Set(from._internal_playertoken(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.CustomMatch_LobbyPlayers)
}

inline void CustomMatch_LobbyPlayers::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){arena}
    , decltype(_impl_.playertoken_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.playertoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playertoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CustomMatch_LobbyPlayers::~CustomMatch_LobbyPlayers() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.CustomMatch_LobbyPlayers)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CustomMatch_LobbyPlayers::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
  _impl_.playertoken_.Destroy();
}

void CustomMatch_LobbyPlayers::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CustomMatch_LobbyPlayers::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.CustomMatch_LobbyPlayers)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _impl_.playertoken_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomMatch_LobbyPlayers::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string playerToken = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_playertoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.CustomMatch_LobbyPlayers.playerToken"));
        } else
          goto handle_unusual;
        continue;
      // repeated .rtech.liveapi.CustomMatch_LobbyPlayer players = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CustomMatch_LobbyPlayers::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.CustomMatch_LobbyPlayers)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string playerToken = 1;
  if (!this->_internal_playertoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playertoken().data(), static_cast<int>(this->_internal_playertoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.CustomMatch_LobbyPlayers.playerToken");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_playertoken(), target);
  }

  // repeated .rtech.liveapi.CustomMatch_LobbyPlayer players = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.CustomMatch_LobbyPlayers)
  return target;
}

size_t CustomMatch_LobbyPlayers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.CustomMatch_LobbyPlayers)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rtech.liveapi.CustomMatch_LobbyPlayer players = 2;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string playerToken = 1;
  if (!this->_internal_playertoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playertoken());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CustomMatch_LobbyPlayers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CustomMatch_LobbyPlayers::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CustomMatch_LobbyPlayers::GetClassData() const { return &_class_data_; }


void CustomMatch_LobbyPlayers::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CustomMatch_LobbyPlayers*>(&to_msg);
  auto& from = static_cast<const CustomMatch_LobbyPlayers&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.CustomMatch_LobbyPlayers)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  if (!from._internal_playertoken().empty()) {
    _this->_internal_set_playertoken(from._internal_playertoken());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CustomMatch_LobbyPlayers::CopyFrom(const CustomMatch_LobbyPlayers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.CustomMatch_LobbyPlayers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomMatch_LobbyPlayers::IsInitialized() const {
  return true;
}

void CustomMatch_LobbyPlayers::InternalSwap(CustomMatch_LobbyPlayers* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.playertoken_, lhs_arena,
      &other->_impl_.playertoken_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomMatch_LobbyPlayers::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[6]);
}

// ===================================================================

class ObserverSwitched::_Internal {
 public:
  static const ::rtech::liveapi::Player& observer(const ObserverSwitched* msg);
  static const ::rtech::liveapi::Player& target(const ObserverSwitched* msg);
};

const ::rtech::liveapi::Player&
ObserverSwitched::_Internal::observer(const ObserverSwitched* msg) {
  return *msg->_impl_.observer_;
}
const ::rtech::liveapi::Player&
ObserverSwitched::_Internal::target(const ObserverSwitched* msg) {
  return *msg->_impl_.target_;
}
ObserverSwitched::ObserverSwitched(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.ObserverSwitched)
}
ObserverSwitched::ObserverSwitched(const ObserverSwitched& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObserverSwitched* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.targetteam_){from._impl_.targetteam_}
    , decltype(_impl_.category_){}
    , decltype(_impl_.observer_){nullptr}
    , decltype(_impl_.target_){nullptr}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_observer()) {
    _this->_impl_.observer_ = new ::rtech::liveapi::Player(*from._impl_.observer_);
  }
  if (from._internal_has_target()) {
    _this->_impl_.target_ = new ::rtech::liveapi::Player(*from._impl_.target_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.ObserverSwitched)
}

inline void ObserverSwitched::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.targetteam_){arena}
    , decltype(_impl_.category_){}
    , decltype(_impl_.observer_){nullptr}
    , decltype(_impl_.target_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ObserverSwitched::~ObserverSwitched() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.ObserverSwitched)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObserverSwitched::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.targetteam_.~RepeatedPtrField();
  _impl_.category_.Destroy();
  if (this != internal_default_instance()) delete _impl_.observer_;
  if (this != internal_default_instance()) delete _impl_.target_;
}

void ObserverSwitched::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObserverSwitched::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.ObserverSwitched)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.targetteam_.Clear();
  _impl_.category_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.observer_ != nullptr) {
    delete _impl_.observer_;
  }
  _impl_.observer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.target_ != nullptr) {
    delete _impl_.target_;
  }
  _impl_.target_ = nullptr;
  _impl_.timestamp_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObserverSwitched::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.ObserverSwitched.category"));
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Player observer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_observer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Player target = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .rtech.liveapi.Player targetTeam = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_targetteam(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObserverSwitched::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.ObserverSwitched)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string category = 2;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.ObserverSwitched.category");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_category(), target);
  }

  // .rtech.liveapi.Player observer = 3;
  if (this->_internal_has_observer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::observer(this),
        _Internal::observer(this).GetCachedSize(), target, stream);
  }

  // .rtech.liveapi.Player target = 4;
  if (this->_internal_has_target()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::target(this),
        _Internal::target(this).GetCachedSize(), target, stream);
  }

  // repeated .rtech.liveapi.Player targetTeam = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_targetteam_size()); i < n; i++) {
    const auto& repfield = this->_internal_targetteam(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.ObserverSwitched)
  return target;
}

size_t ObserverSwitched::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.ObserverSwitched)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rtech.liveapi.Player targetTeam = 5;
  total_size += 1UL * this->_internal_targetteam_size();
  for (const auto& msg : this->_impl_.targetteam_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string category = 2;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // .rtech.liveapi.Player observer = 3;
  if (this->_internal_has_observer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.observer_);
  }

  // .rtech.liveapi.Player target = 4;
  if (this->_internal_has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.target_);
  }

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObserverSwitched::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObserverSwitched::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObserverSwitched::GetClassData() const { return &_class_data_; }


void ObserverSwitched::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObserverSwitched*>(&to_msg);
  auto& from = static_cast<const ObserverSwitched&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.ObserverSwitched)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.targetteam_.MergeFrom(from._impl_.targetteam_);
  if (!from._internal_category().empty()) {
    _this->_internal_set_category(from._internal_category());
  }
  if (from._internal_has_observer()) {
    _this->_internal_mutable_observer()->::rtech::liveapi::Player::MergeFrom(
        from._internal_observer());
  }
  if (from._internal_has_target()) {
    _this->_internal_mutable_target()->::rtech::liveapi::Player::MergeFrom(
        from._internal_target());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObserverSwitched::CopyFrom(const ObserverSwitched& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.ObserverSwitched)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObserverSwitched::IsInitialized() const {
  return true;
}

void ObserverSwitched::InternalSwap(ObserverSwitched* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.targetteam_.InternalSwap(&other->_impl_.targetteam_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObserverSwitched, _impl_.timestamp_)
      + sizeof(ObserverSwitched::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(ObserverSwitched, _impl_.observer_)>(
          reinterpret_cast<char*>(&_impl_.observer_),
          reinterpret_cast<char*>(&other->_impl_.observer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObserverSwitched::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[7]);
}

// ===================================================================

class ObserverAnnotation::_Internal {
 public:
};

ObserverAnnotation::ObserverAnnotation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.ObserverAnnotation)
}
ObserverAnnotation::ObserverAnnotation(const ObserverAnnotation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObserverAnnotation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.annotationserial_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.annotationserial_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.annotationserial_));
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.ObserverAnnotation)
}

inline void ObserverAnnotation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.annotationserial_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ObserverAnnotation::~ObserverAnnotation() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.ObserverAnnotation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObserverAnnotation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.category_.Destroy();
}

void ObserverAnnotation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObserverAnnotation::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.ObserverAnnotation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.category_.ClearToEmpty();
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.annotationserial_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.annotationserial_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObserverAnnotation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.ObserverAnnotation.category"));
        } else
          goto handle_unusual;
        continue;
      // int32 annotationSerial = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.annotationserial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObserverAnnotation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.ObserverAnnotation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string category = 2;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.ObserverAnnotation.category");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_category(), target);
  }

  // int32 annotationSerial = 3;
  if (this->_internal_annotationserial() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_annotationserial(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.ObserverAnnotation)
  return target;
}

size_t ObserverAnnotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.ObserverAnnotation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string category = 2;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // int32 annotationSerial = 3;
  if (this->_internal_annotationserial() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_annotationserial());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObserverAnnotation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObserverAnnotation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObserverAnnotation::GetClassData() const { return &_class_data_; }


void ObserverAnnotation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObserverAnnotation*>(&to_msg);
  auto& from = static_cast<const ObserverAnnotation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.ObserverAnnotation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_category().empty()) {
    _this->_internal_set_category(from._internal_category());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_annotationserial() != 0) {
    _this->_internal_set_annotationserial(from._internal_annotationserial());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObserverAnnotation::CopyFrom(const ObserverAnnotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.ObserverAnnotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObserverAnnotation::IsInitialized() const {
  return true;
}

void ObserverAnnotation::InternalSwap(ObserverAnnotation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObserverAnnotation, _impl_.annotationserial_)
      + sizeof(ObserverAnnotation::_impl_.annotationserial_)
      - PROTOBUF_FIELD_OFFSET(ObserverAnnotation, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObserverAnnotation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[8]);
}

// ===================================================================

class MatchSetup::_Internal {
 public:
  static const ::rtech::liveapi::Datacenter& datacenter(const MatchSetup* msg);
};

const ::rtech::liveapi::Datacenter&
MatchSetup::_Internal::datacenter(const MatchSetup* msg) {
  return *msg->_impl_.datacenter_;
}
MatchSetup::MatchSetup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.MatchSetup)
}
MatchSetup::MatchSetup(const MatchSetup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MatchSetup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.map_){}
    , decltype(_impl_.playlistname_){}
    , decltype(_impl_.playlistdesc_){}
    , decltype(_impl_.serverid_){}
    , decltype(_impl_.datacenter_){nullptr}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.aimassiston_){}
    , decltype(_impl_.anonymousmode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  _impl_.map_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_map().empty()) {
    _this->_impl_.map_.Set(from._internal_map(), 
      _this->GetArenaForAllocation());
  }
  _impl_.playlistname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playlistname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_playlistname().empty()) {
    _this->_impl_.playlistname_.Set(from._internal_playlistname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.playlistdesc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playlistdesc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_playlistdesc().empty()) {
    _this->_impl_.playlistdesc_.Set(from._internal_playlistdesc(), 
      _this->GetArenaForAllocation());
  }
  _impl_.serverid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serverid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serverid().empty()) {
    _this->_impl_.serverid_.Set(from._internal_serverid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_datacenter()) {
    _this->_impl_.datacenter_ = new ::rtech::liveapi::Datacenter(*from._impl_.datacenter_);
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.anonymousmode_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.anonymousmode_));
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.MatchSetup)
}

inline void MatchSetup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.map_){}
    , decltype(_impl_.playlistname_){}
    , decltype(_impl_.playlistdesc_){}
    , decltype(_impl_.serverid_){}
    , decltype(_impl_.datacenter_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.aimassiston_){false}
    , decltype(_impl_.anonymousmode_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.map_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.playlistname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playlistname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.playlistdesc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playlistdesc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serverid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serverid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MatchSetup::~MatchSetup() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.MatchSetup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MatchSetup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.category_.Destroy();
  _impl_.map_.Destroy();
  _impl_.playlistname_.Destroy();
  _impl_.playlistdesc_.Destroy();
  _impl_.serverid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.datacenter_;
}

void MatchSetup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MatchSetup::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.MatchSetup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.category_.ClearToEmpty();
  _impl_.map_.ClearToEmpty();
  _impl_.playlistname_.ClearToEmpty();
  _impl_.playlistdesc_.ClearToEmpty();
  _impl_.serverid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.datacenter_ != nullptr) {
    delete _impl_.datacenter_;
  }
  _impl_.datacenter_ = nullptr;
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.anonymousmode_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.anonymousmode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchSetup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.MatchSetup.category"));
        } else
          goto handle_unusual;
        continue;
      // string map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_map();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.MatchSetup.map"));
        } else
          goto handle_unusual;
        continue;
      // string playlistName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_playlistname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.MatchSetup.playlistName"));
        } else
          goto handle_unusual;
        continue;
      // string playlistDesc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_playlistdesc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.MatchSetup.playlistDesc"));
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Datacenter datacenter = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_datacenter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool aimAssistOn = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.aimassiston_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool anonymousMode = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.anonymousmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string serverId = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_serverid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.MatchSetup.serverId"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MatchSetup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.MatchSetup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string category = 2;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.MatchSetup.category");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_category(), target);
  }

  // string map = 3;
  if (!this->_internal_map().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_map().data(), static_cast<int>(this->_internal_map().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.MatchSetup.map");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_map(), target);
  }

  // string playlistName = 4;
  if (!this->_internal_playlistname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playlistname().data(), static_cast<int>(this->_internal_playlistname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.MatchSetup.playlistName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_playlistname(), target);
  }

  // string playlistDesc = 5;
  if (!this->_internal_playlistdesc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playlistdesc().data(), static_cast<int>(this->_internal_playlistdesc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.MatchSetup.playlistDesc");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_playlistdesc(), target);
  }

  // .rtech.liveapi.Datacenter datacenter = 6;
  if (this->_internal_has_datacenter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::datacenter(this),
        _Internal::datacenter(this).GetCachedSize(), target, stream);
  }

  // bool aimAssistOn = 7;
  if (this->_internal_aimassiston() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_aimassiston(), target);
  }

  // bool anonymousMode = 8;
  if (this->_internal_anonymousmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_anonymousmode(), target);
  }

  // string serverId = 9;
  if (!this->_internal_serverid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serverid().data(), static_cast<int>(this->_internal_serverid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.MatchSetup.serverId");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_serverid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.MatchSetup)
  return target;
}

size_t MatchSetup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.MatchSetup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string category = 2;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // string map = 3;
  if (!this->_internal_map().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map());
  }

  // string playlistName = 4;
  if (!this->_internal_playlistname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playlistname());
  }

  // string playlistDesc = 5;
  if (!this->_internal_playlistdesc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playlistdesc());
  }

  // string serverId = 9;
  if (!this->_internal_serverid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serverid());
  }

  // .rtech.liveapi.Datacenter datacenter = 6;
  if (this->_internal_has_datacenter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.datacenter_);
  }

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // bool aimAssistOn = 7;
  if (this->_internal_aimassiston() != 0) {
    total_size += 1 + 1;
  }

  // bool anonymousMode = 8;
  if (this->_internal_anonymousmode() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatchSetup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MatchSetup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatchSetup::GetClassData() const { return &_class_data_; }


void MatchSetup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MatchSetup*>(&to_msg);
  auto& from = static_cast<const MatchSetup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.MatchSetup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_category().empty()) {
    _this->_internal_set_category(from._internal_category());
  }
  if (!from._internal_map().empty()) {
    _this->_internal_set_map(from._internal_map());
  }
  if (!from._internal_playlistname().empty()) {
    _this->_internal_set_playlistname(from._internal_playlistname());
  }
  if (!from._internal_playlistdesc().empty()) {
    _this->_internal_set_playlistdesc(from._internal_playlistdesc());
  }
  if (!from._internal_serverid().empty()) {
    _this->_internal_set_serverid(from._internal_serverid());
  }
  if (from._internal_has_datacenter()) {
    _this->_internal_mutable_datacenter()->::rtech::liveapi::Datacenter::MergeFrom(
        from._internal_datacenter());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_aimassiston() != 0) {
    _this->_internal_set_aimassiston(from._internal_aimassiston());
  }
  if (from._internal_anonymousmode() != 0) {
    _this->_internal_set_anonymousmode(from._internal_anonymousmode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MatchSetup::CopyFrom(const MatchSetup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.MatchSetup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchSetup::IsInitialized() const {
  return true;
}

void MatchSetup::InternalSwap(MatchSetup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.map_, lhs_arena,
      &other->_impl_.map_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.playlistname_, lhs_arena,
      &other->_impl_.playlistname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.playlistdesc_, lhs_arena,
      &other->_impl_.playlistdesc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serverid_, lhs_arena,
      &other->_impl_.serverid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatchSetup, _impl_.anonymousmode_)
      + sizeof(MatchSetup::_impl_.anonymousmode_)
      - PROTOBUF_FIELD_OFFSET(MatchSetup, _impl_.datacenter_)>(
          reinterpret_cast<char*>(&_impl_.datacenter_),
          reinterpret_cast<char*>(&other->_impl_.datacenter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchSetup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[9]);
}

// ===================================================================

class GameStateChanged::_Internal {
 public:
};

GameStateChanged::GameStateChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.GameStateChanged)
}
GameStateChanged::GameStateChanged(const GameStateChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameStateChanged* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_state().empty()) {
    _this->_impl_.state_.Set(from._internal_state(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.GameStateChanged)
}

inline void GameStateChanged::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GameStateChanged::~GameStateChanged() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.GameStateChanged)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameStateChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.category_.Destroy();
  _impl_.state_.Destroy();
}

void GameStateChanged::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameStateChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.GameStateChanged)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.category_.ClearToEmpty();
  _impl_.state_.ClearToEmpty();
  _impl_.timestamp_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameStateChanged::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.GameStateChanged.category"));
        } else
          goto handle_unusual;
        continue;
      // string state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_state();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.GameStateChanged.state"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameStateChanged::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.GameStateChanged)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string category = 2;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.GameStateChanged.category");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_category(), target);
  }

  // string state = 3;
  if (!this->_internal_state().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.GameStateChanged.state");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.GameStateChanged)
  return target;
}

size_t GameStateChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.GameStateChanged)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string category = 2;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // string state = 3;
  if (!this->_internal_state().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state());
  }

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameStateChanged::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameStateChanged::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameStateChanged::GetClassData() const { return &_class_data_; }


void GameStateChanged::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameStateChanged*>(&to_msg);
  auto& from = static_cast<const GameStateChanged&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.GameStateChanged)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_category().empty()) {
    _this->_internal_set_category(from._internal_category());
  }
  if (!from._internal_state().empty()) {
    _this->_internal_set_state(from._internal_state());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameStateChanged::CopyFrom(const GameStateChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.GameStateChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStateChanged::IsInitialized() const {
  return true;
}

void GameStateChanged::InternalSwap(GameStateChanged* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.state_, lhs_arena,
      &other->_impl_.state_, rhs_arena
  );
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameStateChanged::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[10]);
}

// ===================================================================

class CharacterSelected::_Internal {
 public:
  static const ::rtech::liveapi::Player& player(const CharacterSelected* msg);
};

const ::rtech::liveapi::Player&
CharacterSelected::_Internal::player(const CharacterSelected* msg) {
  return *msg->_impl_.player_;
}
CharacterSelected::CharacterSelected(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.CharacterSelected)
}
CharacterSelected::CharacterSelected(const CharacterSelected& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CharacterSelected* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::rtech::liveapi::Player(*from._impl_.player_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.CharacterSelected)
}

inline void CharacterSelected::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CharacterSelected::~CharacterSelected() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.CharacterSelected)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CharacterSelected::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.category_.Destroy();
  if (this != internal_default_instance()) delete _impl_.player_;
}

void CharacterSelected::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CharacterSelected::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.CharacterSelected)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.category_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  _impl_.timestamp_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CharacterSelected::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.CharacterSelected.category"));
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Player player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CharacterSelected::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.CharacterSelected)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string category = 2;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.CharacterSelected.category");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_category(), target);
  }

  // .rtech.liveapi.Player player = 3;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.CharacterSelected)
  return target;
}

size_t CharacterSelected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.CharacterSelected)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string category = 2;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // .rtech.liveapi.Player player = 3;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CharacterSelected::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CharacterSelected::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CharacterSelected::GetClassData() const { return &_class_data_; }


void CharacterSelected::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CharacterSelected*>(&to_msg);
  auto& from = static_cast<const CharacterSelected&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.CharacterSelected)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_category().empty()) {
    _this->_internal_set_category(from._internal_category());
  }
  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::rtech::liveapi::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CharacterSelected::CopyFrom(const CharacterSelected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.CharacterSelected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterSelected::IsInitialized() const {
  return true;
}

void CharacterSelected::InternalSwap(CharacterSelected* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CharacterSelected, _impl_.timestamp_)
      + sizeof(CharacterSelected::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(CharacterSelected, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CharacterSelected::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[11]);
}

// ===================================================================

class MatchStateEnd::_Internal {
 public:
};

MatchStateEnd::MatchStateEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.MatchStateEnd)
}
MatchStateEnd::MatchStateEnd(const MatchStateEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MatchStateEnd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.winners_){from._impl_.winners_}
    , decltype(_impl_.category_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_state().empty()) {
    _this->_impl_.state_.Set(from._internal_state(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.MatchStateEnd)
}

inline void MatchStateEnd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.winners_){arena}
    , decltype(_impl_.category_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MatchStateEnd::~MatchStateEnd() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.MatchStateEnd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MatchStateEnd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.winners_.~RepeatedPtrField();
  _impl_.category_.Destroy();
  _impl_.state_.Destroy();
}

void MatchStateEnd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MatchStateEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.MatchStateEnd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.winners_.Clear();
  _impl_.category_.ClearToEmpty();
  _impl_.state_.ClearToEmpty();
  _impl_.timestamp_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchStateEnd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.MatchStateEnd.category"));
        } else
          goto handle_unusual;
        continue;
      // string state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_state();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.MatchStateEnd.state"));
        } else
          goto handle_unusual;
        continue;
      // repeated .rtech.liveapi.Player winners = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_winners(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MatchStateEnd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.MatchStateEnd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string category = 2;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.MatchStateEnd.category");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_category(), target);
  }

  // string state = 3;
  if (!this->_internal_state().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.MatchStateEnd.state");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_state(), target);
  }

  // repeated .rtech.liveapi.Player winners = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_winners_size()); i < n; i++) {
    const auto& repfield = this->_internal_winners(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.MatchStateEnd)
  return target;
}

size_t MatchStateEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.MatchStateEnd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rtech.liveapi.Player winners = 4;
  total_size += 1UL * this->_internal_winners_size();
  for (const auto& msg : this->_impl_.winners_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string category = 2;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // string state = 3;
  if (!this->_internal_state().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state());
  }

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatchStateEnd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MatchStateEnd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatchStateEnd::GetClassData() const { return &_class_data_; }


void MatchStateEnd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MatchStateEnd*>(&to_msg);
  auto& from = static_cast<const MatchStateEnd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.MatchStateEnd)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.winners_.MergeFrom(from._impl_.winners_);
  if (!from._internal_category().empty()) {
    _this->_internal_set_category(from._internal_category());
  }
  if (!from._internal_state().empty()) {
    _this->_internal_set_state(from._internal_state());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MatchStateEnd::CopyFrom(const MatchStateEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.MatchStateEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchStateEnd::IsInitialized() const {
  return true;
}

void MatchStateEnd::InternalSwap(MatchStateEnd* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.winners_.InternalSwap(&other->_impl_.winners_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.state_, lhs_arena,
      &other->_impl_.state_, rhs_arena
  );
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchStateEnd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[12]);
}

// ===================================================================

class RingStartClosing::_Internal {
 public:
  static const ::rtech::liveapi::Vector3& center(const RingStartClosing* msg);
};

const ::rtech::liveapi::Vector3&
RingStartClosing::_Internal::center(const RingStartClosing* msg) {
  return *msg->_impl_.center_;
}
RingStartClosing::RingStartClosing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.RingStartClosing)
}
RingStartClosing::RingStartClosing(const RingStartClosing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RingStartClosing* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.center_){nullptr}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.stage_){}
    , decltype(_impl_.currentradius_){}
    , decltype(_impl_.endradius_){}
    , decltype(_impl_.shrinkduration_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_center()) {
    _this->_impl_.center_ = new ::rtech::liveapi::Vector3(*from._impl_.center_);
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.shrinkduration_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.shrinkduration_));
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.RingStartClosing)
}

inline void RingStartClosing::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.center_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.stage_){0u}
    , decltype(_impl_.currentradius_){0}
    , decltype(_impl_.endradius_){0}
    , decltype(_impl_.shrinkduration_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RingStartClosing::~RingStartClosing() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.RingStartClosing)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RingStartClosing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.category_.Destroy();
  if (this != internal_default_instance()) delete _impl_.center_;
}

void RingStartClosing::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RingStartClosing::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.RingStartClosing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.category_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.center_ != nullptr) {
    delete _impl_.center_;
  }
  _impl_.center_ = nullptr;
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.shrinkduration_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.shrinkduration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RingStartClosing::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.RingStartClosing.category"));
        } else
          goto handle_unusual;
        continue;
      // uint32 stage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.stage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Vector3 center = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float currentRadius = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.currentradius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float endRadius = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.endradius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float shrinkDuration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.shrinkduration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RingStartClosing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.RingStartClosing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string category = 2;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.RingStartClosing.category");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_category(), target);
  }

  // uint32 stage = 3;
  if (this->_internal_stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_stage(), target);
  }

  // .rtech.liveapi.Vector3 center = 4;
  if (this->_internal_has_center()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::center(this),
        _Internal::center(this).GetCachedSize(), target, stream);
  }

  // float currentRadius = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_currentradius = this->_internal_currentradius();
  uint32_t raw_currentradius;
  memcpy(&raw_currentradius, &tmp_currentradius, sizeof(tmp_currentradius));
  if (raw_currentradius != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_currentradius(), target);
  }

  // float endRadius = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_endradius = this->_internal_endradius();
  uint32_t raw_endradius;
  memcpy(&raw_endradius, &tmp_endradius, sizeof(tmp_endradius));
  if (raw_endradius != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_endradius(), target);
  }

  // float shrinkDuration = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shrinkduration = this->_internal_shrinkduration();
  uint32_t raw_shrinkduration;
  memcpy(&raw_shrinkduration, &tmp_shrinkduration, sizeof(tmp_shrinkduration));
  if (raw_shrinkduration != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_shrinkduration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.RingStartClosing)
  return target;
}

size_t RingStartClosing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.RingStartClosing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string category = 2;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // .rtech.liveapi.Vector3 center = 4;
  if (this->_internal_has_center()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.center_);
  }

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // uint32 stage = 3;
  if (this->_internal_stage() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stage());
  }

  // float currentRadius = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_currentradius = this->_internal_currentradius();
  uint32_t raw_currentradius;
  memcpy(&raw_currentradius, &tmp_currentradius, sizeof(tmp_currentradius));
  if (raw_currentradius != 0) {
    total_size += 1 + 4;
  }

  // float endRadius = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_endradius = this->_internal_endradius();
  uint32_t raw_endradius;
  memcpy(&raw_endradius, &tmp_endradius, sizeof(tmp_endradius));
  if (raw_endradius != 0) {
    total_size += 1 + 4;
  }

  // float shrinkDuration = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shrinkduration = this->_internal_shrinkduration();
  uint32_t raw_shrinkduration;
  memcpy(&raw_shrinkduration, &tmp_shrinkduration, sizeof(tmp_shrinkduration));
  if (raw_shrinkduration != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RingStartClosing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RingStartClosing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RingStartClosing::GetClassData() const { return &_class_data_; }


void RingStartClosing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RingStartClosing*>(&to_msg);
  auto& from = static_cast<const RingStartClosing&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.RingStartClosing)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_category().empty()) {
    _this->_internal_set_category(from._internal_category());
  }
  if (from._internal_has_center()) {
    _this->_internal_mutable_center()->::rtech::liveapi::Vector3::MergeFrom(
        from._internal_center());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_stage() != 0) {
    _this->_internal_set_stage(from._internal_stage());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_currentradius = from._internal_currentradius();
  uint32_t raw_currentradius;
  memcpy(&raw_currentradius, &tmp_currentradius, sizeof(tmp_currentradius));
  if (raw_currentradius != 0) {
    _this->_internal_set_currentradius(from._internal_currentradius());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_endradius = from._internal_endradius();
  uint32_t raw_endradius;
  memcpy(&raw_endradius, &tmp_endradius, sizeof(tmp_endradius));
  if (raw_endradius != 0) {
    _this->_internal_set_endradius(from._internal_endradius());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shrinkduration = from._internal_shrinkduration();
  uint32_t raw_shrinkduration;
  memcpy(&raw_shrinkduration, &tmp_shrinkduration, sizeof(tmp_shrinkduration));
  if (raw_shrinkduration != 0) {
    _this->_internal_set_shrinkduration(from._internal_shrinkduration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RingStartClosing::CopyFrom(const RingStartClosing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.RingStartClosing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RingStartClosing::IsInitialized() const {
  return true;
}

void RingStartClosing::InternalSwap(RingStartClosing* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RingStartClosing, _impl_.shrinkduration_)
      + sizeof(RingStartClosing::_impl_.shrinkduration_)
      - PROTOBUF_FIELD_OFFSET(RingStartClosing, _impl_.center_)>(
          reinterpret_cast<char*>(&_impl_.center_),
          reinterpret_cast<char*>(&other->_impl_.center_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RingStartClosing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[13]);
}

// ===================================================================

class RingFinishedClosing::_Internal {
 public:
  static const ::rtech::liveapi::Vector3& center(const RingFinishedClosing* msg);
};

const ::rtech::liveapi::Vector3&
RingFinishedClosing::_Internal::center(const RingFinishedClosing* msg) {
  return *msg->_impl_.center_;
}
RingFinishedClosing::RingFinishedClosing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.RingFinishedClosing)
}
RingFinishedClosing::RingFinishedClosing(const RingFinishedClosing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RingFinishedClosing* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.center_){nullptr}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.stage_){}
    , decltype(_impl_.currentradius_){}
    , decltype(_impl_.shrinkduration_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_center()) {
    _this->_impl_.center_ = new ::rtech::liveapi::Vector3(*from._impl_.center_);
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.shrinkduration_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.shrinkduration_));
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.RingFinishedClosing)
}

inline void RingFinishedClosing::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.center_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.stage_){0u}
    , decltype(_impl_.currentradius_){0}
    , decltype(_impl_.shrinkduration_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RingFinishedClosing::~RingFinishedClosing() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.RingFinishedClosing)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RingFinishedClosing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.category_.Destroy();
  if (this != internal_default_instance()) delete _impl_.center_;
}

void RingFinishedClosing::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RingFinishedClosing::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.RingFinishedClosing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.category_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.center_ != nullptr) {
    delete _impl_.center_;
  }
  _impl_.center_ = nullptr;
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.shrinkduration_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.shrinkduration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RingFinishedClosing::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.RingFinishedClosing.category"));
        } else
          goto handle_unusual;
        continue;
      // uint32 stage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.stage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Vector3 center = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float currentRadius = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.currentradius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float shrinkDuration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.shrinkduration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RingFinishedClosing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.RingFinishedClosing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string category = 2;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.RingFinishedClosing.category");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_category(), target);
  }

  // uint32 stage = 3;
  if (this->_internal_stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_stage(), target);
  }

  // .rtech.liveapi.Vector3 center = 4;
  if (this->_internal_has_center()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::center(this),
        _Internal::center(this).GetCachedSize(), target, stream);
  }

  // float currentRadius = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_currentradius = this->_internal_currentradius();
  uint32_t raw_currentradius;
  memcpy(&raw_currentradius, &tmp_currentradius, sizeof(tmp_currentradius));
  if (raw_currentradius != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_currentradius(), target);
  }

  // float shrinkDuration = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shrinkduration = this->_internal_shrinkduration();
  uint32_t raw_shrinkduration;
  memcpy(&raw_shrinkduration, &tmp_shrinkduration, sizeof(tmp_shrinkduration));
  if (raw_shrinkduration != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_shrinkduration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.RingFinishedClosing)
  return target;
}

size_t RingFinishedClosing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.RingFinishedClosing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string category = 2;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // .rtech.liveapi.Vector3 center = 4;
  if (this->_internal_has_center()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.center_);
  }

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // uint32 stage = 3;
  if (this->_internal_stage() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stage());
  }

  // float currentRadius = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_currentradius = this->_internal_currentradius();
  uint32_t raw_currentradius;
  memcpy(&raw_currentradius, &tmp_currentradius, sizeof(tmp_currentradius));
  if (raw_currentradius != 0) {
    total_size += 1 + 4;
  }

  // float shrinkDuration = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shrinkduration = this->_internal_shrinkduration();
  uint32_t raw_shrinkduration;
  memcpy(&raw_shrinkduration, &tmp_shrinkduration, sizeof(tmp_shrinkduration));
  if (raw_shrinkduration != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RingFinishedClosing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RingFinishedClosing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RingFinishedClosing::GetClassData() const { return &_class_data_; }


void RingFinishedClosing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RingFinishedClosing*>(&to_msg);
  auto& from = static_cast<const RingFinishedClosing&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.RingFinishedClosing)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_category().empty()) {
    _this->_internal_set_category(from._internal_category());
  }
  if (from._internal_has_center()) {
    _this->_internal_mutable_center()->::rtech::liveapi::Vector3::MergeFrom(
        from._internal_center());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_stage() != 0) {
    _this->_internal_set_stage(from._internal_stage());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_currentradius = from._internal_currentradius();
  uint32_t raw_currentradius;
  memcpy(&raw_currentradius, &tmp_currentradius, sizeof(tmp_currentradius));
  if (raw_currentradius != 0) {
    _this->_internal_set_currentradius(from._internal_currentradius());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shrinkduration = from._internal_shrinkduration();
  uint32_t raw_shrinkduration;
  memcpy(&raw_shrinkduration, &tmp_shrinkduration, sizeof(tmp_shrinkduration));
  if (raw_shrinkduration != 0) {
    _this->_internal_set_shrinkduration(from._internal_shrinkduration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RingFinishedClosing::CopyFrom(const RingFinishedClosing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.RingFinishedClosing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RingFinishedClosing::IsInitialized() const {
  return true;
}

void RingFinishedClosing::InternalSwap(RingFinishedClosing* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RingFinishedClosing, _impl_.shrinkduration_)
      + sizeof(RingFinishedClosing::_impl_.shrinkduration_)
      - PROTOBUF_FIELD_OFFSET(RingFinishedClosing, _impl_.center_)>(
          reinterpret_cast<char*>(&_impl_.center_),
          reinterpret_cast<char*>(&other->_impl_.center_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RingFinishedClosing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[14]);
}

// ===================================================================

class PlayerConnected::_Internal {
 public:
  static const ::rtech::liveapi::Player& player(const PlayerConnected* msg);
};

const ::rtech::liveapi::Player&
PlayerConnected::_Internal::player(const PlayerConnected* msg) {
  return *msg->_impl_.player_;
}
PlayerConnected::PlayerConnected(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.PlayerConnected)
}
PlayerConnected::PlayerConnected(const PlayerConnected& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerConnected* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::rtech::liveapi::Player(*from._impl_.player_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.PlayerConnected)
}

inline void PlayerConnected::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerConnected::~PlayerConnected() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.PlayerConnected)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerConnected::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.category_.Destroy();
  if (this != internal_default_instance()) delete _impl_.player_;
}

void PlayerConnected::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerConnected::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.PlayerConnected)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.category_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  _impl_.timestamp_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerConnected::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.PlayerConnected.category"));
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Player player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerConnected::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.PlayerConnected)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string category = 2;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.PlayerConnected.category");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_category(), target);
  }

  // .rtech.liveapi.Player player = 3;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.PlayerConnected)
  return target;
}

size_t PlayerConnected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.PlayerConnected)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string category = 2;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // .rtech.liveapi.Player player = 3;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerConnected::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerConnected::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerConnected::GetClassData() const { return &_class_data_; }


void PlayerConnected::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerConnected*>(&to_msg);
  auto& from = static_cast<const PlayerConnected&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.PlayerConnected)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_category().empty()) {
    _this->_internal_set_category(from._internal_category());
  }
  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::rtech::liveapi::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerConnected::CopyFrom(const PlayerConnected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.PlayerConnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerConnected::IsInitialized() const {
  return true;
}

void PlayerConnected::InternalSwap(PlayerConnected* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerConnected, _impl_.timestamp_)
      + sizeof(PlayerConnected::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(PlayerConnected, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerConnected::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[15]);
}

// ===================================================================

class PlayerDisconnected::_Internal {
 public:
  static const ::rtech::liveapi::Player& player(const PlayerDisconnected* msg);
};

const ::rtech::liveapi::Player&
PlayerDisconnected::_Internal::player(const PlayerDisconnected* msg) {
  return *msg->_impl_.player_;
}
PlayerDisconnected::PlayerDisconnected(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.PlayerDisconnected)
}
PlayerDisconnected::PlayerDisconnected(const PlayerDisconnected& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerDisconnected* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.canreconnect_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::rtech::liveapi::Player(*from._impl_.player_);
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.canreconnect_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.canreconnect_));
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.PlayerDisconnected)
}

inline void PlayerDisconnected::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.canreconnect_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerDisconnected::~PlayerDisconnected() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.PlayerDisconnected)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerDisconnected::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.category_.Destroy();
  if (this != internal_default_instance()) delete _impl_.player_;
}

void PlayerDisconnected::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerDisconnected::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.PlayerDisconnected)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.category_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.canreconnect_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.canreconnect_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerDisconnected::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.PlayerDisconnected.category"));
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Player player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool canReconnect = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.canreconnect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerDisconnected::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.PlayerDisconnected)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string category = 2;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.PlayerDisconnected.category");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_category(), target);
  }

  // .rtech.liveapi.Player player = 3;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // bool canReconnect = 4;
  if (this->_internal_canreconnect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_canreconnect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.PlayerDisconnected)
  return target;
}

size_t PlayerDisconnected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.PlayerDisconnected)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string category = 2;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // .rtech.liveapi.Player player = 3;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // bool canReconnect = 4;
  if (this->_internal_canreconnect() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerDisconnected::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerDisconnected::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerDisconnected::GetClassData() const { return &_class_data_; }


void PlayerDisconnected::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerDisconnected*>(&to_msg);
  auto& from = static_cast<const PlayerDisconnected&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.PlayerDisconnected)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_category().empty()) {
    _this->_internal_set_category(from._internal_category());
  }
  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::rtech::liveapi::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_canreconnect() != 0) {
    _this->_internal_set_canreconnect(from._internal_canreconnect());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerDisconnected::CopyFrom(const PlayerDisconnected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.PlayerDisconnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDisconnected::IsInitialized() const {
  return true;
}

void PlayerDisconnected::InternalSwap(PlayerDisconnected* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerDisconnected, _impl_.canreconnect_)
      + sizeof(PlayerDisconnected::_impl_.canreconnect_)
      - PROTOBUF_FIELD_OFFSET(PlayerDisconnected, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerDisconnected::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[16]);
}

// ===================================================================

class PlayerStatChanged::_Internal {
 public:
  static const ::rtech::liveapi::Player& player(const PlayerStatChanged* msg);
};

const ::rtech::liveapi::Player&
PlayerStatChanged::_Internal::player(const PlayerStatChanged* msg) {
  return *msg->_impl_.player_;
}
PlayerStatChanged::PlayerStatChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.PlayerStatChanged)
}
PlayerStatChanged::PlayerStatChanged(const PlayerStatChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerStatChanged* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.statname_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.newvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  _impl_.statname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.statname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_statname().empty()) {
    _this->_impl_.statname_.Set(from._internal_statname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::rtech::liveapi::Player(*from._impl_.player_);
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.newvalue_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.newvalue_));
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.PlayerStatChanged)
}

inline void PlayerStatChanged::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.statname_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.newvalue_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.statname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.statname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerStatChanged::~PlayerStatChanged() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.PlayerStatChanged)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerStatChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.category_.Destroy();
  _impl_.statname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.player_;
}

void PlayerStatChanged::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerStatChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.PlayerStatChanged)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.category_.ClearToEmpty();
  _impl_.statname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.newvalue_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.newvalue_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerStatChanged::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.PlayerStatChanged.category"));
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Player player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string statName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_statname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.PlayerStatChanged.statName"));
        } else
          goto handle_unusual;
        continue;
      // uint32 newValue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.newvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerStatChanged::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.PlayerStatChanged)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string category = 2;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.PlayerStatChanged.category");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_category(), target);
  }

  // .rtech.liveapi.Player player = 3;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // string statName = 4;
  if (!this->_internal_statname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_statname().data(), static_cast<int>(this->_internal_statname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.PlayerStatChanged.statName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_statname(), target);
  }

  // uint32 newValue = 5;
  if (this->_internal_newvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_newvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.PlayerStatChanged)
  return target;
}

size_t PlayerStatChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.PlayerStatChanged)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string category = 2;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // string statName = 4;
  if (!this->_internal_statname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_statname());
  }

  // .rtech.liveapi.Player player = 3;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // uint32 newValue = 5;
  if (this->_internal_newvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_newvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerStatChanged::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerStatChanged::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerStatChanged::GetClassData() const { return &_class_data_; }


void PlayerStatChanged::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerStatChanged*>(&to_msg);
  auto& from = static_cast<const PlayerStatChanged&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.PlayerStatChanged)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_category().empty()) {
    _this->_internal_set_category(from._internal_category());
  }
  if (!from._internal_statname().empty()) {
    _this->_internal_set_statname(from._internal_statname());
  }
  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::rtech::liveapi::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_newvalue() != 0) {
    _this->_internal_set_newvalue(from._internal_newvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerStatChanged::CopyFrom(const PlayerStatChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.PlayerStatChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerStatChanged::IsInitialized() const {
  return true;
}

void PlayerStatChanged::InternalSwap(PlayerStatChanged* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.statname_, lhs_arena,
      &other->_impl_.statname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerStatChanged, _impl_.newvalue_)
      + sizeof(PlayerStatChanged::_impl_.newvalue_)
      - PROTOBUF_FIELD_OFFSET(PlayerStatChanged, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerStatChanged::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[17]);
}

// ===================================================================

class PlayerDamaged::_Internal {
 public:
  static const ::rtech::liveapi::Player& attacker(const PlayerDamaged* msg);
  static const ::rtech::liveapi::Player& victim(const PlayerDamaged* msg);
};

const ::rtech::liveapi::Player&
PlayerDamaged::_Internal::attacker(const PlayerDamaged* msg) {
  return *msg->_impl_.attacker_;
}
const ::rtech::liveapi::Player&
PlayerDamaged::_Internal::victim(const PlayerDamaged* msg) {
  return *msg->_impl_.victim_;
}
PlayerDamaged::PlayerDamaged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.PlayerDamaged)
}
PlayerDamaged::PlayerDamaged(const PlayerDamaged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerDamaged* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.weapon_){}
    , decltype(_impl_.attacker_){nullptr}
    , decltype(_impl_.victim_){nullptr}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.damageinflicted_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  _impl_.weapon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.weapon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_weapon().empty()) {
    _this->_impl_.weapon_.Set(from._internal_weapon(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_attacker()) {
    _this->_impl_.attacker_ = new ::rtech::liveapi::Player(*from._impl_.attacker_);
  }
  if (from._internal_has_victim()) {
    _this->_impl_.victim_ = new ::rtech::liveapi::Player(*from._impl_.victim_);
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.damageinflicted_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.damageinflicted_));
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.PlayerDamaged)
}

inline void PlayerDamaged::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.weapon_){}
    , decltype(_impl_.attacker_){nullptr}
    , decltype(_impl_.victim_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.damageinflicted_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.weapon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.weapon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerDamaged::~PlayerDamaged() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.PlayerDamaged)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerDamaged::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.category_.Destroy();
  _impl_.weapon_.Destroy();
  if (this != internal_default_instance()) delete _impl_.attacker_;
  if (this != internal_default_instance()) delete _impl_.victim_;
}

void PlayerDamaged::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerDamaged::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.PlayerDamaged)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.category_.ClearToEmpty();
  _impl_.weapon_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.attacker_ != nullptr) {
    delete _impl_.attacker_;
  }
  _impl_.attacker_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.victim_ != nullptr) {
    delete _impl_.victim_;
  }
  _impl_.victim_ = nullptr;
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.damageinflicted_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.damageinflicted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerDamaged::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.PlayerDamaged.category"));
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Player attacker = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_attacker(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Player victim = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_victim(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string weapon = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_weapon();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.PlayerDamaged.weapon"));
        } else
          goto handle_unusual;
        continue;
      // uint32 damageInflicted = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.damageinflicted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerDamaged::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.PlayerDamaged)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string category = 2;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.PlayerDamaged.category");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_category(), target);
  }

  // .rtech.liveapi.Player attacker = 3;
  if (this->_internal_has_attacker()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::attacker(this),
        _Internal::attacker(this).GetCachedSize(), target, stream);
  }

  // .rtech.liveapi.Player victim = 4;
  if (this->_internal_has_victim()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::victim(this),
        _Internal::victim(this).GetCachedSize(), target, stream);
  }

  // string weapon = 5;
  if (!this->_internal_weapon().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_weapon().data(), static_cast<int>(this->_internal_weapon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.PlayerDamaged.weapon");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_weapon(), target);
  }

  // uint32 damageInflicted = 6;
  if (this->_internal_damageinflicted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_damageinflicted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.PlayerDamaged)
  return target;
}

size_t PlayerDamaged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.PlayerDamaged)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string category = 2;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // string weapon = 5;
  if (!this->_internal_weapon().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_weapon());
  }

  // .rtech.liveapi.Player attacker = 3;
  if (this->_internal_has_attacker()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.attacker_);
  }

  // .rtech.liveapi.Player victim = 4;
  if (this->_internal_has_victim()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.victim_);
  }

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // uint32 damageInflicted = 6;
  if (this->_internal_damageinflicted() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_damageinflicted());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerDamaged::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerDamaged::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerDamaged::GetClassData() const { return &_class_data_; }


void PlayerDamaged::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerDamaged*>(&to_msg);
  auto& from = static_cast<const PlayerDamaged&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.PlayerDamaged)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_category().empty()) {
    _this->_internal_set_category(from._internal_category());
  }
  if (!from._internal_weapon().empty()) {
    _this->_internal_set_weapon(from._internal_weapon());
  }
  if (from._internal_has_attacker()) {
    _this->_internal_mutable_attacker()->::rtech::liveapi::Player::MergeFrom(
        from._internal_attacker());
  }
  if (from._internal_has_victim()) {
    _this->_internal_mutable_victim()->::rtech::liveapi::Player::MergeFrom(
        from._internal_victim());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_damageinflicted() != 0) {
    _this->_internal_set_damageinflicted(from._internal_damageinflicted());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerDamaged::CopyFrom(const PlayerDamaged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.PlayerDamaged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDamaged::IsInitialized() const {
  return true;
}

void PlayerDamaged::InternalSwap(PlayerDamaged* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.weapon_, lhs_arena,
      &other->_impl_.weapon_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerDamaged, _impl_.damageinflicted_)
      + sizeof(PlayerDamaged::_impl_.damageinflicted_)
      - PROTOBUF_FIELD_OFFSET(PlayerDamaged, _impl_.attacker_)>(
          reinterpret_cast<char*>(&_impl_.attacker_),
          reinterpret_cast<char*>(&other->_impl_.attacker_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerDamaged::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[18]);
}

// ===================================================================

class PlayerKilled::_Internal {
 public:
  static const ::rtech::liveapi::Player& attacker(const PlayerKilled* msg);
  static const ::rtech::liveapi::Player& victim(const PlayerKilled* msg);
  static const ::rtech::liveapi::Player& awardedto(const PlayerKilled* msg);
};

const ::rtech::liveapi::Player&
PlayerKilled::_Internal::attacker(const PlayerKilled* msg) {
  return *msg->_impl_.attacker_;
}
const ::rtech::liveapi::Player&
PlayerKilled::_Internal::victim(const PlayerKilled* msg) {
  return *msg->_impl_.victim_;
}
const ::rtech::liveapi::Player&
PlayerKilled::_Internal::awardedto(const PlayerKilled* msg) {
  return *msg->_impl_.awardedto_;
}
PlayerKilled::PlayerKilled(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.PlayerKilled)
}
PlayerKilled::PlayerKilled(const PlayerKilled& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerKilled* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.weapon_){}
    , decltype(_impl_.attacker_){nullptr}
    , decltype(_impl_.victim_){nullptr}
    , decltype(_impl_.awardedto_){nullptr}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  _impl_.weapon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.weapon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_weapon().empty()) {
    _this->_impl_.weapon_.Set(from._internal_weapon(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_attacker()) {
    _this->_impl_.attacker_ = new ::rtech::liveapi::Player(*from._impl_.attacker_);
  }
  if (from._internal_has_victim()) {
    _this->_impl_.victim_ = new ::rtech::liveapi::Player(*from._impl_.victim_);
  }
  if (from._internal_has_awardedto()) {
    _this->_impl_.awardedto_ = new ::rtech::liveapi::Player(*from._impl_.awardedto_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.PlayerKilled)
}

inline void PlayerKilled::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.weapon_){}
    , decltype(_impl_.attacker_){nullptr}
    , decltype(_impl_.victim_){nullptr}
    , decltype(_impl_.awardedto_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.weapon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.weapon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerKilled::~PlayerKilled() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.PlayerKilled)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerKilled::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.category_.Destroy();
  _impl_.weapon_.Destroy();
  if (this != internal_default_instance()) delete _impl_.attacker_;
  if (this != internal_default_instance()) delete _impl_.victim_;
  if (this != internal_default_instance()) delete _impl_.awardedto_;
}

void PlayerKilled::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerKilled::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.PlayerKilled)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.category_.ClearToEmpty();
  _impl_.weapon_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.attacker_ != nullptr) {
    delete _impl_.attacker_;
  }
  _impl_.attacker_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.victim_ != nullptr) {
    delete _impl_.victim_;
  }
  _impl_.victim_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.awardedto_ != nullptr) {
    delete _impl_.awardedto_;
  }
  _impl_.awardedto_ = nullptr;
  _impl_.timestamp_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerKilled::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.PlayerKilled.category"));
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Player attacker = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_attacker(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Player victim = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_victim(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Player awardedTo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_awardedto(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string weapon = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_weapon();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.PlayerKilled.weapon"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerKilled::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.PlayerKilled)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string category = 2;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.PlayerKilled.category");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_category(), target);
  }

  // .rtech.liveapi.Player attacker = 3;
  if (this->_internal_has_attacker()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::attacker(this),
        _Internal::attacker(this).GetCachedSize(), target, stream);
  }

  // .rtech.liveapi.Player victim = 4;
  if (this->_internal_has_victim()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::victim(this),
        _Internal::victim(this).GetCachedSize(), target, stream);
  }

  // .rtech.liveapi.Player awardedTo = 5;
  if (this->_internal_has_awardedto()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::awardedto(this),
        _Internal::awardedto(this).GetCachedSize(), target, stream);
  }

  // string weapon = 6;
  if (!this->_internal_weapon().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_weapon().data(), static_cast<int>(this->_internal_weapon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.PlayerKilled.weapon");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_weapon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.PlayerKilled)
  return target;
}

size_t PlayerKilled::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.PlayerKilled)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string category = 2;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // string weapon = 6;
  if (!this->_internal_weapon().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_weapon());
  }

  // .rtech.liveapi.Player attacker = 3;
  if (this->_internal_has_attacker()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.attacker_);
  }

  // .rtech.liveapi.Player victim = 4;
  if (this->_internal_has_victim()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.victim_);
  }

  // .rtech.liveapi.Player awardedTo = 5;
  if (this->_internal_has_awardedto()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.awardedto_);
  }

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerKilled::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerKilled::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerKilled::GetClassData() const { return &_class_data_; }


void PlayerKilled::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerKilled*>(&to_msg);
  auto& from = static_cast<const PlayerKilled&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.PlayerKilled)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_category().empty()) {
    _this->_internal_set_category(from._internal_category());
  }
  if (!from._internal_weapon().empty()) {
    _this->_internal_set_weapon(from._internal_weapon());
  }
  if (from._internal_has_attacker()) {
    _this->_internal_mutable_attacker()->::rtech::liveapi::Player::MergeFrom(
        from._internal_attacker());
  }
  if (from._internal_has_victim()) {
    _this->_internal_mutable_victim()->::rtech::liveapi::Player::MergeFrom(
        from._internal_victim());
  }
  if (from._internal_has_awardedto()) {
    _this->_internal_mutable_awardedto()->::rtech::liveapi::Player::MergeFrom(
        from._internal_awardedto());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerKilled::CopyFrom(const PlayerKilled& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.PlayerKilled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerKilled::IsInitialized() const {
  return true;
}

void PlayerKilled::InternalSwap(PlayerKilled* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.weapon_, lhs_arena,
      &other->_impl_.weapon_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerKilled, _impl_.timestamp_)
      + sizeof(PlayerKilled::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(PlayerKilled, _impl_.attacker_)>(
          reinterpret_cast<char*>(&_impl_.attacker_),
          reinterpret_cast<char*>(&other->_impl_.attacker_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerKilled::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[19]);
}

// ===================================================================

class PlayerDowned::_Internal {
 public:
  static const ::rtech::liveapi::Player& attacker(const PlayerDowned* msg);
  static const ::rtech::liveapi::Player& victim(const PlayerDowned* msg);
};

const ::rtech::liveapi::Player&
PlayerDowned::_Internal::attacker(const PlayerDowned* msg) {
  return *msg->_impl_.attacker_;
}
const ::rtech::liveapi::Player&
PlayerDowned::_Internal::victim(const PlayerDowned* msg) {
  return *msg->_impl_.victim_;
}
PlayerDowned::PlayerDowned(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.PlayerDowned)
}
PlayerDowned::PlayerDowned(const PlayerDowned& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerDowned* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.weapon_){}
    , decltype(_impl_.attacker_){nullptr}
    , decltype(_impl_.victim_){nullptr}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  _impl_.weapon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.weapon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_weapon().empty()) {
    _this->_impl_.weapon_.Set(from._internal_weapon(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_attacker()) {
    _this->_impl_.attacker_ = new ::rtech::liveapi::Player(*from._impl_.attacker_);
  }
  if (from._internal_has_victim()) {
    _this->_impl_.victim_ = new ::rtech::liveapi::Player(*from._impl_.victim_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.PlayerDowned)
}

inline void PlayerDowned::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.weapon_){}
    , decltype(_impl_.attacker_){nullptr}
    , decltype(_impl_.victim_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.weapon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.weapon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerDowned::~PlayerDowned() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.PlayerDowned)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerDowned::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.category_.Destroy();
  _impl_.weapon_.Destroy();
  if (this != internal_default_instance()) delete _impl_.attacker_;
  if (this != internal_default_instance()) delete _impl_.victim_;
}

void PlayerDowned::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerDowned::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.PlayerDowned)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.category_.ClearToEmpty();
  _impl_.weapon_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.attacker_ != nullptr) {
    delete _impl_.attacker_;
  }
  _impl_.attacker_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.victim_ != nullptr) {
    delete _impl_.victim_;
  }
  _impl_.victim_ = nullptr;
  _impl_.timestamp_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerDowned::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.PlayerDowned.category"));
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Player attacker = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_attacker(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Player victim = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_victim(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string weapon = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_weapon();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.PlayerDowned.weapon"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerDowned::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.PlayerDowned)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string category = 2;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.PlayerDowned.category");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_category(), target);
  }

  // .rtech.liveapi.Player attacker = 3;
  if (this->_internal_has_attacker()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::attacker(this),
        _Internal::attacker(this).GetCachedSize(), target, stream);
  }

  // .rtech.liveapi.Player victim = 4;
  if (this->_internal_has_victim()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::victim(this),
        _Internal::victim(this).GetCachedSize(), target, stream);
  }

  // string weapon = 5;
  if (!this->_internal_weapon().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_weapon().data(), static_cast<int>(this->_internal_weapon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.PlayerDowned.weapon");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_weapon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.PlayerDowned)
  return target;
}

size_t PlayerDowned::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.PlayerDowned)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string category = 2;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // string weapon = 5;
  if (!this->_internal_weapon().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_weapon());
  }

  // .rtech.liveapi.Player attacker = 3;
  if (this->_internal_has_attacker()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.attacker_);
  }

  // .rtech.liveapi.Player victim = 4;
  if (this->_internal_has_victim()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.victim_);
  }

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerDowned::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerDowned::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerDowned::GetClassData() const { return &_class_data_; }


void PlayerDowned::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerDowned*>(&to_msg);
  auto& from = static_cast<const PlayerDowned&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.PlayerDowned)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_category().empty()) {
    _this->_internal_set_category(from._internal_category());
  }
  if (!from._internal_weapon().empty()) {
    _this->_internal_set_weapon(from._internal_weapon());
  }
  if (from._internal_has_attacker()) {
    _this->_internal_mutable_attacker()->::rtech::liveapi::Player::MergeFrom(
        from._internal_attacker());
  }
  if (from._internal_has_victim()) {
    _this->_internal_mutable_victim()->::rtech::liveapi::Player::MergeFrom(
        from._internal_victim());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerDowned::CopyFrom(const PlayerDowned& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.PlayerDowned)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDowned::IsInitialized() const {
  return true;
}

void PlayerDowned::InternalSwap(PlayerDowned* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.weapon_, lhs_arena,
      &other->_impl_.weapon_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerDowned, _impl_.timestamp_)
      + sizeof(PlayerDowned::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(PlayerDowned, _impl_.attacker_)>(
          reinterpret_cast<char*>(&_impl_.attacker_),
          reinterpret_cast<char*>(&other->_impl_.attacker_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerDowned::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[20]);
}

// ===================================================================

class PlayerAssist::_Internal {
 public:
  static const ::rtech::liveapi::Player& assistant(const PlayerAssist* msg);
  static const ::rtech::liveapi::Player& victim(const PlayerAssist* msg);
};

const ::rtech::liveapi::Player&
PlayerAssist::_Internal::assistant(const PlayerAssist* msg) {
  return *msg->_impl_.assistant_;
}
const ::rtech::liveapi::Player&
PlayerAssist::_Internal::victim(const PlayerAssist* msg) {
  return *msg->_impl_.victim_;
}
PlayerAssist::PlayerAssist(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.PlayerAssist)
}
PlayerAssist::PlayerAssist(const PlayerAssist& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerAssist* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.weapon_){}
    , decltype(_impl_.assistant_){nullptr}
    , decltype(_impl_.victim_){nullptr}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  _impl_.weapon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.weapon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_weapon().empty()) {
    _this->_impl_.weapon_.Set(from._internal_weapon(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_assistant()) {
    _this->_impl_.assistant_ = new ::rtech::liveapi::Player(*from._impl_.assistant_);
  }
  if (from._internal_has_victim()) {
    _this->_impl_.victim_ = new ::rtech::liveapi::Player(*from._impl_.victim_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.PlayerAssist)
}

inline void PlayerAssist::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.weapon_){}
    , decltype(_impl_.assistant_){nullptr}
    , decltype(_impl_.victim_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.weapon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.weapon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerAssist::~PlayerAssist() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.PlayerAssist)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerAssist::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.category_.Destroy();
  _impl_.weapon_.Destroy();
  if (this != internal_default_instance()) delete _impl_.assistant_;
  if (this != internal_default_instance()) delete _impl_.victim_;
}

void PlayerAssist::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerAssist::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.PlayerAssist)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.category_.ClearToEmpty();
  _impl_.weapon_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.assistant_ != nullptr) {
    delete _impl_.assistant_;
  }
  _impl_.assistant_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.victim_ != nullptr) {
    delete _impl_.victim_;
  }
  _impl_.victim_ = nullptr;
  _impl_.timestamp_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerAssist::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.PlayerAssist.category"));
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Player assistant = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_assistant(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Player victim = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_victim(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string weapon = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_weapon();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.PlayerAssist.weapon"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerAssist::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.PlayerAssist)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string category = 2;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.PlayerAssist.category");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_category(), target);
  }

  // .rtech.liveapi.Player assistant = 3;
  if (this->_internal_has_assistant()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::assistant(this),
        _Internal::assistant(this).GetCachedSize(), target, stream);
  }

  // .rtech.liveapi.Player victim = 4;
  if (this->_internal_has_victim()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::victim(this),
        _Internal::victim(this).GetCachedSize(), target, stream);
  }

  // string weapon = 5;
  if (!this->_internal_weapon().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_weapon().data(), static_cast<int>(this->_internal_weapon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.PlayerAssist.weapon");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_weapon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.PlayerAssist)
  return target;
}

size_t PlayerAssist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.PlayerAssist)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string category = 2;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // string weapon = 5;
  if (!this->_internal_weapon().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_weapon());
  }

  // .rtech.liveapi.Player assistant = 3;
  if (this->_internal_has_assistant()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.assistant_);
  }

  // .rtech.liveapi.Player victim = 4;
  if (this->_internal_has_victim()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.victim_);
  }

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerAssist::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerAssist::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerAssist::GetClassData() const { return &_class_data_; }


void PlayerAssist::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerAssist*>(&to_msg);
  auto& from = static_cast<const PlayerAssist&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.PlayerAssist)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_category().empty()) {
    _this->_internal_set_category(from._internal_category());
  }
  if (!from._internal_weapon().empty()) {
    _this->_internal_set_weapon(from._internal_weapon());
  }
  if (from._internal_has_assistant()) {
    _this->_internal_mutable_assistant()->::rtech::liveapi::Player::MergeFrom(
        from._internal_assistant());
  }
  if (from._internal_has_victim()) {
    _this->_internal_mutable_victim()->::rtech::liveapi::Player::MergeFrom(
        from._internal_victim());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerAssist::CopyFrom(const PlayerAssist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.PlayerAssist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerAssist::IsInitialized() const {
  return true;
}

void PlayerAssist::InternalSwap(PlayerAssist* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.weapon_, lhs_arena,
      &other->_impl_.weapon_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerAssist, _impl_.timestamp_)
      + sizeof(PlayerAssist::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(PlayerAssist, _impl_.assistant_)>(
          reinterpret_cast<char*>(&_impl_.assistant_),
          reinterpret_cast<char*>(&other->_impl_.assistant_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerAssist::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[21]);
}

// ===================================================================

class SquadEliminated::_Internal {
 public:
};

SquadEliminated::SquadEliminated(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.SquadEliminated)
}
SquadEliminated::SquadEliminated(const SquadEliminated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SquadEliminated* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.category_){}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.SquadEliminated)
}

inline void SquadEliminated::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){arena}
    , decltype(_impl_.category_){}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SquadEliminated::~SquadEliminated() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.SquadEliminated)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SquadEliminated::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
  _impl_.category_.Destroy();
}

void SquadEliminated::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SquadEliminated::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.SquadEliminated)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _impl_.category_.ClearToEmpty();
  _impl_.timestamp_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SquadEliminated::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.SquadEliminated.category"));
        } else
          goto handle_unusual;
        continue;
      // repeated .rtech.liveapi.Player players = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SquadEliminated::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.SquadEliminated)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string category = 2;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.SquadEliminated.category");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_category(), target);
  }

  // repeated .rtech.liveapi.Player players = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.SquadEliminated)
  return target;
}

size_t SquadEliminated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.SquadEliminated)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rtech.liveapi.Player players = 3;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string category = 2;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SquadEliminated::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SquadEliminated::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SquadEliminated::GetClassData() const { return &_class_data_; }


void SquadEliminated::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SquadEliminated*>(&to_msg);
  auto& from = static_cast<const SquadEliminated&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.SquadEliminated)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  if (!from._internal_category().empty()) {
    _this->_internal_set_category(from._internal_category());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SquadEliminated::CopyFrom(const SquadEliminated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.SquadEliminated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SquadEliminated::IsInitialized() const {
  return true;
}

void SquadEliminated::InternalSwap(SquadEliminated* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SquadEliminated::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[22]);
}

// ===================================================================

class GibraltarShieldAbsorbed::_Internal {
 public:
  static const ::rtech::liveapi::Player& attacker(const GibraltarShieldAbsorbed* msg);
  static const ::rtech::liveapi::Player& victim(const GibraltarShieldAbsorbed* msg);
};

const ::rtech::liveapi::Player&
GibraltarShieldAbsorbed::_Internal::attacker(const GibraltarShieldAbsorbed* msg) {
  return *msg->_impl_.attacker_;
}
const ::rtech::liveapi::Player&
GibraltarShieldAbsorbed::_Internal::victim(const GibraltarShieldAbsorbed* msg) {
  return *msg->_impl_.victim_;
}
GibraltarShieldAbsorbed::GibraltarShieldAbsorbed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.GibraltarShieldAbsorbed)
}
GibraltarShieldAbsorbed::GibraltarShieldAbsorbed(const GibraltarShieldAbsorbed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GibraltarShieldAbsorbed* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.attacker_){nullptr}
    , decltype(_impl_.victim_){nullptr}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.damageinflicted_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_attacker()) {
    _this->_impl_.attacker_ = new ::rtech::liveapi::Player(*from._impl_.attacker_);
  }
  if (from._internal_has_victim()) {
    _this->_impl_.victim_ = new ::rtech::liveapi::Player(*from._impl_.victim_);
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.damageinflicted_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.damageinflicted_));
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.GibraltarShieldAbsorbed)
}

inline void GibraltarShieldAbsorbed::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.attacker_){nullptr}
    , decltype(_impl_.victim_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.damageinflicted_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GibraltarShieldAbsorbed::~GibraltarShieldAbsorbed() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.GibraltarShieldAbsorbed)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GibraltarShieldAbsorbed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.category_.Destroy();
  if (this != internal_default_instance()) delete _impl_.attacker_;
  if (this != internal_default_instance()) delete _impl_.victim_;
}

void GibraltarShieldAbsorbed::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GibraltarShieldAbsorbed::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.GibraltarShieldAbsorbed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.category_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.attacker_ != nullptr) {
    delete _impl_.attacker_;
  }
  _impl_.attacker_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.victim_ != nullptr) {
    delete _impl_.victim_;
  }
  _impl_.victim_ = nullptr;
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.damageinflicted_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.damageinflicted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GibraltarShieldAbsorbed::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.GibraltarShieldAbsorbed.category"));
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Player attacker = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_attacker(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Player victim = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_victim(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 damageInflicted = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.damageinflicted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GibraltarShieldAbsorbed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.GibraltarShieldAbsorbed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string category = 2;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.GibraltarShieldAbsorbed.category");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_category(), target);
  }

  // .rtech.liveapi.Player attacker = 3;
  if (this->_internal_has_attacker()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::attacker(this),
        _Internal::attacker(this).GetCachedSize(), target, stream);
  }

  // .rtech.liveapi.Player victim = 4;
  if (this->_internal_has_victim()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::victim(this),
        _Internal::victim(this).GetCachedSize(), target, stream);
  }

  // uint32 damageInflicted = 6;
  if (this->_internal_damageinflicted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_damageinflicted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.GibraltarShieldAbsorbed)
  return target;
}

size_t GibraltarShieldAbsorbed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.GibraltarShieldAbsorbed)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string category = 2;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // .rtech.liveapi.Player attacker = 3;
  if (this->_internal_has_attacker()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.attacker_);
  }

  // .rtech.liveapi.Player victim = 4;
  if (this->_internal_has_victim()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.victim_);
  }

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // uint32 damageInflicted = 6;
  if (this->_internal_damageinflicted() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_damageinflicted());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GibraltarShieldAbsorbed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GibraltarShieldAbsorbed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GibraltarShieldAbsorbed::GetClassData() const { return &_class_data_; }


void GibraltarShieldAbsorbed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GibraltarShieldAbsorbed*>(&to_msg);
  auto& from = static_cast<const GibraltarShieldAbsorbed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.GibraltarShieldAbsorbed)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_category().empty()) {
    _this->_internal_set_category(from._internal_category());
  }
  if (from._internal_has_attacker()) {
    _this->_internal_mutable_attacker()->::rtech::liveapi::Player::MergeFrom(
        from._internal_attacker());
  }
  if (from._internal_has_victim()) {
    _this->_internal_mutable_victim()->::rtech::liveapi::Player::MergeFrom(
        from._internal_victim());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_damageinflicted() != 0) {
    _this->_internal_set_damageinflicted(from._internal_damageinflicted());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GibraltarShieldAbsorbed::CopyFrom(const GibraltarShieldAbsorbed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.GibraltarShieldAbsorbed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GibraltarShieldAbsorbed::IsInitialized() const {
  return true;
}

void GibraltarShieldAbsorbed::InternalSwap(GibraltarShieldAbsorbed* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GibraltarShieldAbsorbed, _impl_.damageinflicted_)
      + sizeof(GibraltarShieldAbsorbed::_impl_.damageinflicted_)
      - PROTOBUF_FIELD_OFFSET(GibraltarShieldAbsorbed, _impl_.attacker_)>(
          reinterpret_cast<char*>(&_impl_.attacker_),
          reinterpret_cast<char*>(&other->_impl_.attacker_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GibraltarShieldAbsorbed::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[23]);
}

// ===================================================================

class PlayerRespawnTeam::_Internal {
 public:
  static const ::rtech::liveapi::Player& player(const PlayerRespawnTeam* msg);
};

const ::rtech::liveapi::Player&
PlayerRespawnTeam::_Internal::player(const PlayerRespawnTeam* msg) {
  return *msg->_impl_.player_;
}
PlayerRespawnTeam::PlayerRespawnTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.PlayerRespawnTeam)
}
PlayerRespawnTeam::PlayerRespawnTeam(const PlayerRespawnTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerRespawnTeam* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.respawned_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  _impl_.respawned_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.respawned_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_respawned().empty()) {
    _this->_impl_.respawned_.Set(from._internal_respawned(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::rtech::liveapi::Player(*from._impl_.player_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.PlayerRespawnTeam)
}

inline void PlayerRespawnTeam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.respawned_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.respawned_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.respawned_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerRespawnTeam::~PlayerRespawnTeam() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.PlayerRespawnTeam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerRespawnTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.category_.Destroy();
  _impl_.respawned_.Destroy();
  if (this != internal_default_instance()) delete _impl_.player_;
}

void PlayerRespawnTeam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerRespawnTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.PlayerRespawnTeam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.category_.ClearToEmpty();
  _impl_.respawned_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  _impl_.timestamp_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerRespawnTeam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.PlayerRespawnTeam.category"));
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Player player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string respawned = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_respawned();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.PlayerRespawnTeam.respawned"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerRespawnTeam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.PlayerRespawnTeam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string category = 2;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.PlayerRespawnTeam.category");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_category(), target);
  }

  // .rtech.liveapi.Player player = 3;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // string respawned = 4;
  if (!this->_internal_respawned().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_respawned().data(), static_cast<int>(this->_internal_respawned().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.PlayerRespawnTeam.respawned");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_respawned(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.PlayerRespawnTeam)
  return target;
}

size_t PlayerRespawnTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.PlayerRespawnTeam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string category = 2;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // string respawned = 4;
  if (!this->_internal_respawned().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_respawned());
  }

  // .rtech.liveapi.Player player = 3;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerRespawnTeam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerRespawnTeam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerRespawnTeam::GetClassData() const { return &_class_data_; }


void PlayerRespawnTeam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerRespawnTeam*>(&to_msg);
  auto& from = static_cast<const PlayerRespawnTeam&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.PlayerRespawnTeam)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_category().empty()) {
    _this->_internal_set_category(from._internal_category());
  }
  if (!from._internal_respawned().empty()) {
    _this->_internal_set_respawned(from._internal_respawned());
  }
  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::rtech::liveapi::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerRespawnTeam::CopyFrom(const PlayerRespawnTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.PlayerRespawnTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRespawnTeam::IsInitialized() const {
  return true;
}

void PlayerRespawnTeam::InternalSwap(PlayerRespawnTeam* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.respawned_, lhs_arena,
      &other->_impl_.respawned_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerRespawnTeam, _impl_.timestamp_)
      + sizeof(PlayerRespawnTeam::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(PlayerRespawnTeam, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerRespawnTeam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[24]);
}

// ===================================================================

class PlayerRevive::_Internal {
 public:
  static const ::rtech::liveapi::Player& player(const PlayerRevive* msg);
  static const ::rtech::liveapi::Player& revived(const PlayerRevive* msg);
};

const ::rtech::liveapi::Player&
PlayerRevive::_Internal::player(const PlayerRevive* msg) {
  return *msg->_impl_.player_;
}
const ::rtech::liveapi::Player&
PlayerRevive::_Internal::revived(const PlayerRevive* msg) {
  return *msg->_impl_.revived_;
}
PlayerRevive::PlayerRevive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.PlayerRevive)
}
PlayerRevive::PlayerRevive(const PlayerRevive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerRevive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.revived_){nullptr}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::rtech::liveapi::Player(*from._impl_.player_);
  }
  if (from._internal_has_revived()) {
    _this->_impl_.revived_ = new ::rtech::liveapi::Player(*from._impl_.revived_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.PlayerRevive)
}

inline void PlayerRevive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.revived_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerRevive::~PlayerRevive() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.PlayerRevive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerRevive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.category_.Destroy();
  if (this != internal_default_instance()) delete _impl_.player_;
  if (this != internal_default_instance()) delete _impl_.revived_;
}

void PlayerRevive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerRevive::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.PlayerRevive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.category_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.revived_ != nullptr) {
    delete _impl_.revived_;
  }
  _impl_.revived_ = nullptr;
  _impl_.timestamp_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerRevive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.PlayerRevive.category"));
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Player player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Player revived = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_revived(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerRevive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.PlayerRevive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string category = 2;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.PlayerRevive.category");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_category(), target);
  }

  // .rtech.liveapi.Player player = 3;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // .rtech.liveapi.Player revived = 4;
  if (this->_internal_has_revived()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::revived(this),
        _Internal::revived(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.PlayerRevive)
  return target;
}

size_t PlayerRevive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.PlayerRevive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string category = 2;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // .rtech.liveapi.Player player = 3;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // .rtech.liveapi.Player revived = 4;
  if (this->_internal_has_revived()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.revived_);
  }

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerRevive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerRevive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerRevive::GetClassData() const { return &_class_data_; }


void PlayerRevive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerRevive*>(&to_msg);
  auto& from = static_cast<const PlayerRevive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.PlayerRevive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_category().empty()) {
    _this->_internal_set_category(from._internal_category());
  }
  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::rtech::liveapi::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_has_revived()) {
    _this->_internal_mutable_revived()->::rtech::liveapi::Player::MergeFrom(
        from._internal_revived());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerRevive::CopyFrom(const PlayerRevive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.PlayerRevive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRevive::IsInitialized() const {
  return true;
}

void PlayerRevive::InternalSwap(PlayerRevive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerRevive, _impl_.timestamp_)
      + sizeof(PlayerRevive::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(PlayerRevive, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerRevive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[25]);
}

// ===================================================================

class ArenasItemSelected::_Internal {
 public:
  static const ::rtech::liveapi::Player& player(const ArenasItemSelected* msg);
};

const ::rtech::liveapi::Player&
ArenasItemSelected::_Internal::player(const ArenasItemSelected* msg) {
  return *msg->_impl_.player_;
}
ArenasItemSelected::ArenasItemSelected(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.ArenasItemSelected)
}
ArenasItemSelected::ArenasItemSelected(const ArenasItemSelected& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ArenasItemSelected* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.item_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.quantity_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  _impl_.item_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.item_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_item().empty()) {
    _this->_impl_.item_.Set(from._internal_item(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::rtech::liveapi::Player(*from._impl_.player_);
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.quantity_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.quantity_));
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.ArenasItemSelected)
}

inline void ArenasItemSelected::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.item_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.quantity_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.item_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.item_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ArenasItemSelected::~ArenasItemSelected() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.ArenasItemSelected)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ArenasItemSelected::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.category_.Destroy();
  _impl_.item_.Destroy();
  if (this != internal_default_instance()) delete _impl_.player_;
}

void ArenasItemSelected::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ArenasItemSelected::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.ArenasItemSelected)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.category_.ClearToEmpty();
  _impl_.item_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.quantity_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.quantity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArenasItemSelected::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.ArenasItemSelected.category"));
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Player player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string item = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_item();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.ArenasItemSelected.item"));
        } else
          goto handle_unusual;
        continue;
      // int32 quantity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ArenasItemSelected::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.ArenasItemSelected)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string category = 2;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.ArenasItemSelected.category");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_category(), target);
  }

  // .rtech.liveapi.Player player = 3;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // string item = 4;
  if (!this->_internal_item().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_item().data(), static_cast<int>(this->_internal_item().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.ArenasItemSelected.item");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_item(), target);
  }

  // int32 quantity = 5;
  if (this->_internal_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.ArenasItemSelected)
  return target;
}

size_t ArenasItemSelected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.ArenasItemSelected)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string category = 2;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // string item = 4;
  if (!this->_internal_item().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_item());
  }

  // .rtech.liveapi.Player player = 3;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // int32 quantity = 5;
  if (this->_internal_quantity() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quantity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ArenasItemSelected::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ArenasItemSelected::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ArenasItemSelected::GetClassData() const { return &_class_data_; }


void ArenasItemSelected::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ArenasItemSelected*>(&to_msg);
  auto& from = static_cast<const ArenasItemSelected&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.ArenasItemSelected)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_category().empty()) {
    _this->_internal_set_category(from._internal_category());
  }
  if (!from._internal_item().empty()) {
    _this->_internal_set_item(from._internal_item());
  }
  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::rtech::liveapi::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_quantity() != 0) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ArenasItemSelected::CopyFrom(const ArenasItemSelected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.ArenasItemSelected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenasItemSelected::IsInitialized() const {
  return true;
}

void ArenasItemSelected::InternalSwap(ArenasItemSelected* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.item_, lhs_arena,
      &other->_impl_.item_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ArenasItemSelected, _impl_.quantity_)
      + sizeof(ArenasItemSelected::_impl_.quantity_)
      - PROTOBUF_FIELD_OFFSET(ArenasItemSelected, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ArenasItemSelected::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[26]);
}

// ===================================================================

class ArenasItemDeselected::_Internal {
 public:
  static const ::rtech::liveapi::Player& player(const ArenasItemDeselected* msg);
};

const ::rtech::liveapi::Player&
ArenasItemDeselected::_Internal::player(const ArenasItemDeselected* msg) {
  return *msg->_impl_.player_;
}
ArenasItemDeselected::ArenasItemDeselected(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.ArenasItemDeselected)
}
ArenasItemDeselected::ArenasItemDeselected(const ArenasItemDeselected& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ArenasItemDeselected* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.item_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.quantity_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  _impl_.item_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.item_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_item().empty()) {
    _this->_impl_.item_.Set(from._internal_item(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::rtech::liveapi::Player(*from._impl_.player_);
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.quantity_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.quantity_));
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.ArenasItemDeselected)
}

inline void ArenasItemDeselected::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.item_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.quantity_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.item_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.item_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ArenasItemDeselected::~ArenasItemDeselected() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.ArenasItemDeselected)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ArenasItemDeselected::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.category_.Destroy();
  _impl_.item_.Destroy();
  if (this != internal_default_instance()) delete _impl_.player_;
}

void ArenasItemDeselected::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ArenasItemDeselected::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.ArenasItemDeselected)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.category_.ClearToEmpty();
  _impl_.item_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.quantity_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.quantity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArenasItemDeselected::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.ArenasItemDeselected.category"));
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Player player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string item = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_item();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.ArenasItemDeselected.item"));
        } else
          goto handle_unusual;
        continue;
      // int32 quantity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ArenasItemDeselected::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.ArenasItemDeselected)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string category = 2;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.ArenasItemDeselected.category");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_category(), target);
  }

  // .rtech.liveapi.Player player = 3;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // string item = 4;
  if (!this->_internal_item().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_item().data(), static_cast<int>(this->_internal_item().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.ArenasItemDeselected.item");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_item(), target);
  }

  // int32 quantity = 5;
  if (this->_internal_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.ArenasItemDeselected)
  return target;
}

size_t ArenasItemDeselected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.ArenasItemDeselected)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string category = 2;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // string item = 4;
  if (!this->_internal_item().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_item());
  }

  // .rtech.liveapi.Player player = 3;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // int32 quantity = 5;
  if (this->_internal_quantity() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quantity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ArenasItemDeselected::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ArenasItemDeselected::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ArenasItemDeselected::GetClassData() const { return &_class_data_; }


void ArenasItemDeselected::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ArenasItemDeselected*>(&to_msg);
  auto& from = static_cast<const ArenasItemDeselected&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.ArenasItemDeselected)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_category().empty()) {
    _this->_internal_set_category(from._internal_category());
  }
  if (!from._internal_item().empty()) {
    _this->_internal_set_item(from._internal_item());
  }
  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::rtech::liveapi::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_quantity() != 0) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ArenasItemDeselected::CopyFrom(const ArenasItemDeselected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.ArenasItemDeselected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenasItemDeselected::IsInitialized() const {
  return true;
}

void ArenasItemDeselected::InternalSwap(ArenasItemDeselected* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.item_, lhs_arena,
      &other->_impl_.item_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ArenasItemDeselected, _impl_.quantity_)
      + sizeof(ArenasItemDeselected::_impl_.quantity_)
      - PROTOBUF_FIELD_OFFSET(ArenasItemDeselected, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ArenasItemDeselected::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[27]);
}

// ===================================================================

class InventoryPickUp::_Internal {
 public:
  static const ::rtech::liveapi::Player& player(const InventoryPickUp* msg);
};

const ::rtech::liveapi::Player&
InventoryPickUp::_Internal::player(const InventoryPickUp* msg) {
  return *msg->_impl_.player_;
}
InventoryPickUp::InventoryPickUp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.InventoryPickUp)
}
InventoryPickUp::InventoryPickUp(const InventoryPickUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InventoryPickUp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.item_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.quantity_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  _impl_.item_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.item_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_item().empty()) {
    _this->_impl_.item_.Set(from._internal_item(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::rtech::liveapi::Player(*from._impl_.player_);
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.quantity_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.quantity_));
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.InventoryPickUp)
}

inline void InventoryPickUp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.item_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.quantity_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.item_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.item_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InventoryPickUp::~InventoryPickUp() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.InventoryPickUp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InventoryPickUp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.category_.Destroy();
  _impl_.item_.Destroy();
  if (this != internal_default_instance()) delete _impl_.player_;
}

void InventoryPickUp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InventoryPickUp::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.InventoryPickUp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.category_.ClearToEmpty();
  _impl_.item_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.quantity_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.quantity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InventoryPickUp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.InventoryPickUp.category"));
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Player player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string item = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_item();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.InventoryPickUp.item"));
        } else
          goto handle_unusual;
        continue;
      // int32 quantity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InventoryPickUp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.InventoryPickUp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string category = 2;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.InventoryPickUp.category");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_category(), target);
  }

  // .rtech.liveapi.Player player = 3;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // string item = 4;
  if (!this->_internal_item().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_item().data(), static_cast<int>(this->_internal_item().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.InventoryPickUp.item");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_item(), target);
  }

  // int32 quantity = 5;
  if (this->_internal_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.InventoryPickUp)
  return target;
}

size_t InventoryPickUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.InventoryPickUp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string category = 2;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // string item = 4;
  if (!this->_internal_item().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_item());
  }

  // .rtech.liveapi.Player player = 3;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // int32 quantity = 5;
  if (this->_internal_quantity() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quantity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InventoryPickUp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InventoryPickUp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InventoryPickUp::GetClassData() const { return &_class_data_; }


void InventoryPickUp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InventoryPickUp*>(&to_msg);
  auto& from = static_cast<const InventoryPickUp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.InventoryPickUp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_category().empty()) {
    _this->_internal_set_category(from._internal_category());
  }
  if (!from._internal_item().empty()) {
    _this->_internal_set_item(from._internal_item());
  }
  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::rtech::liveapi::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_quantity() != 0) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InventoryPickUp::CopyFrom(const InventoryPickUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.InventoryPickUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InventoryPickUp::IsInitialized() const {
  return true;
}

void InventoryPickUp::InternalSwap(InventoryPickUp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.item_, lhs_arena,
      &other->_impl_.item_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InventoryPickUp, _impl_.quantity_)
      + sizeof(InventoryPickUp::_impl_.quantity_)
      - PROTOBUF_FIELD_OFFSET(InventoryPickUp, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InventoryPickUp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[28]);
}

// ===================================================================

class InventoryDrop::_Internal {
 public:
  static const ::rtech::liveapi::Player& player(const InventoryDrop* msg);
};

const ::rtech::liveapi::Player&
InventoryDrop::_Internal::player(const InventoryDrop* msg) {
  return *msg->_impl_.player_;
}
InventoryDrop::InventoryDrop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.InventoryDrop)
}
InventoryDrop::InventoryDrop(const InventoryDrop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InventoryDrop* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.extradata_){from._impl_.extradata_}
    , decltype(_impl_.category_){}
    , decltype(_impl_.item_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.quantity_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  _impl_.item_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.item_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_item().empty()) {
    _this->_impl_.item_.Set(from._internal_item(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::rtech::liveapi::Player(*from._impl_.player_);
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.quantity_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.quantity_));
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.InventoryDrop)
}

inline void InventoryDrop::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.extradata_){arena}
    , decltype(_impl_.category_){}
    , decltype(_impl_.item_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.quantity_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.item_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.item_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InventoryDrop::~InventoryDrop() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.InventoryDrop)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InventoryDrop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.extradata_.~RepeatedPtrField();
  _impl_.category_.Destroy();
  _impl_.item_.Destroy();
  if (this != internal_default_instance()) delete _impl_.player_;
}

void InventoryDrop::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InventoryDrop::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.InventoryDrop)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.extradata_.Clear();
  _impl_.category_.ClearToEmpty();
  _impl_.item_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.quantity_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.quantity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InventoryDrop::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.InventoryDrop.category"));
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Player player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string item = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_item();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.InventoryDrop.item"));
        } else
          goto handle_unusual;
        continue;
      // int32 quantity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string extraData = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_extradata();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.InventoryDrop.extraData"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InventoryDrop::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.InventoryDrop)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string category = 2;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.InventoryDrop.category");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_category(), target);
  }

  // .rtech.liveapi.Player player = 3;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // string item = 4;
  if (!this->_internal_item().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_item().data(), static_cast<int>(this->_internal_item().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.InventoryDrop.item");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_item(), target);
  }

  // int32 quantity = 5;
  if (this->_internal_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_quantity(), target);
  }

  // repeated string extraData = 6;
  for (int i = 0, n = this->_internal_extradata_size(); i < n; i++) {
    const auto& s = this->_internal_extradata(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.InventoryDrop.extraData");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.InventoryDrop)
  return target;
}

size_t InventoryDrop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.InventoryDrop)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string extraData = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.extradata_.size());
  for (int i = 0, n = _impl_.extradata_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.extradata_.Get(i));
  }

  // string category = 2;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // string item = 4;
  if (!this->_internal_item().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_item());
  }

  // .rtech.liveapi.Player player = 3;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // int32 quantity = 5;
  if (this->_internal_quantity() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quantity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InventoryDrop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InventoryDrop::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InventoryDrop::GetClassData() const { return &_class_data_; }


void InventoryDrop::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InventoryDrop*>(&to_msg);
  auto& from = static_cast<const InventoryDrop&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.InventoryDrop)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.extradata_.MergeFrom(from._impl_.extradata_);
  if (!from._internal_category().empty()) {
    _this->_internal_set_category(from._internal_category());
  }
  if (!from._internal_item().empty()) {
    _this->_internal_set_item(from._internal_item());
  }
  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::rtech::liveapi::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_quantity() != 0) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InventoryDrop::CopyFrom(const InventoryDrop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.InventoryDrop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InventoryDrop::IsInitialized() const {
  return true;
}

void InventoryDrop::InternalSwap(InventoryDrop* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.extradata_.InternalSwap(&other->_impl_.extradata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.item_, lhs_arena,
      &other->_impl_.item_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InventoryDrop, _impl_.quantity_)
      + sizeof(InventoryDrop::_impl_.quantity_)
      - PROTOBUF_FIELD_OFFSET(InventoryDrop, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InventoryDrop::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[29]);
}

// ===================================================================

class InventoryUse::_Internal {
 public:
  static const ::rtech::liveapi::Player& player(const InventoryUse* msg);
};

const ::rtech::liveapi::Player&
InventoryUse::_Internal::player(const InventoryUse* msg) {
  return *msg->_impl_.player_;
}
InventoryUse::InventoryUse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.InventoryUse)
}
InventoryUse::InventoryUse(const InventoryUse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InventoryUse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.item_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.quantity_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  _impl_.item_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.item_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_item().empty()) {
    _this->_impl_.item_.Set(from._internal_item(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::rtech::liveapi::Player(*from._impl_.player_);
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.quantity_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.quantity_));
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.InventoryUse)
}

inline void InventoryUse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.item_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.quantity_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.item_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.item_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InventoryUse::~InventoryUse() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.InventoryUse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InventoryUse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.category_.Destroy();
  _impl_.item_.Destroy();
  if (this != internal_default_instance()) delete _impl_.player_;
}

void InventoryUse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InventoryUse::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.InventoryUse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.category_.ClearToEmpty();
  _impl_.item_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.quantity_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.quantity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InventoryUse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.InventoryUse.category"));
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Player player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string item = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_item();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.InventoryUse.item"));
        } else
          goto handle_unusual;
        continue;
      // int32 quantity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InventoryUse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.InventoryUse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string category = 2;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.InventoryUse.category");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_category(), target);
  }

  // .rtech.liveapi.Player player = 3;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // string item = 4;
  if (!this->_internal_item().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_item().data(), static_cast<int>(this->_internal_item().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.InventoryUse.item");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_item(), target);
  }

  // int32 quantity = 5;
  if (this->_internal_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.InventoryUse)
  return target;
}

size_t InventoryUse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.InventoryUse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string category = 2;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // string item = 4;
  if (!this->_internal_item().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_item());
  }

  // .rtech.liveapi.Player player = 3;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // int32 quantity = 5;
  if (this->_internal_quantity() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quantity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InventoryUse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InventoryUse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InventoryUse::GetClassData() const { return &_class_data_; }


void InventoryUse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InventoryUse*>(&to_msg);
  auto& from = static_cast<const InventoryUse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.InventoryUse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_category().empty()) {
    _this->_internal_set_category(from._internal_category());
  }
  if (!from._internal_item().empty()) {
    _this->_internal_set_item(from._internal_item());
  }
  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::rtech::liveapi::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_quantity() != 0) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InventoryUse::CopyFrom(const InventoryUse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.InventoryUse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InventoryUse::IsInitialized() const {
  return true;
}

void InventoryUse::InternalSwap(InventoryUse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.item_, lhs_arena,
      &other->_impl_.item_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InventoryUse, _impl_.quantity_)
      + sizeof(InventoryUse::_impl_.quantity_)
      - PROTOBUF_FIELD_OFFSET(InventoryUse, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InventoryUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[30]);
}

// ===================================================================

class BannerCollected::_Internal {
 public:
  static const ::rtech::liveapi::Player& player(const BannerCollected* msg);
  static const ::rtech::liveapi::Player& collected(const BannerCollected* msg);
};

const ::rtech::liveapi::Player&
BannerCollected::_Internal::player(const BannerCollected* msg) {
  return *msg->_impl_.player_;
}
const ::rtech::liveapi::Player&
BannerCollected::_Internal::collected(const BannerCollected* msg) {
  return *msg->_impl_.collected_;
}
BannerCollected::BannerCollected(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.BannerCollected)
}
BannerCollected::BannerCollected(const BannerCollected& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BannerCollected* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.collected_){nullptr}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::rtech::liveapi::Player(*from._impl_.player_);
  }
  if (from._internal_has_collected()) {
    _this->_impl_.collected_ = new ::rtech::liveapi::Player(*from._impl_.collected_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.BannerCollected)
}

inline void BannerCollected::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.collected_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BannerCollected::~BannerCollected() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.BannerCollected)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BannerCollected::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.category_.Destroy();
  if (this != internal_default_instance()) delete _impl_.player_;
  if (this != internal_default_instance()) delete _impl_.collected_;
}

void BannerCollected::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BannerCollected::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.BannerCollected)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.category_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.collected_ != nullptr) {
    delete _impl_.collected_;
  }
  _impl_.collected_ = nullptr;
  _impl_.timestamp_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BannerCollected::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.BannerCollected.category"));
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Player player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Player collected = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_collected(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BannerCollected::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.BannerCollected)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string category = 2;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.BannerCollected.category");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_category(), target);
  }

  // .rtech.liveapi.Player player = 3;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // .rtech.liveapi.Player collected = 4;
  if (this->_internal_has_collected()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::collected(this),
        _Internal::collected(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.BannerCollected)
  return target;
}

size_t BannerCollected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.BannerCollected)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string category = 2;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // .rtech.liveapi.Player player = 3;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // .rtech.liveapi.Player collected = 4;
  if (this->_internal_has_collected()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.collected_);
  }

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BannerCollected::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BannerCollected::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BannerCollected::GetClassData() const { return &_class_data_; }


void BannerCollected::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BannerCollected*>(&to_msg);
  auto& from = static_cast<const BannerCollected&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.BannerCollected)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_category().empty()) {
    _this->_internal_set_category(from._internal_category());
  }
  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::rtech::liveapi::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_has_collected()) {
    _this->_internal_mutable_collected()->::rtech::liveapi::Player::MergeFrom(
        from._internal_collected());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BannerCollected::CopyFrom(const BannerCollected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.BannerCollected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BannerCollected::IsInitialized() const {
  return true;
}

void BannerCollected::InternalSwap(BannerCollected* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BannerCollected, _impl_.timestamp_)
      + sizeof(BannerCollected::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(BannerCollected, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BannerCollected::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[31]);
}

// ===================================================================

class PlayerAbilityUsed::_Internal {
 public:
  static const ::rtech::liveapi::Player& player(const PlayerAbilityUsed* msg);
};

const ::rtech::liveapi::Player&
PlayerAbilityUsed::_Internal::player(const PlayerAbilityUsed* msg) {
  return *msg->_impl_.player_;
}
PlayerAbilityUsed::PlayerAbilityUsed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.PlayerAbilityUsed)
}
PlayerAbilityUsed::PlayerAbilityUsed(const PlayerAbilityUsed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerAbilityUsed* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.linkedentity_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  _impl_.linkedentity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.linkedentity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_linkedentity().empty()) {
    _this->_impl_.linkedentity_.Set(from._internal_linkedentity(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::rtech::liveapi::Player(*from._impl_.player_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.PlayerAbilityUsed)
}

inline void PlayerAbilityUsed::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.linkedentity_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.linkedentity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.linkedentity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerAbilityUsed::~PlayerAbilityUsed() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.PlayerAbilityUsed)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerAbilityUsed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.category_.Destroy();
  _impl_.linkedentity_.Destroy();
  if (this != internal_default_instance()) delete _impl_.player_;
}

void PlayerAbilityUsed::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerAbilityUsed::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.PlayerAbilityUsed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.category_.ClearToEmpty();
  _impl_.linkedentity_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  _impl_.timestamp_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerAbilityUsed::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.PlayerAbilityUsed.category"));
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Player player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string linkedEntity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_linkedentity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.PlayerAbilityUsed.linkedEntity"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerAbilityUsed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.PlayerAbilityUsed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string category = 2;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.PlayerAbilityUsed.category");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_category(), target);
  }

  // .rtech.liveapi.Player player = 3;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // string linkedEntity = 4;
  if (!this->_internal_linkedentity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_linkedentity().data(), static_cast<int>(this->_internal_linkedentity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.PlayerAbilityUsed.linkedEntity");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_linkedentity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.PlayerAbilityUsed)
  return target;
}

size_t PlayerAbilityUsed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.PlayerAbilityUsed)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string category = 2;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // string linkedEntity = 4;
  if (!this->_internal_linkedentity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_linkedentity());
  }

  // .rtech.liveapi.Player player = 3;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerAbilityUsed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerAbilityUsed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerAbilityUsed::GetClassData() const { return &_class_data_; }


void PlayerAbilityUsed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerAbilityUsed*>(&to_msg);
  auto& from = static_cast<const PlayerAbilityUsed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.PlayerAbilityUsed)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_category().empty()) {
    _this->_internal_set_category(from._internal_category());
  }
  if (!from._internal_linkedentity().empty()) {
    _this->_internal_set_linkedentity(from._internal_linkedentity());
  }
  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::rtech::liveapi::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerAbilityUsed::CopyFrom(const PlayerAbilityUsed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.PlayerAbilityUsed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerAbilityUsed::IsInitialized() const {
  return true;
}

void PlayerAbilityUsed::InternalSwap(PlayerAbilityUsed* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.linkedentity_, lhs_arena,
      &other->_impl_.linkedentity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerAbilityUsed, _impl_.timestamp_)
      + sizeof(PlayerAbilityUsed::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(PlayerAbilityUsed, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerAbilityUsed::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[32]);
}

// ===================================================================

class ZiplineUsed::_Internal {
 public:
  static const ::rtech::liveapi::Player& player(const ZiplineUsed* msg);
};

const ::rtech::liveapi::Player&
ZiplineUsed::_Internal::player(const ZiplineUsed* msg) {
  return *msg->_impl_.player_;
}
ZiplineUsed::ZiplineUsed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.ZiplineUsed)
}
ZiplineUsed::ZiplineUsed(const ZiplineUsed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ZiplineUsed* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.linkedentity_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  _impl_.linkedentity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.linkedentity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_linkedentity().empty()) {
    _this->_impl_.linkedentity_.Set(from._internal_linkedentity(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::rtech::liveapi::Player(*from._impl_.player_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.ZiplineUsed)
}

inline void ZiplineUsed::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.linkedentity_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.linkedentity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.linkedentity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ZiplineUsed::~ZiplineUsed() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.ZiplineUsed)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ZiplineUsed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.category_.Destroy();
  _impl_.linkedentity_.Destroy();
  if (this != internal_default_instance()) delete _impl_.player_;
}

void ZiplineUsed::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ZiplineUsed::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.ZiplineUsed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.category_.ClearToEmpty();
  _impl_.linkedentity_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  _impl_.timestamp_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZiplineUsed::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.ZiplineUsed.category"));
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Player player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string linkedEntity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_linkedentity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.ZiplineUsed.linkedEntity"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ZiplineUsed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.ZiplineUsed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string category = 2;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.ZiplineUsed.category");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_category(), target);
  }

  // .rtech.liveapi.Player player = 3;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // string linkedEntity = 4;
  if (!this->_internal_linkedentity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_linkedentity().data(), static_cast<int>(this->_internal_linkedentity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.ZiplineUsed.linkedEntity");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_linkedentity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.ZiplineUsed)
  return target;
}

size_t ZiplineUsed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.ZiplineUsed)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string category = 2;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // string linkedEntity = 4;
  if (!this->_internal_linkedentity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_linkedentity());
  }

  // .rtech.liveapi.Player player = 3;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ZiplineUsed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ZiplineUsed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ZiplineUsed::GetClassData() const { return &_class_data_; }


void ZiplineUsed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ZiplineUsed*>(&to_msg);
  auto& from = static_cast<const ZiplineUsed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.ZiplineUsed)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_category().empty()) {
    _this->_internal_set_category(from._internal_category());
  }
  if (!from._internal_linkedentity().empty()) {
    _this->_internal_set_linkedentity(from._internal_linkedentity());
  }
  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::rtech::liveapi::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ZiplineUsed::CopyFrom(const ZiplineUsed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.ZiplineUsed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZiplineUsed::IsInitialized() const {
  return true;
}

void ZiplineUsed::InternalSwap(ZiplineUsed* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.linkedentity_, lhs_arena,
      &other->_impl_.linkedentity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ZiplineUsed, _impl_.timestamp_)
      + sizeof(ZiplineUsed::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(ZiplineUsed, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ZiplineUsed::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[33]);
}

// ===================================================================

class GrenadeThrown::_Internal {
 public:
  static const ::rtech::liveapi::Player& player(const GrenadeThrown* msg);
};

const ::rtech::liveapi::Player&
GrenadeThrown::_Internal::player(const GrenadeThrown* msg) {
  return *msg->_impl_.player_;
}
GrenadeThrown::GrenadeThrown(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.GrenadeThrown)
}
GrenadeThrown::GrenadeThrown(const GrenadeThrown& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GrenadeThrown* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.linkedentity_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  _impl_.linkedentity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.linkedentity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_linkedentity().empty()) {
    _this->_impl_.linkedentity_.Set(from._internal_linkedentity(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::rtech::liveapi::Player(*from._impl_.player_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.GrenadeThrown)
}

inline void GrenadeThrown::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.linkedentity_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.linkedentity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.linkedentity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GrenadeThrown::~GrenadeThrown() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.GrenadeThrown)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GrenadeThrown::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.category_.Destroy();
  _impl_.linkedentity_.Destroy();
  if (this != internal_default_instance()) delete _impl_.player_;
}

void GrenadeThrown::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GrenadeThrown::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.GrenadeThrown)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.category_.ClearToEmpty();
  _impl_.linkedentity_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  _impl_.timestamp_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GrenadeThrown::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.GrenadeThrown.category"));
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Player player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string linkedEntity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_linkedentity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.GrenadeThrown.linkedEntity"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GrenadeThrown::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.GrenadeThrown)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string category = 2;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.GrenadeThrown.category");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_category(), target);
  }

  // .rtech.liveapi.Player player = 3;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // string linkedEntity = 4;
  if (!this->_internal_linkedentity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_linkedentity().data(), static_cast<int>(this->_internal_linkedentity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.GrenadeThrown.linkedEntity");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_linkedentity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.GrenadeThrown)
  return target;
}

size_t GrenadeThrown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.GrenadeThrown)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string category = 2;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // string linkedEntity = 4;
  if (!this->_internal_linkedentity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_linkedentity());
  }

  // .rtech.liveapi.Player player = 3;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GrenadeThrown::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GrenadeThrown::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GrenadeThrown::GetClassData() const { return &_class_data_; }


void GrenadeThrown::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GrenadeThrown*>(&to_msg);
  auto& from = static_cast<const GrenadeThrown&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.GrenadeThrown)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_category().empty()) {
    _this->_internal_set_category(from._internal_category());
  }
  if (!from._internal_linkedentity().empty()) {
    _this->_internal_set_linkedentity(from._internal_linkedentity());
  }
  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::rtech::liveapi::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GrenadeThrown::CopyFrom(const GrenadeThrown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.GrenadeThrown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrenadeThrown::IsInitialized() const {
  return true;
}

void GrenadeThrown::InternalSwap(GrenadeThrown* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.linkedentity_, lhs_arena,
      &other->_impl_.linkedentity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GrenadeThrown, _impl_.timestamp_)
      + sizeof(GrenadeThrown::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(GrenadeThrown, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GrenadeThrown::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[34]);
}

// ===================================================================

class BlackMarketAction::_Internal {
 public:
  static const ::rtech::liveapi::Player& player(const BlackMarketAction* msg);
};

const ::rtech::liveapi::Player&
BlackMarketAction::_Internal::player(const BlackMarketAction* msg) {
  return *msg->_impl_.player_;
}
BlackMarketAction::BlackMarketAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.BlackMarketAction)
}
BlackMarketAction::BlackMarketAction(const BlackMarketAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlackMarketAction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.item_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  _impl_.item_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.item_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_item().empty()) {
    _this->_impl_.item_.Set(from._internal_item(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::rtech::liveapi::Player(*from._impl_.player_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.BlackMarketAction)
}

inline void BlackMarketAction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.item_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.item_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.item_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlackMarketAction::~BlackMarketAction() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.BlackMarketAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlackMarketAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.category_.Destroy();
  _impl_.item_.Destroy();
  if (this != internal_default_instance()) delete _impl_.player_;
}

void BlackMarketAction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlackMarketAction::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.BlackMarketAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.category_.ClearToEmpty();
  _impl_.item_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  _impl_.timestamp_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlackMarketAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.BlackMarketAction.category"));
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Player player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string item = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_item();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.BlackMarketAction.item"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlackMarketAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.BlackMarketAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string category = 2;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.BlackMarketAction.category");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_category(), target);
  }

  // .rtech.liveapi.Player player = 3;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // string item = 4;
  if (!this->_internal_item().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_item().data(), static_cast<int>(this->_internal_item().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.BlackMarketAction.item");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_item(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.BlackMarketAction)
  return target;
}

size_t BlackMarketAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.BlackMarketAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string category = 2;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // string item = 4;
  if (!this->_internal_item().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_item());
  }

  // .rtech.liveapi.Player player = 3;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlackMarketAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlackMarketAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlackMarketAction::GetClassData() const { return &_class_data_; }


void BlackMarketAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlackMarketAction*>(&to_msg);
  auto& from = static_cast<const BlackMarketAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.BlackMarketAction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_category().empty()) {
    _this->_internal_set_category(from._internal_category());
  }
  if (!from._internal_item().empty()) {
    _this->_internal_set_item(from._internal_item());
  }
  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::rtech::liveapi::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlackMarketAction::CopyFrom(const BlackMarketAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.BlackMarketAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlackMarketAction::IsInitialized() const {
  return true;
}

void BlackMarketAction::InternalSwap(BlackMarketAction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.item_, lhs_arena,
      &other->_impl_.item_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlackMarketAction, _impl_.timestamp_)
      + sizeof(BlackMarketAction::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(BlackMarketAction, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlackMarketAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[35]);
}

// ===================================================================

class WraithPortal::_Internal {
 public:
  static const ::rtech::liveapi::Player& player(const WraithPortal* msg);
};

const ::rtech::liveapi::Player&
WraithPortal::_Internal::player(const WraithPortal* msg) {
  return *msg->_impl_.player_;
}
WraithPortal::WraithPortal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.WraithPortal)
}
WraithPortal::WraithPortal(const WraithPortal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WraithPortal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::rtech::liveapi::Player(*from._impl_.player_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.WraithPortal)
}

inline void WraithPortal::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WraithPortal::~WraithPortal() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.WraithPortal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WraithPortal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.category_.Destroy();
  if (this != internal_default_instance()) delete _impl_.player_;
}

void WraithPortal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WraithPortal::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.WraithPortal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.category_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  _impl_.timestamp_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WraithPortal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.WraithPortal.category"));
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Player player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WraithPortal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.WraithPortal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string category = 2;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.WraithPortal.category");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_category(), target);
  }

  // .rtech.liveapi.Player player = 3;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.WraithPortal)
  return target;
}

size_t WraithPortal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.WraithPortal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string category = 2;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // .rtech.liveapi.Player player = 3;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WraithPortal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WraithPortal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WraithPortal::GetClassData() const { return &_class_data_; }


void WraithPortal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WraithPortal*>(&to_msg);
  auto& from = static_cast<const WraithPortal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.WraithPortal)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_category().empty()) {
    _this->_internal_set_category(from._internal_category());
  }
  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::rtech::liveapi::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WraithPortal::CopyFrom(const WraithPortal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.WraithPortal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WraithPortal::IsInitialized() const {
  return true;
}

void WraithPortal::InternalSwap(WraithPortal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WraithPortal, _impl_.timestamp_)
      + sizeof(WraithPortal::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(WraithPortal, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WraithPortal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[36]);
}

// ===================================================================

class WarpGateUsed::_Internal {
 public:
  static const ::rtech::liveapi::Player& player(const WarpGateUsed* msg);
};

const ::rtech::liveapi::Player&
WarpGateUsed::_Internal::player(const WarpGateUsed* msg) {
  return *msg->_impl_.player_;
}
WarpGateUsed::WarpGateUsed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.WarpGateUsed)
}
WarpGateUsed::WarpGateUsed(const WarpGateUsed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WarpGateUsed* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::rtech::liveapi::Player(*from._impl_.player_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.WarpGateUsed)
}

inline void WarpGateUsed::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WarpGateUsed::~WarpGateUsed() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.WarpGateUsed)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WarpGateUsed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.category_.Destroy();
  if (this != internal_default_instance()) delete _impl_.player_;
}

void WarpGateUsed::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WarpGateUsed::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.WarpGateUsed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.category_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  _impl_.timestamp_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WarpGateUsed::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.WarpGateUsed.category"));
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Player player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WarpGateUsed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.WarpGateUsed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string category = 2;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.WarpGateUsed.category");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_category(), target);
  }

  // .rtech.liveapi.Player player = 3;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.WarpGateUsed)
  return target;
}

size_t WarpGateUsed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.WarpGateUsed)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string category = 2;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // .rtech.liveapi.Player player = 3;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WarpGateUsed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WarpGateUsed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WarpGateUsed::GetClassData() const { return &_class_data_; }


void WarpGateUsed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WarpGateUsed*>(&to_msg);
  auto& from = static_cast<const WarpGateUsed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.WarpGateUsed)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_category().empty()) {
    _this->_internal_set_category(from._internal_category());
  }
  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::rtech::liveapi::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WarpGateUsed::CopyFrom(const WarpGateUsed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.WarpGateUsed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarpGateUsed::IsInitialized() const {
  return true;
}

void WarpGateUsed::InternalSwap(WarpGateUsed* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WarpGateUsed, _impl_.timestamp_)
      + sizeof(WarpGateUsed::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(WarpGateUsed, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WarpGateUsed::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[37]);
}

// ===================================================================

class AmmoUsed::_Internal {
 public:
  static const ::rtech::liveapi::Player& player(const AmmoUsed* msg);
};

const ::rtech::liveapi::Player&
AmmoUsed::_Internal::player(const AmmoUsed* msg) {
  return *msg->_impl_.player_;
}
AmmoUsed::AmmoUsed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.AmmoUsed)
}
AmmoUsed::AmmoUsed(const AmmoUsed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AmmoUsed* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.ammotype_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.amountused_){}
    , decltype(_impl_.oldammocount_){}
    , decltype(_impl_.newammocount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ammotype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ammotype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ammotype().empty()) {
    _this->_impl_.ammotype_.Set(from._internal_ammotype(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::rtech::liveapi::Player(*from._impl_.player_);
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.newammocount_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.newammocount_));
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.AmmoUsed)
}

inline void AmmoUsed::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.ammotype_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.amountused_){0u}
    , decltype(_impl_.oldammocount_){0u}
    , decltype(_impl_.newammocount_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ammotype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ammotype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AmmoUsed::~AmmoUsed() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.AmmoUsed)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AmmoUsed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.category_.Destroy();
  _impl_.ammotype_.Destroy();
  if (this != internal_default_instance()) delete _impl_.player_;
}

void AmmoUsed::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AmmoUsed::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.AmmoUsed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.category_.ClearToEmpty();
  _impl_.ammotype_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.newammocount_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.newammocount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AmmoUsed::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.AmmoUsed.category"));
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Player player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ammoType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_ammotype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.AmmoUsed.ammoType"));
        } else
          goto handle_unusual;
        continue;
      // uint32 amountUsed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.amountused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 oldAmmoCount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.oldammocount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 newAmmoCount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.newammocount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AmmoUsed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.AmmoUsed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string category = 2;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.AmmoUsed.category");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_category(), target);
  }

  // .rtech.liveapi.Player player = 3;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // string ammoType = 4;
  if (!this->_internal_ammotype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ammotype().data(), static_cast<int>(this->_internal_ammotype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.AmmoUsed.ammoType");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ammotype(), target);
  }

  // uint32 amountUsed = 5;
  if (this->_internal_amountused() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_amountused(), target);
  }

  // uint32 oldAmmoCount = 6;
  if (this->_internal_oldammocount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_oldammocount(), target);
  }

  // uint32 newAmmoCount = 7;
  if (this->_internal_newammocount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_newammocount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.AmmoUsed)
  return target;
}

size_t AmmoUsed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.AmmoUsed)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string category = 2;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // string ammoType = 4;
  if (!this->_internal_ammotype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ammotype());
  }

  // .rtech.liveapi.Player player = 3;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // uint32 amountUsed = 5;
  if (this->_internal_amountused() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_amountused());
  }

  // uint32 oldAmmoCount = 6;
  if (this->_internal_oldammocount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_oldammocount());
  }

  // uint32 newAmmoCount = 7;
  if (this->_internal_newammocount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_newammocount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AmmoUsed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AmmoUsed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AmmoUsed::GetClassData() const { return &_class_data_; }


void AmmoUsed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AmmoUsed*>(&to_msg);
  auto& from = static_cast<const AmmoUsed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.AmmoUsed)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_category().empty()) {
    _this->_internal_set_category(from._internal_category());
  }
  if (!from._internal_ammotype().empty()) {
    _this->_internal_set_ammotype(from._internal_ammotype());
  }
  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::rtech::liveapi::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_amountused() != 0) {
    _this->_internal_set_amountused(from._internal_amountused());
  }
  if (from._internal_oldammocount() != 0) {
    _this->_internal_set_oldammocount(from._internal_oldammocount());
  }
  if (from._internal_newammocount() != 0) {
    _this->_internal_set_newammocount(from._internal_newammocount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AmmoUsed::CopyFrom(const AmmoUsed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.AmmoUsed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AmmoUsed::IsInitialized() const {
  return true;
}

void AmmoUsed::InternalSwap(AmmoUsed* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ammotype_, lhs_arena,
      &other->_impl_.ammotype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AmmoUsed, _impl_.newammocount_)
      + sizeof(AmmoUsed::_impl_.newammocount_)
      - PROTOBUF_FIELD_OFFSET(AmmoUsed, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AmmoUsed::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[38]);
}

// ===================================================================

class WeaponSwitched::_Internal {
 public:
  static const ::rtech::liveapi::Player& player(const WeaponSwitched* msg);
};

const ::rtech::liveapi::Player&
WeaponSwitched::_Internal::player(const WeaponSwitched* msg) {
  return *msg->_impl_.player_;
}
WeaponSwitched::WeaponSwitched(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.WeaponSwitched)
}
WeaponSwitched::WeaponSwitched(const WeaponSwitched& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WeaponSwitched* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.oldweapon_){}
    , decltype(_impl_.newweapon_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  _impl_.oldweapon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.oldweapon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oldweapon().empty()) {
    _this->_impl_.oldweapon_.Set(from._internal_oldweapon(), 
      _this->GetArenaForAllocation());
  }
  _impl_.newweapon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newweapon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_newweapon().empty()) {
    _this->_impl_.newweapon_.Set(from._internal_newweapon(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::rtech::liveapi::Player(*from._impl_.player_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.WeaponSwitched)
}

inline void WeaponSwitched::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.category_){}
    , decltype(_impl_.oldweapon_){}
    , decltype(_impl_.newweapon_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.oldweapon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.oldweapon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.newweapon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newweapon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WeaponSwitched::~WeaponSwitched() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.WeaponSwitched)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WeaponSwitched::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.category_.Destroy();
  _impl_.oldweapon_.Destroy();
  _impl_.newweapon_.Destroy();
  if (this != internal_default_instance()) delete _impl_.player_;
}

void WeaponSwitched::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WeaponSwitched::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.WeaponSwitched)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.category_.ClearToEmpty();
  _impl_.oldweapon_.ClearToEmpty();
  _impl_.newweapon_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  _impl_.timestamp_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WeaponSwitched::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.WeaponSwitched.category"));
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.Player player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string oldWeapon = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_oldweapon();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.WeaponSwitched.oldWeapon"));
        } else
          goto handle_unusual;
        continue;
      // string newWeapon = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_newweapon();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.WeaponSwitched.newWeapon"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WeaponSwitched::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.WeaponSwitched)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string category = 2;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.WeaponSwitched.category");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_category(), target);
  }

  // .rtech.liveapi.Player player = 3;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // string oldWeapon = 4;
  if (!this->_internal_oldweapon().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_oldweapon().data(), static_cast<int>(this->_internal_oldweapon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.WeaponSwitched.oldWeapon");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_oldweapon(), target);
  }

  // string newWeapon = 5;
  if (!this->_internal_newweapon().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_newweapon().data(), static_cast<int>(this->_internal_newweapon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.WeaponSwitched.newWeapon");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_newweapon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.WeaponSwitched)
  return target;
}

size_t WeaponSwitched::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.WeaponSwitched)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string category = 2;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // string oldWeapon = 4;
  if (!this->_internal_oldweapon().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_oldweapon());
  }

  // string newWeapon = 5;
  if (!this->_internal_newweapon().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newweapon());
  }

  // .rtech.liveapi.Player player = 3;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WeaponSwitched::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WeaponSwitched::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WeaponSwitched::GetClassData() const { return &_class_data_; }


void WeaponSwitched::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WeaponSwitched*>(&to_msg);
  auto& from = static_cast<const WeaponSwitched&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.WeaponSwitched)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_category().empty()) {
    _this->_internal_set_category(from._internal_category());
  }
  if (!from._internal_oldweapon().empty()) {
    _this->_internal_set_oldweapon(from._internal_oldweapon());
  }
  if (!from._internal_newweapon().empty()) {
    _this->_internal_set_newweapon(from._internal_newweapon());
  }
  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::rtech::liveapi::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WeaponSwitched::CopyFrom(const WeaponSwitched& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.WeaponSwitched)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponSwitched::IsInitialized() const {
  return true;
}

void WeaponSwitched::InternalSwap(WeaponSwitched* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.oldweapon_, lhs_arena,
      &other->_impl_.oldweapon_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.newweapon_, lhs_arena,
      &other->_impl_.newweapon_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WeaponSwitched, _impl_.timestamp_)
      + sizeof(WeaponSwitched::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(WeaponSwitched, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WeaponSwitched::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[39]);
}

// ===================================================================

class ChangeCamera::_Internal {
 public:
};

ChangeCamera::ChangeCamera(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.ChangeCamera)
}
ChangeCamera::ChangeCamera(const ChangeCamera& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChangeCamera* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.target_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_target();
  switch (from.target_case()) {
    case kPoi: {
      _this->_internal_set_poi(from._internal_poi());
      break;
    }
    case kName: {
      _this->_internal_set_name(from._internal_name());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.ChangeCamera)
}

inline void ChangeCamera::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.target_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_target();
}

ChangeCamera::~ChangeCamera() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.ChangeCamera)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChangeCamera::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_target()) {
    clear_target();
  }
}

void ChangeCamera::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChangeCamera::clear_target() {
// @@protoc_insertion_point(one_of_clear_start:rtech.liveapi.ChangeCamera)
  switch (target_case()) {
    case kPoi: {
      // No need to clear
      break;
    }
    case kName: {
      _impl_.target_.name_.Destroy();
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TARGET_NOT_SET;
}


void ChangeCamera::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.ChangeCamera)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_target();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeCamera::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rtech.liveapi.PlayerOfInterest poi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_poi(static_cast<::rtech::liveapi::PlayerOfInterest>(val));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.ChangeCamera.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChangeCamera::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.ChangeCamera)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .rtech.liveapi.PlayerOfInterest poi = 1;
  if (_internal_has_poi()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_poi(), target);
  }

  // string name = 2;
  if (_internal_has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.ChangeCamera.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.ChangeCamera)
  return target;
}

size_t ChangeCamera::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.ChangeCamera)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (target_case()) {
    // .rtech.liveapi.PlayerOfInterest poi = 1;
    case kPoi: {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_poi());
      break;
    }
    // string name = 2;
    case kName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChangeCamera::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChangeCamera::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChangeCamera::GetClassData() const { return &_class_data_; }


void ChangeCamera::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChangeCamera*>(&to_msg);
  auto& from = static_cast<const ChangeCamera&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.ChangeCamera)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.target_case()) {
    case kPoi: {
      _this->_internal_set_poi(from._internal_poi());
      break;
    }
    case kName: {
      _this->_internal_set_name(from._internal_name());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChangeCamera::CopyFrom(const ChangeCamera& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.ChangeCamera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeCamera::IsInitialized() const {
  return true;
}

void ChangeCamera::InternalSwap(ChangeCamera* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.target_, other->_impl_.target_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeCamera::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[40]);
}

// ===================================================================

class PauseToggle::_Internal {
 public:
};

PauseToggle::PauseToggle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.PauseToggle)
}
PauseToggle::PauseToggle(const PauseToggle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PauseToggle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pretimer_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pretimer_ = from._impl_.pretimer_;
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.PauseToggle)
}

inline void PauseToggle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pretimer_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PauseToggle::~PauseToggle() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.PauseToggle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PauseToggle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PauseToggle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PauseToggle::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.PauseToggle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pretimer_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PauseToggle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float preTimer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.pretimer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PauseToggle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.PauseToggle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float preTimer = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pretimer = this->_internal_pretimer();
  uint32_t raw_pretimer;
  memcpy(&raw_pretimer, &tmp_pretimer, sizeof(tmp_pretimer));
  if (raw_pretimer != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_pretimer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.PauseToggle)
  return target;
}

size_t PauseToggle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.PauseToggle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float preTimer = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pretimer = this->_internal_pretimer();
  uint32_t raw_pretimer;
  memcpy(&raw_pretimer, &tmp_pretimer, sizeof(tmp_pretimer));
  if (raw_pretimer != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PauseToggle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PauseToggle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PauseToggle::GetClassData() const { return &_class_data_; }


void PauseToggle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PauseToggle*>(&to_msg);
  auto& from = static_cast<const PauseToggle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.PauseToggle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pretimer = from._internal_pretimer();
  uint32_t raw_pretimer;
  memcpy(&raw_pretimer, &tmp_pretimer, sizeof(tmp_pretimer));
  if (raw_pretimer != 0) {
    _this->_internal_set_pretimer(from._internal_pretimer());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PauseToggle::CopyFrom(const PauseToggle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.PauseToggle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PauseToggle::IsInitialized() const {
  return true;
}

void PauseToggle::InternalSwap(PauseToggle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.pretimer_, other->_impl_.pretimer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PauseToggle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[41]);
}

// ===================================================================

class CustomMatch_CreateLobby::_Internal {
 public:
};

CustomMatch_CreateLobby::CustomMatch_CreateLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.CustomMatch_CreateLobby)
}
CustomMatch_CreateLobby::CustomMatch_CreateLobby(const CustomMatch_CreateLobby& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CustomMatch_CreateLobby* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.CustomMatch_CreateLobby)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CustomMatch_CreateLobby::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CustomMatch_CreateLobby::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CustomMatch_CreateLobby::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[42]);
}

// ===================================================================

class CustomMatch_JoinLobby::_Internal {
 public:
};

CustomMatch_JoinLobby::CustomMatch_JoinLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.CustomMatch_JoinLobby)
}
CustomMatch_JoinLobby::CustomMatch_JoinLobby(const CustomMatch_JoinLobby& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CustomMatch_JoinLobby* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roletoken_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.roletoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roletoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roletoken().empty()) {
    _this->_impl_.roletoken_.Set(from._internal_roletoken(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.CustomMatch_JoinLobby)
}

inline void CustomMatch_JoinLobby::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roletoken_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.roletoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roletoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CustomMatch_JoinLobby::~CustomMatch_JoinLobby() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.CustomMatch_JoinLobby)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CustomMatch_JoinLobby::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.roletoken_.Destroy();
}

void CustomMatch_JoinLobby::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CustomMatch_JoinLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.CustomMatch_JoinLobby)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.roletoken_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomMatch_JoinLobby::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string roleToken = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_roletoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.CustomMatch_JoinLobby.roleToken"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CustomMatch_JoinLobby::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.CustomMatch_JoinLobby)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string roleToken = 1;
  if (!this->_internal_roletoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roletoken().data(), static_cast<int>(this->_internal_roletoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.CustomMatch_JoinLobby.roleToken");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_roletoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.CustomMatch_JoinLobby)
  return target;
}

size_t CustomMatch_JoinLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.CustomMatch_JoinLobby)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roleToken = 1;
  if (!this->_internal_roletoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roletoken());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CustomMatch_JoinLobby::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CustomMatch_JoinLobby::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CustomMatch_JoinLobby::GetClassData() const { return &_class_data_; }


void CustomMatch_JoinLobby::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CustomMatch_JoinLobby*>(&to_msg);
  auto& from = static_cast<const CustomMatch_JoinLobby&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.CustomMatch_JoinLobby)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_roletoken().empty()) {
    _this->_internal_set_roletoken(from._internal_roletoken());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CustomMatch_JoinLobby::CopyFrom(const CustomMatch_JoinLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.CustomMatch_JoinLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomMatch_JoinLobby::IsInitialized() const {
  return true;
}

void CustomMatch_JoinLobby::InternalSwap(CustomMatch_JoinLobby* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.roletoken_, lhs_arena,
      &other->_impl_.roletoken_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomMatch_JoinLobby::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[43]);
}

// ===================================================================

class CustomMatch_LeaveLobby::_Internal {
 public:
};

CustomMatch_LeaveLobby::CustomMatch_LeaveLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.CustomMatch_LeaveLobby)
}
CustomMatch_LeaveLobby::CustomMatch_LeaveLobby(const CustomMatch_LeaveLobby& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CustomMatch_LeaveLobby* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.CustomMatch_LeaveLobby)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CustomMatch_LeaveLobby::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CustomMatch_LeaveLobby::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CustomMatch_LeaveLobby::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[44]);
}

// ===================================================================

class CustomMatch_SetReady::_Internal {
 public:
};

CustomMatch_SetReady::CustomMatch_SetReady(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.CustomMatch_SetReady)
}
CustomMatch_SetReady::CustomMatch_SetReady(const CustomMatch_SetReady& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CustomMatch_SetReady* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.isready_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.isready_ = from._impl_.isready_;
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.CustomMatch_SetReady)
}

inline void CustomMatch_SetReady::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.isready_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CustomMatch_SetReady::~CustomMatch_SetReady() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.CustomMatch_SetReady)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CustomMatch_SetReady::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CustomMatch_SetReady::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CustomMatch_SetReady::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.CustomMatch_SetReady)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.isready_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomMatch_SetReady::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool isReady = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.isready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CustomMatch_SetReady::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.CustomMatch_SetReady)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isReady = 1;
  if (this->_internal_isready() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_isready(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.CustomMatch_SetReady)
  return target;
}

size_t CustomMatch_SetReady::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.CustomMatch_SetReady)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isReady = 1;
  if (this->_internal_isready() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CustomMatch_SetReady::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CustomMatch_SetReady::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CustomMatch_SetReady::GetClassData() const { return &_class_data_; }


void CustomMatch_SetReady::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CustomMatch_SetReady*>(&to_msg);
  auto& from = static_cast<const CustomMatch_SetReady&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.CustomMatch_SetReady)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_isready() != 0) {
    _this->_internal_set_isready(from._internal_isready());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CustomMatch_SetReady::CopyFrom(const CustomMatch_SetReady& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.CustomMatch_SetReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomMatch_SetReady::IsInitialized() const {
  return true;
}

void CustomMatch_SetReady::InternalSwap(CustomMatch_SetReady* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.isready_, other->_impl_.isready_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomMatch_SetReady::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[45]);
}

// ===================================================================

class CustomMatch_GetLobbyPlayers::_Internal {
 public:
};

CustomMatch_GetLobbyPlayers::CustomMatch_GetLobbyPlayers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.CustomMatch_GetLobbyPlayers)
}
CustomMatch_GetLobbyPlayers::CustomMatch_GetLobbyPlayers(const CustomMatch_GetLobbyPlayers& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CustomMatch_GetLobbyPlayers* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.CustomMatch_GetLobbyPlayers)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CustomMatch_GetLobbyPlayers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CustomMatch_GetLobbyPlayers::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CustomMatch_GetLobbyPlayers::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[46]);
}

// ===================================================================

class CustomMatch_SetMatchmaking::_Internal {
 public:
};

CustomMatch_SetMatchmaking::CustomMatch_SetMatchmaking(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.CustomMatch_SetMatchmaking)
}
CustomMatch_SetMatchmaking::CustomMatch_SetMatchmaking(const CustomMatch_SetMatchmaking& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CustomMatch_SetMatchmaking* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.enabled_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.enabled_ = from._impl_.enabled_;
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.CustomMatch_SetMatchmaking)
}

inline void CustomMatch_SetMatchmaking::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.enabled_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CustomMatch_SetMatchmaking::~CustomMatch_SetMatchmaking() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.CustomMatch_SetMatchmaking)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CustomMatch_SetMatchmaking::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CustomMatch_SetMatchmaking::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CustomMatch_SetMatchmaking::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.CustomMatch_SetMatchmaking)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.enabled_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomMatch_SetMatchmaking::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CustomMatch_SetMatchmaking::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.CustomMatch_SetMatchmaking)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->_internal_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.CustomMatch_SetMatchmaking)
  return target;
}

size_t CustomMatch_SetMatchmaking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.CustomMatch_SetMatchmaking)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->_internal_enabled() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CustomMatch_SetMatchmaking::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CustomMatch_SetMatchmaking::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CustomMatch_SetMatchmaking::GetClassData() const { return &_class_data_; }


void CustomMatch_SetMatchmaking::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CustomMatch_SetMatchmaking*>(&to_msg);
  auto& from = static_cast<const CustomMatch_SetMatchmaking&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.CustomMatch_SetMatchmaking)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_enabled() != 0) {
    _this->_internal_set_enabled(from._internal_enabled());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CustomMatch_SetMatchmaking::CopyFrom(const CustomMatch_SetMatchmaking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.CustomMatch_SetMatchmaking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomMatch_SetMatchmaking::IsInitialized() const {
  return true;
}

void CustomMatch_SetMatchmaking::InternalSwap(CustomMatch_SetMatchmaking* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.enabled_, other->_impl_.enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomMatch_SetMatchmaking::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[47]);
}

// ===================================================================

class CustomMatch_SetTeam::_Internal {
 public:
};

CustomMatch_SetTeam::CustomMatch_SetTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.CustomMatch_SetTeam)
}
CustomMatch_SetTeam::CustomMatch_SetTeam(const CustomMatch_SetTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CustomMatch_SetTeam* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.targethardwarename_){}
    , decltype(_impl_.targetnucleushash_){}
    , decltype(_impl_.teamid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.targethardwarename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.targethardwarename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_targethardwarename().empty()) {
    _this->_impl_.targethardwarename_.Set(from._internal_targethardwarename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.targetnucleushash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.targetnucleushash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_targetnucleushash().empty()) {
    _this->_impl_.targetnucleushash_.Set(from._internal_targetnucleushash(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.teamid_ = from._impl_.teamid_;
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.CustomMatch_SetTeam)
}

inline void CustomMatch_SetTeam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.targethardwarename_){}
    , decltype(_impl_.targetnucleushash_){}
    , decltype(_impl_.teamid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.targethardwarename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.targethardwarename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.targetnucleushash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.targetnucleushash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CustomMatch_SetTeam::~CustomMatch_SetTeam() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.CustomMatch_SetTeam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CustomMatch_SetTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.targethardwarename_.Destroy();
  _impl_.targetnucleushash_.Destroy();
}

void CustomMatch_SetTeam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CustomMatch_SetTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.CustomMatch_SetTeam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.targethardwarename_.ClearToEmpty();
  _impl_.targetnucleushash_.ClearToEmpty();
  _impl_.teamid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomMatch_SetTeam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 teamId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string targetHardwareName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_targethardwarename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.CustomMatch_SetTeam.targetHardwareName"));
        } else
          goto handle_unusual;
        continue;
      // string targetNucleusHash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_targetnucleushash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.CustomMatch_SetTeam.targetNucleusHash"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CustomMatch_SetTeam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.CustomMatch_SetTeam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 teamId = 1;
  if (this->_internal_teamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_teamid(), target);
  }

  // string targetHardwareName = 2;
  if (!this->_internal_targethardwarename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_targethardwarename().data(), static_cast<int>(this->_internal_targethardwarename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.CustomMatch_SetTeam.targetHardwareName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_targethardwarename(), target);
  }

  // string targetNucleusHash = 3;
  if (!this->_internal_targetnucleushash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_targetnucleushash().data(), static_cast<int>(this->_internal_targetnucleushash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.CustomMatch_SetTeam.targetNucleusHash");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_targetnucleushash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.CustomMatch_SetTeam)
  return target;
}

size_t CustomMatch_SetTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.CustomMatch_SetTeam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string targetHardwareName = 2;
  if (!this->_internal_targethardwarename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_targethardwarename());
  }

  // string targetNucleusHash = 3;
  if (!this->_internal_targetnucleushash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_targetnucleushash());
  }

  // int32 teamId = 1;
  if (this->_internal_teamid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_teamid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CustomMatch_SetTeam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CustomMatch_SetTeam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CustomMatch_SetTeam::GetClassData() const { return &_class_data_; }


void CustomMatch_SetTeam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CustomMatch_SetTeam*>(&to_msg);
  auto& from = static_cast<const CustomMatch_SetTeam&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.CustomMatch_SetTeam)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_targethardwarename().empty()) {
    _this->_internal_set_targethardwarename(from._internal_targethardwarename());
  }
  if (!from._internal_targetnucleushash().empty()) {
    _this->_internal_set_targetnucleushash(from._internal_targetnucleushash());
  }
  if (from._internal_teamid() != 0) {
    _this->_internal_set_teamid(from._internal_teamid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CustomMatch_SetTeam::CopyFrom(const CustomMatch_SetTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.CustomMatch_SetTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomMatch_SetTeam::IsInitialized() const {
  return true;
}

void CustomMatch_SetTeam::InternalSwap(CustomMatch_SetTeam* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.targethardwarename_, lhs_arena,
      &other->_impl_.targethardwarename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.targetnucleushash_, lhs_arena,
      &other->_impl_.targetnucleushash_, rhs_arena
  );
  swap(_impl_.teamid_, other->_impl_.teamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomMatch_SetTeam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[48]);
}

// ===================================================================

class CustomMatch_KickPlayer::_Internal {
 public:
};

CustomMatch_KickPlayer::CustomMatch_KickPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.CustomMatch_KickPlayer)
}
CustomMatch_KickPlayer::CustomMatch_KickPlayer(const CustomMatch_KickPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CustomMatch_KickPlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.targethardwarename_){}
    , decltype(_impl_.targetnucleushash_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.targethardwarename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.targethardwarename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_targethardwarename().empty()) {
    _this->_impl_.targethardwarename_.Set(from._internal_targethardwarename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.targetnucleushash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.targetnucleushash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_targetnucleushash().empty()) {
    _this->_impl_.targetnucleushash_.Set(from._internal_targetnucleushash(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.CustomMatch_KickPlayer)
}

inline void CustomMatch_KickPlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.targethardwarename_){}
    , decltype(_impl_.targetnucleushash_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.targethardwarename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.targethardwarename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.targetnucleushash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.targetnucleushash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CustomMatch_KickPlayer::~CustomMatch_KickPlayer() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.CustomMatch_KickPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CustomMatch_KickPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.targethardwarename_.Destroy();
  _impl_.targetnucleushash_.Destroy();
}

void CustomMatch_KickPlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CustomMatch_KickPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.CustomMatch_KickPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.targethardwarename_.ClearToEmpty();
  _impl_.targetnucleushash_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomMatch_KickPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string targetHardwareName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_targethardwarename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.CustomMatch_KickPlayer.targetHardwareName"));
        } else
          goto handle_unusual;
        continue;
      // string targetNucleusHash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_targetnucleushash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.CustomMatch_KickPlayer.targetNucleusHash"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CustomMatch_KickPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.CustomMatch_KickPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string targetHardwareName = 1;
  if (!this->_internal_targethardwarename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_targethardwarename().data(), static_cast<int>(this->_internal_targethardwarename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.CustomMatch_KickPlayer.targetHardwareName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_targethardwarename(), target);
  }

  // string targetNucleusHash = 2;
  if (!this->_internal_targetnucleushash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_targetnucleushash().data(), static_cast<int>(this->_internal_targetnucleushash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.CustomMatch_KickPlayer.targetNucleusHash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_targetnucleushash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.CustomMatch_KickPlayer)
  return target;
}

size_t CustomMatch_KickPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.CustomMatch_KickPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string targetHardwareName = 1;
  if (!this->_internal_targethardwarename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_targethardwarename());
  }

  // string targetNucleusHash = 2;
  if (!this->_internal_targetnucleushash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_targetnucleushash());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CustomMatch_KickPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CustomMatch_KickPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CustomMatch_KickPlayer::GetClassData() const { return &_class_data_; }


void CustomMatch_KickPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CustomMatch_KickPlayer*>(&to_msg);
  auto& from = static_cast<const CustomMatch_KickPlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.CustomMatch_KickPlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_targethardwarename().empty()) {
    _this->_internal_set_targethardwarename(from._internal_targethardwarename());
  }
  if (!from._internal_targetnucleushash().empty()) {
    _this->_internal_set_targetnucleushash(from._internal_targetnucleushash());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CustomMatch_KickPlayer::CopyFrom(const CustomMatch_KickPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.CustomMatch_KickPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomMatch_KickPlayer::IsInitialized() const {
  return true;
}

void CustomMatch_KickPlayer::InternalSwap(CustomMatch_KickPlayer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.targethardwarename_, lhs_arena,
      &other->_impl_.targethardwarename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.targetnucleushash_, lhs_arena,
      &other->_impl_.targetnucleushash_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomMatch_KickPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[49]);
}

// ===================================================================

class CustomMatch_SetSettings::_Internal {
 public:
};

CustomMatch_SetSettings::CustomMatch_SetSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.CustomMatch_SetSettings)
}
CustomMatch_SetSettings::CustomMatch_SetSettings(const CustomMatch_SetSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CustomMatch_SetSettings* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playlistname_){}
    , decltype(_impl_.adminchat_){}
    , decltype(_impl_.teamrename_){}
    , decltype(_impl_.selfassign_){}
    , decltype(_impl_.aimassist_){}
    , decltype(_impl_.anonmode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.playlistname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playlistname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_playlistname().empty()) {
    _this->_impl_.playlistname_.Set(from._internal_playlistname(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.adminchat_, &from._impl_.adminchat_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.anonmode_) -
    reinterpret_cast<char*>(&_impl_.adminchat_)) + sizeof(_impl_.anonmode_));
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.CustomMatch_SetSettings)
}

inline void CustomMatch_SetSettings::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playlistname_){}
    , decltype(_impl_.adminchat_){false}
    , decltype(_impl_.teamrename_){false}
    , decltype(_impl_.selfassign_){false}
    , decltype(_impl_.aimassist_){false}
    , decltype(_impl_.anonmode_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.playlistname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playlistname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CustomMatch_SetSettings::~CustomMatch_SetSettings() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.CustomMatch_SetSettings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CustomMatch_SetSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.playlistname_.Destroy();
}

void CustomMatch_SetSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CustomMatch_SetSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.CustomMatch_SetSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playlistname_.ClearToEmpty();
  ::memset(&_impl_.adminchat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.anonmode_) -
      reinterpret_cast<char*>(&_impl_.adminchat_)) + sizeof(_impl_.anonmode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomMatch_SetSettings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string playlistName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_playlistname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.CustomMatch_SetSettings.playlistName"));
        } else
          goto handle_unusual;
        continue;
      // bool adminChat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.adminchat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool teamRename = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.teamrename_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool selfAssign = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.selfassign_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool aimAssist = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.aimassist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool anonMode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.anonmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CustomMatch_SetSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.CustomMatch_SetSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string playlistName = 1;
  if (!this->_internal_playlistname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playlistname().data(), static_cast<int>(this->_internal_playlistname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.CustomMatch_SetSettings.playlistName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_playlistname(), target);
  }

  // bool adminChat = 2;
  if (this->_internal_adminchat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_adminchat(), target);
  }

  // bool teamRename = 3;
  if (this->_internal_teamrename() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_teamrename(), target);
  }

  // bool selfAssign = 4;
  if (this->_internal_selfassign() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_selfassign(), target);
  }

  // bool aimAssist = 5;
  if (this->_internal_aimassist() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_aimassist(), target);
  }

  // bool anonMode = 6;
  if (this->_internal_anonmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_anonmode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.CustomMatch_SetSettings)
  return target;
}

size_t CustomMatch_SetSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.CustomMatch_SetSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string playlistName = 1;
  if (!this->_internal_playlistname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playlistname());
  }

  // bool adminChat = 2;
  if (this->_internal_adminchat() != 0) {
    total_size += 1 + 1;
  }

  // bool teamRename = 3;
  if (this->_internal_teamrename() != 0) {
    total_size += 1 + 1;
  }

  // bool selfAssign = 4;
  if (this->_internal_selfassign() != 0) {
    total_size += 1 + 1;
  }

  // bool aimAssist = 5;
  if (this->_internal_aimassist() != 0) {
    total_size += 1 + 1;
  }

  // bool anonMode = 6;
  if (this->_internal_anonmode() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CustomMatch_SetSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CustomMatch_SetSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CustomMatch_SetSettings::GetClassData() const { return &_class_data_; }


void CustomMatch_SetSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CustomMatch_SetSettings*>(&to_msg);
  auto& from = static_cast<const CustomMatch_SetSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.CustomMatch_SetSettings)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_playlistname().empty()) {
    _this->_internal_set_playlistname(from._internal_playlistname());
  }
  if (from._internal_adminchat() != 0) {
    _this->_internal_set_adminchat(from._internal_adminchat());
  }
  if (from._internal_teamrename() != 0) {
    _this->_internal_set_teamrename(from._internal_teamrename());
  }
  if (from._internal_selfassign() != 0) {
    _this->_internal_set_selfassign(from._internal_selfassign());
  }
  if (from._internal_aimassist() != 0) {
    _this->_internal_set_aimassist(from._internal_aimassist());
  }
  if (from._internal_anonmode() != 0) {
    _this->_internal_set_anonmode(from._internal_anonmode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CustomMatch_SetSettings::CopyFrom(const CustomMatch_SetSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.CustomMatch_SetSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomMatch_SetSettings::IsInitialized() const {
  return true;
}

void CustomMatch_SetSettings::InternalSwap(CustomMatch_SetSettings* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.playlistname_, lhs_arena,
      &other->_impl_.playlistname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CustomMatch_SetSettings, _impl_.anonmode_)
      + sizeof(CustomMatch_SetSettings::_impl_.anonmode_)
      - PROTOBUF_FIELD_OFFSET(CustomMatch_SetSettings, _impl_.adminchat_)>(
          reinterpret_cast<char*>(&_impl_.adminchat_),
          reinterpret_cast<char*>(&other->_impl_.adminchat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomMatch_SetSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[50]);
}

// ===================================================================

class CustomMatch_SendChat::_Internal {
 public:
};

CustomMatch_SendChat::CustomMatch_SendChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.CustomMatch_SendChat)
}
CustomMatch_SendChat::CustomMatch_SendChat(const CustomMatch_SendChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CustomMatch_SendChat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.CustomMatch_SendChat)
}

inline void CustomMatch_SendChat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CustomMatch_SendChat::~CustomMatch_SendChat() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.CustomMatch_SendChat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CustomMatch_SendChat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
}

void CustomMatch_SendChat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CustomMatch_SendChat::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.CustomMatch_SendChat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomMatch_SendChat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.CustomMatch_SendChat.text"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CustomMatch_SendChat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.CustomMatch_SendChat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.CustomMatch_SendChat.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.CustomMatch_SendChat)
  return target;
}

size_t CustomMatch_SendChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.CustomMatch_SendChat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CustomMatch_SendChat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CustomMatch_SendChat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CustomMatch_SendChat::GetClassData() const { return &_class_data_; }


void CustomMatch_SendChat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CustomMatch_SendChat*>(&to_msg);
  auto& from = static_cast<const CustomMatch_SendChat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.CustomMatch_SendChat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CustomMatch_SendChat::CopyFrom(const CustomMatch_SendChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.CustomMatch_SendChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomMatch_SendChat::IsInitialized() const {
  return true;
}

void CustomMatch_SendChat::InternalSwap(CustomMatch_SendChat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomMatch_SendChat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[51]);
}

// ===================================================================

class Request::_Internal {
 public:
  static const ::rtech::liveapi::ChangeCamera& changecam(const Request* msg);
  static const ::rtech::liveapi::PauseToggle& pausetoggle(const Request* msg);
  static const ::rtech::liveapi::CustomMatch_CreateLobby& custommatch_createlobby(const Request* msg);
  static const ::rtech::liveapi::CustomMatch_JoinLobby& custommatch_joinlobby(const Request* msg);
  static const ::rtech::liveapi::CustomMatch_LeaveLobby& custommatch_leavelobby(const Request* msg);
  static const ::rtech::liveapi::CustomMatch_SetReady& custommatch_setready(const Request* msg);
  static const ::rtech::liveapi::CustomMatch_SetMatchmaking& custommatch_setmatchmaking(const Request* msg);
  static const ::rtech::liveapi::CustomMatch_SetTeam& custommatch_setteam(const Request* msg);
  static const ::rtech::liveapi::CustomMatch_KickPlayer& custommatch_kickplayer(const Request* msg);
  static const ::rtech::liveapi::CustomMatch_SetSettings& custommatch_setsettings(const Request* msg);
  static const ::rtech::liveapi::CustomMatch_SendChat& custommatch_sendchat(const Request* msg);
  static const ::rtech::liveapi::CustomMatch_GetLobbyPlayers& custommatch_getlobbyplayers(const Request* msg);
};

const ::rtech::liveapi::ChangeCamera&
Request::_Internal::changecam(const Request* msg) {
  return *msg->_impl_.actions_.changecam_;
}
const ::rtech::liveapi::PauseToggle&
Request::_Internal::pausetoggle(const Request* msg) {
  return *msg->_impl_.actions_.pausetoggle_;
}
const ::rtech::liveapi::CustomMatch_CreateLobby&
Request::_Internal::custommatch_createlobby(const Request* msg) {
  return *msg->_impl_.actions_.custommatch_createlobby_;
}
const ::rtech::liveapi::CustomMatch_JoinLobby&
Request::_Internal::custommatch_joinlobby(const Request* msg) {
  return *msg->_impl_.actions_.custommatch_joinlobby_;
}
const ::rtech::liveapi::CustomMatch_LeaveLobby&
Request::_Internal::custommatch_leavelobby(const Request* msg) {
  return *msg->_impl_.actions_.custommatch_leavelobby_;
}
const ::rtech::liveapi::CustomMatch_SetReady&
Request::_Internal::custommatch_setready(const Request* msg) {
  return *msg->_impl_.actions_.custommatch_setready_;
}
const ::rtech::liveapi::CustomMatch_SetMatchmaking&
Request::_Internal::custommatch_setmatchmaking(const Request* msg) {
  return *msg->_impl_.actions_.custommatch_setmatchmaking_;
}
const ::rtech::liveapi::CustomMatch_SetTeam&
Request::_Internal::custommatch_setteam(const Request* msg) {
  return *msg->_impl_.actions_.custommatch_setteam_;
}
const ::rtech::liveapi::CustomMatch_KickPlayer&
Request::_Internal::custommatch_kickplayer(const Request* msg) {
  return *msg->_impl_.actions_.custommatch_kickplayer_;
}
const ::rtech::liveapi::CustomMatch_SetSettings&
Request::_Internal::custommatch_setsettings(const Request* msg) {
  return *msg->_impl_.actions_.custommatch_setsettings_;
}
const ::rtech::liveapi::CustomMatch_SendChat&
Request::_Internal::custommatch_sendchat(const Request* msg) {
  return *msg->_impl_.actions_.custommatch_sendchat_;
}
const ::rtech::liveapi::CustomMatch_GetLobbyPlayers&
Request::_Internal::custommatch_getlobbyplayers(const Request* msg) {
  return *msg->_impl_.actions_.custommatch_getlobbyplayers_;
}
void Request::set_allocated_changecam(::rtech::liveapi::ChangeCamera* changecam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_actions();
  if (changecam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(changecam);
    if (message_arena != submessage_arena) {
      changecam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, changecam, submessage_arena);
    }
    set_has_changecam();
    _impl_.actions_.changecam_ = changecam;
  }
  // @@protoc_insertion_point(field_set_allocated:rtech.liveapi.Request.changeCam)
}
void Request::set_allocated_pausetoggle(::rtech::liveapi::PauseToggle* pausetoggle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_actions();
  if (pausetoggle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pausetoggle);
    if (message_arena != submessage_arena) {
      pausetoggle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pausetoggle, submessage_arena);
    }
    set_has_pausetoggle();
    _impl_.actions_.pausetoggle_ = pausetoggle;
  }
  // @@protoc_insertion_point(field_set_allocated:rtech.liveapi.Request.pauseToggle)
}
void Request::set_allocated_custommatch_createlobby(::rtech::liveapi::CustomMatch_CreateLobby* custommatch_createlobby) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_actions();
  if (custommatch_createlobby) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(custommatch_createlobby);
    if (message_arena != submessage_arena) {
      custommatch_createlobby = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custommatch_createlobby, submessage_arena);
    }
    set_has_custommatch_createlobby();
    _impl_.actions_.custommatch_createlobby_ = custommatch_createlobby;
  }
  // @@protoc_insertion_point(field_set_allocated:rtech.liveapi.Request.customMatch_CreateLobby)
}
void Request::set_allocated_custommatch_joinlobby(::rtech::liveapi::CustomMatch_JoinLobby* custommatch_joinlobby) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_actions();
  if (custommatch_joinlobby) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(custommatch_joinlobby);
    if (message_arena != submessage_arena) {
      custommatch_joinlobby = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custommatch_joinlobby, submessage_arena);
    }
    set_has_custommatch_joinlobby();
    _impl_.actions_.custommatch_joinlobby_ = custommatch_joinlobby;
  }
  // @@protoc_insertion_point(field_set_allocated:rtech.liveapi.Request.customMatch_JoinLobby)
}
void Request::set_allocated_custommatch_leavelobby(::rtech::liveapi::CustomMatch_LeaveLobby* custommatch_leavelobby) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_actions();
  if (custommatch_leavelobby) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(custommatch_leavelobby);
    if (message_arena != submessage_arena) {
      custommatch_leavelobby = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custommatch_leavelobby, submessage_arena);
    }
    set_has_custommatch_leavelobby();
    _impl_.actions_.custommatch_leavelobby_ = custommatch_leavelobby;
  }
  // @@protoc_insertion_point(field_set_allocated:rtech.liveapi.Request.customMatch_LeaveLobby)
}
void Request::set_allocated_custommatch_setready(::rtech::liveapi::CustomMatch_SetReady* custommatch_setready) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_actions();
  if (custommatch_setready) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(custommatch_setready);
    if (message_arena != submessage_arena) {
      custommatch_setready = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custommatch_setready, submessage_arena);
    }
    set_has_custommatch_setready();
    _impl_.actions_.custommatch_setready_ = custommatch_setready;
  }
  // @@protoc_insertion_point(field_set_allocated:rtech.liveapi.Request.customMatch_SetReady)
}
void Request::set_allocated_custommatch_setmatchmaking(::rtech::liveapi::CustomMatch_SetMatchmaking* custommatch_setmatchmaking) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_actions();
  if (custommatch_setmatchmaking) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(custommatch_setmatchmaking);
    if (message_arena != submessage_arena) {
      custommatch_setmatchmaking = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custommatch_setmatchmaking, submessage_arena);
    }
    set_has_custommatch_setmatchmaking();
    _impl_.actions_.custommatch_setmatchmaking_ = custommatch_setmatchmaking;
  }
  // @@protoc_insertion_point(field_set_allocated:rtech.liveapi.Request.customMatch_SetMatchmaking)
}
void Request::set_allocated_custommatch_setteam(::rtech::liveapi::CustomMatch_SetTeam* custommatch_setteam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_actions();
  if (custommatch_setteam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(custommatch_setteam);
    if (message_arena != submessage_arena) {
      custommatch_setteam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custommatch_setteam, submessage_arena);
    }
    set_has_custommatch_setteam();
    _impl_.actions_.custommatch_setteam_ = custommatch_setteam;
  }
  // @@protoc_insertion_point(field_set_allocated:rtech.liveapi.Request.customMatch_SetTeam)
}
void Request::set_allocated_custommatch_kickplayer(::rtech::liveapi::CustomMatch_KickPlayer* custommatch_kickplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_actions();
  if (custommatch_kickplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(custommatch_kickplayer);
    if (message_arena != submessage_arena) {
      custommatch_kickplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custommatch_kickplayer, submessage_arena);
    }
    set_has_custommatch_kickplayer();
    _impl_.actions_.custommatch_kickplayer_ = custommatch_kickplayer;
  }
  // @@protoc_insertion_point(field_set_allocated:rtech.liveapi.Request.customMatch_KickPlayer)
}
void Request::set_allocated_custommatch_setsettings(::rtech::liveapi::CustomMatch_SetSettings* custommatch_setsettings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_actions();
  if (custommatch_setsettings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(custommatch_setsettings);
    if (message_arena != submessage_arena) {
      custommatch_setsettings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custommatch_setsettings, submessage_arena);
    }
    set_has_custommatch_setsettings();
    _impl_.actions_.custommatch_setsettings_ = custommatch_setsettings;
  }
  // @@protoc_insertion_point(field_set_allocated:rtech.liveapi.Request.customMatch_SetSettings)
}
void Request::set_allocated_custommatch_sendchat(::rtech::liveapi::CustomMatch_SendChat* custommatch_sendchat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_actions();
  if (custommatch_sendchat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(custommatch_sendchat);
    if (message_arena != submessage_arena) {
      custommatch_sendchat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custommatch_sendchat, submessage_arena);
    }
    set_has_custommatch_sendchat();
    _impl_.actions_.custommatch_sendchat_ = custommatch_sendchat;
  }
  // @@protoc_insertion_point(field_set_allocated:rtech.liveapi.Request.customMatch_SendChat)
}
void Request::set_allocated_custommatch_getlobbyplayers(::rtech::liveapi::CustomMatch_GetLobbyPlayers* custommatch_getlobbyplayers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_actions();
  if (custommatch_getlobbyplayers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(custommatch_getlobbyplayers);
    if (message_arena != submessage_arena) {
      custommatch_getlobbyplayers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custommatch_getlobbyplayers, submessage_arena);
    }
    set_has_custommatch_getlobbyplayers();
    _impl_.actions_.custommatch_getlobbyplayers_ = custommatch_getlobbyplayers;
  }
  // @@protoc_insertion_point(field_set_allocated:rtech.liveapi.Request.customMatch_GetLobbyPlayers)
}
Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.presharedkey_){}
    , decltype(_impl_.withack_){}
    , decltype(_impl_.actions_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.presharedkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.presharedkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_presharedkey().empty()) {
    _this->_impl_.presharedkey_.Set(from._internal_presharedkey(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.withack_ = from._impl_.withack_;
  clear_has_actions();
  switch (from.actions_case()) {
    case kChangeCam: {
      _this->_internal_mutable_changecam()->::rtech::liveapi::ChangeCamera::MergeFrom(
          from._internal_changecam());
      break;
    }
    case kPauseToggle: {
      _this->_internal_mutable_pausetoggle()->::rtech::liveapi::PauseToggle::MergeFrom(
          from._internal_pausetoggle());
      break;
    }
    case kCustomMatchCreateLobby: {
      _this->_internal_mutable_custommatch_createlobby()->::rtech::liveapi::CustomMatch_CreateLobby::MergeFrom(
          from._internal_custommatch_createlobby());
      break;
    }
    case kCustomMatchJoinLobby: {
      _this->_internal_mutable_custommatch_joinlobby()->::rtech::liveapi::CustomMatch_JoinLobby::MergeFrom(
          from._internal_custommatch_joinlobby());
      break;
    }
    case kCustomMatchLeaveLobby: {
      _this->_internal_mutable_custommatch_leavelobby()->::rtech::liveapi::CustomMatch_LeaveLobby::MergeFrom(
          from._internal_custommatch_leavelobby());
      break;
    }
    case kCustomMatchSetReady: {
      _this->_internal_mutable_custommatch_setready()->::rtech::liveapi::CustomMatch_SetReady::MergeFrom(
          from._internal_custommatch_setready());
      break;
    }
    case kCustomMatchSetMatchmaking: {
      _this->_internal_mutable_custommatch_setmatchmaking()->::rtech::liveapi::CustomMatch_SetMatchmaking::MergeFrom(
          from._internal_custommatch_setmatchmaking());
      break;
    }
    case kCustomMatchSetTeam: {
      _this->_internal_mutable_custommatch_setteam()->::rtech::liveapi::CustomMatch_SetTeam::MergeFrom(
          from._internal_custommatch_setteam());
      break;
    }
    case kCustomMatchKickPlayer: {
      _this->_internal_mutable_custommatch_kickplayer()->::rtech::liveapi::CustomMatch_KickPlayer::MergeFrom(
          from._internal_custommatch_kickplayer());
      break;
    }
    case kCustomMatchSetSettings: {
      _this->_internal_mutable_custommatch_setsettings()->::rtech::liveapi::CustomMatch_SetSettings::MergeFrom(
          from._internal_custommatch_setsettings());
      break;
    }
    case kCustomMatchSendChat: {
      _this->_internal_mutable_custommatch_sendchat()->::rtech::liveapi::CustomMatch_SendChat::MergeFrom(
          from._internal_custommatch_sendchat());
      break;
    }
    case kCustomMatchGetLobbyPlayers: {
      _this->_internal_mutable_custommatch_getlobbyplayers()->::rtech::liveapi::CustomMatch_GetLobbyPlayers::MergeFrom(
          from._internal_custommatch_getlobbyplayers());
      break;
    }
    case ACTIONS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.Request)
}

inline void Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.presharedkey_){}
    , decltype(_impl_.withack_){false}
    , decltype(_impl_.actions_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.presharedkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.presharedkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_actions();
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.presharedkey_.Destroy();
  if (has_actions()) {
    clear_actions();
  }
}

void Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Request::clear_actions() {
// @@protoc_insertion_point(one_of_clear_start:rtech.liveapi.Request)
  switch (actions_case()) {
    case kChangeCam: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.actions_.changecam_;
      }
      break;
    }
    case kPauseToggle: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.actions_.pausetoggle_;
      }
      break;
    }
    case kCustomMatchCreateLobby: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.actions_.custommatch_createlobby_;
      }
      break;
    }
    case kCustomMatchJoinLobby: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.actions_.custommatch_joinlobby_;
      }
      break;
    }
    case kCustomMatchLeaveLobby: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.actions_.custommatch_leavelobby_;
      }
      break;
    }
    case kCustomMatchSetReady: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.actions_.custommatch_setready_;
      }
      break;
    }
    case kCustomMatchSetMatchmaking: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.actions_.custommatch_setmatchmaking_;
      }
      break;
    }
    case kCustomMatchSetTeam: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.actions_.custommatch_setteam_;
      }
      break;
    }
    case kCustomMatchKickPlayer: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.actions_.custommatch_kickplayer_;
      }
      break;
    }
    case kCustomMatchSetSettings: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.actions_.custommatch_setsettings_;
      }
      break;
    }
    case kCustomMatchSendChat: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.actions_.custommatch_sendchat_;
      }
      break;
    }
    case kCustomMatchGetLobbyPlayers: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.actions_.custommatch_getlobbyplayers_;
      }
      break;
    }
    case ACTIONS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ACTIONS_NOT_SET;
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.presharedkey_.ClearToEmpty();
  _impl_.withack_ = false;
  clear_actions();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool withAck = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.withack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string preSharedKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_presharedkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.Request.preSharedKey"));
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.ChangeCamera changeCam = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_changecam(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.PauseToggle pauseToggle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pausetoggle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.CustomMatch_CreateLobby customMatch_CreateLobby = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_custommatch_createlobby(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.CustomMatch_JoinLobby customMatch_JoinLobby = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_custommatch_joinlobby(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.CustomMatch_LeaveLobby customMatch_LeaveLobby = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_custommatch_leavelobby(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.CustomMatch_SetReady customMatch_SetReady = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_custommatch_setready(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.CustomMatch_SetMatchmaking customMatch_SetMatchmaking = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_custommatch_setmatchmaking(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.CustomMatch_SetTeam customMatch_SetTeam = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_custommatch_setteam(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.CustomMatch_KickPlayer customMatch_KickPlayer = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_custommatch_kickplayer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.CustomMatch_SetSettings customMatch_SetSettings = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_custommatch_setsettings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.CustomMatch_SendChat customMatch_SendChat = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_custommatch_sendchat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rtech.liveapi.CustomMatch_GetLobbyPlayers customMatch_GetLobbyPlayers = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_custommatch_getlobbyplayers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool withAck = 1;
  if (this->_internal_withack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_withack(), target);
  }

  // string preSharedKey = 2;
  if (!this->_internal_presharedkey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_presharedkey().data(), static_cast<int>(this->_internal_presharedkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.Request.preSharedKey");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_presharedkey(), target);
  }

  // .rtech.liveapi.ChangeCamera changeCam = 4;
  if (_internal_has_changecam()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::changecam(this),
        _Internal::changecam(this).GetCachedSize(), target, stream);
  }

  // .rtech.liveapi.PauseToggle pauseToggle = 5;
  if (_internal_has_pausetoggle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::pausetoggle(this),
        _Internal::pausetoggle(this).GetCachedSize(), target, stream);
  }

  // .rtech.liveapi.CustomMatch_CreateLobby customMatch_CreateLobby = 10;
  if (_internal_has_custommatch_createlobby()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::custommatch_createlobby(this),
        _Internal::custommatch_createlobby(this).GetCachedSize(), target, stream);
  }

  // .rtech.liveapi.CustomMatch_JoinLobby customMatch_JoinLobby = 11;
  if (_internal_has_custommatch_joinlobby()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::custommatch_joinlobby(this),
        _Internal::custommatch_joinlobby(this).GetCachedSize(), target, stream);
  }

  // .rtech.liveapi.CustomMatch_LeaveLobby customMatch_LeaveLobby = 12;
  if (_internal_has_custommatch_leavelobby()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::custommatch_leavelobby(this),
        _Internal::custommatch_leavelobby(this).GetCachedSize(), target, stream);
  }

  // .rtech.liveapi.CustomMatch_SetReady customMatch_SetReady = 13;
  if (_internal_has_custommatch_setready()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::custommatch_setready(this),
        _Internal::custommatch_setready(this).GetCachedSize(), target, stream);
  }

  // .rtech.liveapi.CustomMatch_SetMatchmaking customMatch_SetMatchmaking = 14;
  if (_internal_has_custommatch_setmatchmaking()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::custommatch_setmatchmaking(this),
        _Internal::custommatch_setmatchmaking(this).GetCachedSize(), target, stream);
  }

  // .rtech.liveapi.CustomMatch_SetTeam customMatch_SetTeam = 15;
  if (_internal_has_custommatch_setteam()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::custommatch_setteam(this),
        _Internal::custommatch_setteam(this).GetCachedSize(), target, stream);
  }

  // .rtech.liveapi.CustomMatch_KickPlayer customMatch_KickPlayer = 16;
  if (_internal_has_custommatch_kickplayer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::custommatch_kickplayer(this),
        _Internal::custommatch_kickplayer(this).GetCachedSize(), target, stream);
  }

  // .rtech.liveapi.CustomMatch_SetSettings customMatch_SetSettings = 17;
  if (_internal_has_custommatch_setsettings()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::custommatch_setsettings(this),
        _Internal::custommatch_setsettings(this).GetCachedSize(), target, stream);
  }

  // .rtech.liveapi.CustomMatch_SendChat customMatch_SendChat = 18;
  if (_internal_has_custommatch_sendchat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::custommatch_sendchat(this),
        _Internal::custommatch_sendchat(this).GetCachedSize(), target, stream);
  }

  // .rtech.liveapi.CustomMatch_GetLobbyPlayers customMatch_GetLobbyPlayers = 19;
  if (_internal_has_custommatch_getlobbyplayers()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::custommatch_getlobbyplayers(this),
        _Internal::custommatch_getlobbyplayers(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string preSharedKey = 2;
  if (!this->_internal_presharedkey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_presharedkey());
  }

  // bool withAck = 1;
  if (this->_internal_withack() != 0) {
    total_size += 1 + 1;
  }

  switch (actions_case()) {
    // .rtech.liveapi.ChangeCamera changeCam = 4;
    case kChangeCam: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.actions_.changecam_);
      break;
    }
    // .rtech.liveapi.PauseToggle pauseToggle = 5;
    case kPauseToggle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.actions_.pausetoggle_);
      break;
    }
    // .rtech.liveapi.CustomMatch_CreateLobby customMatch_CreateLobby = 10;
    case kCustomMatchCreateLobby: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.actions_.custommatch_createlobby_);
      break;
    }
    // .rtech.liveapi.CustomMatch_JoinLobby customMatch_JoinLobby = 11;
    case kCustomMatchJoinLobby: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.actions_.custommatch_joinlobby_);
      break;
    }
    // .rtech.liveapi.CustomMatch_LeaveLobby customMatch_LeaveLobby = 12;
    case kCustomMatchLeaveLobby: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.actions_.custommatch_leavelobby_);
      break;
    }
    // .rtech.liveapi.CustomMatch_SetReady customMatch_SetReady = 13;
    case kCustomMatchSetReady: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.actions_.custommatch_setready_);
      break;
    }
    // .rtech.liveapi.CustomMatch_SetMatchmaking customMatch_SetMatchmaking = 14;
    case kCustomMatchSetMatchmaking: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.actions_.custommatch_setmatchmaking_);
      break;
    }
    // .rtech.liveapi.CustomMatch_SetTeam customMatch_SetTeam = 15;
    case kCustomMatchSetTeam: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.actions_.custommatch_setteam_);
      break;
    }
    // .rtech.liveapi.CustomMatch_KickPlayer customMatch_KickPlayer = 16;
    case kCustomMatchKickPlayer: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.actions_.custommatch_kickplayer_);
      break;
    }
    // .rtech.liveapi.CustomMatch_SetSettings customMatch_SetSettings = 17;
    case kCustomMatchSetSettings: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.actions_.custommatch_setsettings_);
      break;
    }
    // .rtech.liveapi.CustomMatch_SendChat customMatch_SendChat = 18;
    case kCustomMatchSendChat: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.actions_.custommatch_sendchat_);
      break;
    }
    // .rtech.liveapi.CustomMatch_GetLobbyPlayers customMatch_GetLobbyPlayers = 19;
    case kCustomMatchGetLobbyPlayers: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.actions_.custommatch_getlobbyplayers_);
      break;
    }
    case ACTIONS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Request::GetClassData() const { return &_class_data_; }


void Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Request*>(&to_msg);
  auto& from = static_cast<const Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_presharedkey().empty()) {
    _this->_internal_set_presharedkey(from._internal_presharedkey());
  }
  if (from._internal_withack() != 0) {
    _this->_internal_set_withack(from._internal_withack());
  }
  switch (from.actions_case()) {
    case kChangeCam: {
      _this->_internal_mutable_changecam()->::rtech::liveapi::ChangeCamera::MergeFrom(
          from._internal_changecam());
      break;
    }
    case kPauseToggle: {
      _this->_internal_mutable_pausetoggle()->::rtech::liveapi::PauseToggle::MergeFrom(
          from._internal_pausetoggle());
      break;
    }
    case kCustomMatchCreateLobby: {
      _this->_internal_mutable_custommatch_createlobby()->::rtech::liveapi::CustomMatch_CreateLobby::MergeFrom(
          from._internal_custommatch_createlobby());
      break;
    }
    case kCustomMatchJoinLobby: {
      _this->_internal_mutable_custommatch_joinlobby()->::rtech::liveapi::CustomMatch_JoinLobby::MergeFrom(
          from._internal_custommatch_joinlobby());
      break;
    }
    case kCustomMatchLeaveLobby: {
      _this->_internal_mutable_custommatch_leavelobby()->::rtech::liveapi::CustomMatch_LeaveLobby::MergeFrom(
          from._internal_custommatch_leavelobby());
      break;
    }
    case kCustomMatchSetReady: {
      _this->_internal_mutable_custommatch_setready()->::rtech::liveapi::CustomMatch_SetReady::MergeFrom(
          from._internal_custommatch_setready());
      break;
    }
    case kCustomMatchSetMatchmaking: {
      _this->_internal_mutable_custommatch_setmatchmaking()->::rtech::liveapi::CustomMatch_SetMatchmaking::MergeFrom(
          from._internal_custommatch_setmatchmaking());
      break;
    }
    case kCustomMatchSetTeam: {
      _this->_internal_mutable_custommatch_setteam()->::rtech::liveapi::CustomMatch_SetTeam::MergeFrom(
          from._internal_custommatch_setteam());
      break;
    }
    case kCustomMatchKickPlayer: {
      _this->_internal_mutable_custommatch_kickplayer()->::rtech::liveapi::CustomMatch_KickPlayer::MergeFrom(
          from._internal_custommatch_kickplayer());
      break;
    }
    case kCustomMatchSetSettings: {
      _this->_internal_mutable_custommatch_setsettings()->::rtech::liveapi::CustomMatch_SetSettings::MergeFrom(
          from._internal_custommatch_setsettings());
      break;
    }
    case kCustomMatchSendChat: {
      _this->_internal_mutable_custommatch_sendchat()->::rtech::liveapi::CustomMatch_SendChat::MergeFrom(
          from._internal_custommatch_sendchat());
      break;
    }
    case kCustomMatchGetLobbyPlayers: {
      _this->_internal_mutable_custommatch_getlobbyplayers()->::rtech::liveapi::CustomMatch_GetLobbyPlayers::MergeFrom(
          from._internal_custommatch_getlobbyplayers());
      break;
    }
    case ACTIONS_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.presharedkey_, lhs_arena,
      &other->_impl_.presharedkey_, rhs_arena
  );
  swap(_impl_.withack_, other->_impl_.withack_);
  swap(_impl_.actions_, other->_impl_.actions_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[52]);
}

// ===================================================================

class RequestStatus::_Internal {
 public:
};

RequestStatus::RequestStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.RequestStatus)
}
RequestStatus::RequestStatus(const RequestStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.RequestStatus)
}

inline void RequestStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestStatus::~RequestStatus() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.RequestStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.status_.Destroy();
}

void RequestStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.RequestStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rtech.liveapi.RequestStatus.status"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.RequestStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtech.liveapi.RequestStatus.status");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.RequestStatus)
  return target;
}

size_t RequestStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.RequestStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 1;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestStatus::GetClassData() const { return &_class_data_; }


void RequestStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestStatus*>(&to_msg);
  auto& from = static_cast<const RequestStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.RequestStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestStatus::CopyFrom(const RequestStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.RequestStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestStatus::IsInitialized() const {
  return true;
}

void RequestStatus::InternalSwap(RequestStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_, lhs_arena,
      &other->_impl_.status_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[53]);
}

// ===================================================================

class Response::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& result(const Response* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
Response::_Internal::result(const Response* msg) {
  return *msg->_impl_.result_;
}
void Response::clear_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
}
Response::Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){nullptr}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    _this->_impl_.result_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.result_);
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.Response)
}

inline void Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){nullptr}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.result_;
}

void Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .google.protobuf.Any result = 2;
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any result = 2;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Response::GetClassData() const { return &_class_data_; }


void Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Response*>(&to_msg);
  auto& from = static_cast<const Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _this->_internal_mutable_result()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_result());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Response, _impl_.success_)
      + sizeof(Response::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(Response, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[54]);
}

// ===================================================================

class LiveAPIEvent::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& gamemessage(const LiveAPIEvent* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
LiveAPIEvent::_Internal::gamemessage(const LiveAPIEvent* msg) {
  return *msg->_impl_.gamemessage_;
}
void LiveAPIEvent::clear_gamemessage() {
  if (GetArenaForAllocation() == nullptr && _impl_.gamemessage_ != nullptr) {
    delete _impl_.gamemessage_;
  }
  _impl_.gamemessage_ = nullptr;
}
LiveAPIEvent::LiveAPIEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rtech.liveapi.LiveAPIEvent)
}
LiveAPIEvent::LiveAPIEvent(const LiveAPIEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LiveAPIEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gamemessage_){nullptr}
    , decltype(_impl_.event_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gamemessage()) {
    _this->_impl_.gamemessage_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.gamemessage_);
  }
  _this->_impl_.event_size_ = from._impl_.event_size_;
  // @@protoc_insertion_point(copy_constructor:rtech.liveapi.LiveAPIEvent)
}

inline void LiveAPIEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gamemessage_){nullptr}
    , decltype(_impl_.event_size_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LiveAPIEvent::~LiveAPIEvent() {
  // @@protoc_insertion_point(destructor:rtech.liveapi.LiveAPIEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LiveAPIEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.gamemessage_;
}

void LiveAPIEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LiveAPIEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:rtech.liveapi.LiveAPIEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.gamemessage_ != nullptr) {
    delete _impl_.gamemessage_;
  }
  _impl_.gamemessage_ = nullptr;
  _impl_.event_size_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiveAPIEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed32 event_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.event_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any gameMessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LiveAPIEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtech.liveapi.LiveAPIEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 event_size = 1;
  if (this->_internal_event_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(1, this->_internal_event_size(), target);
  }

  // .google.protobuf.Any gameMessage = 3;
  if (this->_internal_has_gamemessage()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::gamemessage(this),
        _Internal::gamemessage(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtech.liveapi.LiveAPIEvent)
  return target;
}

size_t LiveAPIEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtech.liveapi.LiveAPIEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any gameMessage = 3;
  if (this->_internal_has_gamemessage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gamemessage_);
  }

  // fixed32 event_size = 1;
  if (this->_internal_event_size() != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LiveAPIEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LiveAPIEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LiveAPIEvent::GetClassData() const { return &_class_data_; }


void LiveAPIEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LiveAPIEvent*>(&to_msg);
  auto& from = static_cast<const LiveAPIEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rtech.liveapi.LiveAPIEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_gamemessage()) {
    _this->_internal_mutable_gamemessage()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_gamemessage());
  }
  if (from._internal_event_size() != 0) {
    _this->_internal_set_event_size(from._internal_event_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LiveAPIEvent::CopyFrom(const LiveAPIEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtech.liveapi.LiveAPIEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveAPIEvent::IsInitialized() const {
  return true;
}

void LiveAPIEvent::InternalSwap(LiveAPIEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LiveAPIEvent, _impl_.event_size_)
      + sizeof(LiveAPIEvent::_impl_.event_size_)
      - PROTOBUF_FIELD_OFFSET(LiveAPIEvent, _impl_.gamemessage_)>(
          reinterpret_cast<char*>(&_impl_.gamemessage_),
          reinterpret_cast<char*>(&other->_impl_.gamemessage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LiveAPIEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[55]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace liveapi
}  // namespace rtech
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rtech::liveapi::Vector3*
Arena::CreateMaybeMessage< ::rtech::liveapi::Vector3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::Vector3 >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::Player*
Arena::CreateMaybeMessage< ::rtech::liveapi::Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::Player >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::CustomMatch_LobbyPlayer*
Arena::CreateMaybeMessage< ::rtech::liveapi::CustomMatch_LobbyPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::CustomMatch_LobbyPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::Datacenter*
Arena::CreateMaybeMessage< ::rtech::liveapi::Datacenter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::Datacenter >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::Version*
Arena::CreateMaybeMessage< ::rtech::liveapi::Version >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::Version >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::Init*
Arena::CreateMaybeMessage< ::rtech::liveapi::Init >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::Init >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::CustomMatch_LobbyPlayers*
Arena::CreateMaybeMessage< ::rtech::liveapi::CustomMatch_LobbyPlayers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::CustomMatch_LobbyPlayers >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::ObserverSwitched*
Arena::CreateMaybeMessage< ::rtech::liveapi::ObserverSwitched >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::ObserverSwitched >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::ObserverAnnotation*
Arena::CreateMaybeMessage< ::rtech::liveapi::ObserverAnnotation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::ObserverAnnotation >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::MatchSetup*
Arena::CreateMaybeMessage< ::rtech::liveapi::MatchSetup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::MatchSetup >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::GameStateChanged*
Arena::CreateMaybeMessage< ::rtech::liveapi::GameStateChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::GameStateChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::CharacterSelected*
Arena::CreateMaybeMessage< ::rtech::liveapi::CharacterSelected >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::CharacterSelected >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::MatchStateEnd*
Arena::CreateMaybeMessage< ::rtech::liveapi::MatchStateEnd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::MatchStateEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::RingStartClosing*
Arena::CreateMaybeMessage< ::rtech::liveapi::RingStartClosing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::RingStartClosing >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::RingFinishedClosing*
Arena::CreateMaybeMessage< ::rtech::liveapi::RingFinishedClosing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::RingFinishedClosing >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::PlayerConnected*
Arena::CreateMaybeMessage< ::rtech::liveapi::PlayerConnected >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::PlayerConnected >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::PlayerDisconnected*
Arena::CreateMaybeMessage< ::rtech::liveapi::PlayerDisconnected >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::PlayerDisconnected >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::PlayerStatChanged*
Arena::CreateMaybeMessage< ::rtech::liveapi::PlayerStatChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::PlayerStatChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::PlayerDamaged*
Arena::CreateMaybeMessage< ::rtech::liveapi::PlayerDamaged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::PlayerDamaged >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::PlayerKilled*
Arena::CreateMaybeMessage< ::rtech::liveapi::PlayerKilled >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::PlayerKilled >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::PlayerDowned*
Arena::CreateMaybeMessage< ::rtech::liveapi::PlayerDowned >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::PlayerDowned >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::PlayerAssist*
Arena::CreateMaybeMessage< ::rtech::liveapi::PlayerAssist >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::PlayerAssist >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::SquadEliminated*
Arena::CreateMaybeMessage< ::rtech::liveapi::SquadEliminated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::SquadEliminated >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::GibraltarShieldAbsorbed*
Arena::CreateMaybeMessage< ::rtech::liveapi::GibraltarShieldAbsorbed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::GibraltarShieldAbsorbed >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::PlayerRespawnTeam*
Arena::CreateMaybeMessage< ::rtech::liveapi::PlayerRespawnTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::PlayerRespawnTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::PlayerRevive*
Arena::CreateMaybeMessage< ::rtech::liveapi::PlayerRevive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::PlayerRevive >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::ArenasItemSelected*
Arena::CreateMaybeMessage< ::rtech::liveapi::ArenasItemSelected >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::ArenasItemSelected >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::ArenasItemDeselected*
Arena::CreateMaybeMessage< ::rtech::liveapi::ArenasItemDeselected >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::ArenasItemDeselected >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::InventoryPickUp*
Arena::CreateMaybeMessage< ::rtech::liveapi::InventoryPickUp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::InventoryPickUp >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::InventoryDrop*
Arena::CreateMaybeMessage< ::rtech::liveapi::InventoryDrop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::InventoryDrop >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::InventoryUse*
Arena::CreateMaybeMessage< ::rtech::liveapi::InventoryUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::InventoryUse >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::BannerCollected*
Arena::CreateMaybeMessage< ::rtech::liveapi::BannerCollected >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::BannerCollected >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::PlayerAbilityUsed*
Arena::CreateMaybeMessage< ::rtech::liveapi::PlayerAbilityUsed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::PlayerAbilityUsed >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::ZiplineUsed*
Arena::CreateMaybeMessage< ::rtech::liveapi::ZiplineUsed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::ZiplineUsed >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::GrenadeThrown*
Arena::CreateMaybeMessage< ::rtech::liveapi::GrenadeThrown >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::GrenadeThrown >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::BlackMarketAction*
Arena::CreateMaybeMessage< ::rtech::liveapi::BlackMarketAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::BlackMarketAction >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::WraithPortal*
Arena::CreateMaybeMessage< ::rtech::liveapi::WraithPortal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::WraithPortal >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::WarpGateUsed*
Arena::CreateMaybeMessage< ::rtech::liveapi::WarpGateUsed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::WarpGateUsed >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::AmmoUsed*
Arena::CreateMaybeMessage< ::rtech::liveapi::AmmoUsed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::AmmoUsed >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::WeaponSwitched*
Arena::CreateMaybeMessage< ::rtech::liveapi::WeaponSwitched >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::WeaponSwitched >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::ChangeCamera*
Arena::CreateMaybeMessage< ::rtech::liveapi::ChangeCamera >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::ChangeCamera >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::PauseToggle*
Arena::CreateMaybeMessage< ::rtech::liveapi::PauseToggle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::PauseToggle >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::CustomMatch_CreateLobby*
Arena::CreateMaybeMessage< ::rtech::liveapi::CustomMatch_CreateLobby >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::CustomMatch_CreateLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::CustomMatch_JoinLobby*
Arena::CreateMaybeMessage< ::rtech::liveapi::CustomMatch_JoinLobby >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::CustomMatch_JoinLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::CustomMatch_LeaveLobby*
Arena::CreateMaybeMessage< ::rtech::liveapi::CustomMatch_LeaveLobby >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::CustomMatch_LeaveLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::CustomMatch_SetReady*
Arena::CreateMaybeMessage< ::rtech::liveapi::CustomMatch_SetReady >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::CustomMatch_SetReady >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::CustomMatch_GetLobbyPlayers*
Arena::CreateMaybeMessage< ::rtech::liveapi::CustomMatch_GetLobbyPlayers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::CustomMatch_GetLobbyPlayers >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::CustomMatch_SetMatchmaking*
Arena::CreateMaybeMessage< ::rtech::liveapi::CustomMatch_SetMatchmaking >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::CustomMatch_SetMatchmaking >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::CustomMatch_SetTeam*
Arena::CreateMaybeMessage< ::rtech::liveapi::CustomMatch_SetTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::CustomMatch_SetTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::CustomMatch_KickPlayer*
Arena::CreateMaybeMessage< ::rtech::liveapi::CustomMatch_KickPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::CustomMatch_KickPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::CustomMatch_SetSettings*
Arena::CreateMaybeMessage< ::rtech::liveapi::CustomMatch_SetSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::CustomMatch_SetSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::CustomMatch_SendChat*
Arena::CreateMaybeMessage< ::rtech::liveapi::CustomMatch_SendChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::CustomMatch_SendChat >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::Request*
Arena::CreateMaybeMessage< ::rtech::liveapi::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::RequestStatus*
Arena::CreateMaybeMessage< ::rtech::liveapi::RequestStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::RequestStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::Response*
Arena::CreateMaybeMessage< ::rtech::liveapi::Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::Response >(arena);
}
template<> PROTOBUF_NOINLINE ::rtech::liveapi::LiveAPIEvent*
Arena::CreateMaybeMessage< ::rtech::liveapi::LiveAPIEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtech::liveapi::LiveAPIEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
